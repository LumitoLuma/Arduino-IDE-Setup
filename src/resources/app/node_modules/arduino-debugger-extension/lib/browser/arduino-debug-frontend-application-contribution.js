"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoDebugFrontendApplicationContribution = exports.ArduinoDebugCommands = void 0;
const inversify_1 = require("inversify");
const core_1 = require("@theia/core");
const debug_frontend_application_contribution_1 = require("@theia/debug/lib/browser/debug-frontend-application-contribution");
const workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
const common_1 = require("@theia/filesystem/lib/common");
const uri_1 = require("@theia/core/lib/common/uri");
const browser_1 = require("@theia/editor/lib/browser");
const editor_mode_1 = require("arduino-ide-extension/lib/browser/editor-mode");
const sketches_service_1 = require("arduino-ide-extension/lib/common/protocol/sketches-service");
const arduino_toolbar_1 = require("arduino-ide-extension/lib/browser/toolbar/arduino-toolbar");
var ArduinoDebugCommands;
(function (ArduinoDebugCommands) {
    ArduinoDebugCommands.START_DEBUG = {
        id: 'arduino-start-debug',
        label: 'Start Debugging'
    };
})(ArduinoDebugCommands = exports.ArduinoDebugCommands || (exports.ArduinoDebugCommands = {}));
let ArduinoDebugFrontendApplicationContribution = class ArduinoDebugFrontendApplicationContribution extends debug_frontend_application_contribution_1.DebugFrontendApplicationContribution {
    start(noDebug, debugSessionOptions) {
        return __awaiter(this, void 0, void 0, function* () {
            const configurations = this.configurations;
            let current = debugSessionOptions ? debugSessionOptions : configurations.current;
            // If no configurations are currently present, create them
            if (!current) {
                yield configurations.createDefaultConfiguration();
                current = configurations.current;
            }
            if (current) {
                if (noDebug !== undefined) {
                    current = Object.assign(Object.assign({}, current), { configuration: Object.assign(Object.assign({}, current.configuration), { noDebug }) });
                }
                if (current.configuration.type === 'arduino') {
                    const wsStat = this.workspaceService.workspace;
                    let sketchFileURI;
                    if (wsStat && (yield this.sketchesService.isSketchFolder(wsStat.uri))) {
                        const wsPath = new core_1.Path(wsStat.uri);
                        const sketchFilePath = wsPath.join(wsPath.name + '.ino').toString();
                        sketchFileURI = new uri_1.default(sketchFilePath);
                    }
                    else if (this.editorManager.currentEditor) {
                        const editorURI = this.editorManager.currentEditor.getResourceUri();
                        if (editorURI && editorURI.path && editorURI.path.ext === '.ino') {
                            sketchFileURI = editorURI;
                        }
                    }
                    if (sketchFileURI) {
                        yield this.editorManager.open(sketchFileURI);
                        yield this.manager.start(current);
                    }
                    else {
                        this.messageService.error('Please open a sketch file to start debugging.');
                    }
                }
                else {
                    yield this.manager.start(current);
                }
            }
        });
    }
    initializeLayout() {
        if (this.editorMode.proMode) {
            return super.initializeLayout();
        }
        return Promise.resolve();
    }
    registerMenus(menus) {
        if (this.editorMode.proMode) {
            super.registerMenus(menus);
            menus.unregisterMenuAction(debug_frontend_application_contribution_1.DebugCommands.START_NO_DEBUG);
        }
    }
    registerKeybindings(keybindings) {
        if (this.editorMode.proMode) {
            super.registerKeybindings(keybindings);
            keybindings.unregisterKeybinding({
                command: debug_frontend_application_contribution_1.DebugCommands.START_NO_DEBUG.id,
                keybinding: 'ctrl+f5'
            });
        }
    }
    registerToolbarItems(toolbar) {
        super.registerToolbarItems(toolbar);
        toolbar.registerItem({
            id: ArduinoDebugCommands.START_DEBUG.id,
            command: ArduinoDebugCommands.START_DEBUG.id,
            tooltip: 'Start Debugging',
            priority: 3
        });
    }
    registerCommands(registry) {
        super.registerCommands(registry);
        registry.registerCommand(ArduinoDebugCommands.START_DEBUG, {
            isVisible: widget => arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left',
            isEnabled: widget => arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left',
            execute: () => {
                registry.executeCommand(debug_frontend_application_contribution_1.DebugCommands.START.id);
            }
        });
    }
};
__decorate([
    inversify_1.inject(editor_mode_1.EditorMode),
    __metadata("design:type", editor_mode_1.EditorMode)
], ArduinoDebugFrontendApplicationContribution.prototype, "editorMode", void 0);
__decorate([
    inversify_1.inject(workspace_service_1.WorkspaceService),
    __metadata("design:type", workspace_service_1.WorkspaceService)
], ArduinoDebugFrontendApplicationContribution.prototype, "workspaceService", void 0);
__decorate([
    inversify_1.inject(sketches_service_1.SketchesService),
    __metadata("design:type", Object)
], ArduinoDebugFrontendApplicationContribution.prototype, "sketchesService", void 0);
__decorate([
    inversify_1.inject(common_1.FileSystem),
    __metadata("design:type", Object)
], ArduinoDebugFrontendApplicationContribution.prototype, "fileSystem", void 0);
__decorate([
    inversify_1.inject(browser_1.EditorManager),
    __metadata("design:type", browser_1.EditorManager)
], ArduinoDebugFrontendApplicationContribution.prototype, "editorManager", void 0);
__decorate([
    inversify_1.inject(core_1.MessageService),
    __metadata("design:type", core_1.MessageService)
], ArduinoDebugFrontendApplicationContribution.prototype, "messageService", void 0);
ArduinoDebugFrontendApplicationContribution = __decorate([
    inversify_1.injectable()
], ArduinoDebugFrontendApplicationContribution);
exports.ArduinoDebugFrontendApplicationContribution = ArduinoDebugFrontendApplicationContribution;
//# sourceMappingURL=arduino-debug-frontend-application-contribution.js.map