"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoDebugConfigurationManager = void 0;
const debug_configuration_manager_1 = require("@theia/debug/lib/browser/debug-configuration-manager");
const inversify_1 = require("inversify");
let ArduinoDebugConfigurationManager = class ArduinoDebugConfigurationManager extends debug_configuration_manager_1.DebugConfigurationManager {
    get defaultDebugger() {
        return this.debug.getDebuggersForLanguage('ino').then(debuggers => {
            if (debuggers.length === 0)
                return undefined;
            return debuggers[0].type;
        });
    }
    selectDebugType() {
        return __awaiter(this, void 0, void 0, function* () {
            const widget = this.editorManager.currentEditor;
            if (!widget) {
                return this.defaultDebugger;
            }
            const { languageId } = widget.editor.document;
            const debuggers = yield this.debug.getDebuggersForLanguage(languageId);
            if (debuggers.length === 0) {
                return this.defaultDebugger;
            }
            return this.quickPick.show(debuggers.map(({ label, type }) => ({ label, value: type }), { placeholder: 'Select Environment' }));
        });
    }
    createDefaultConfiguration() {
        return __awaiter(this, void 0, void 0, function* () {
            const { model } = this;
            if (model) {
                yield this.doCreate(model);
                yield this.updateModels();
            }
        });
    }
};
ArduinoDebugConfigurationManager = __decorate([
    inversify_1.injectable()
], ArduinoDebugConfigurationManager);
exports.ArduinoDebugConfigurationManager = ArduinoDebugConfigurationManager;
//# sourceMappingURL=arduino-debug-configuration-manager.js.map