"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
const inversify_1 = require("inversify");
const message_service_1 = require("@theia/core/lib/common/message-service");
const boards_service_client_impl_1 = require("arduino-ide-extension/lib/browser/boards/boards-service-client-impl");
let ArduinoVariableResolver = class ArduinoVariableResolver {
    registerVariables(variables) {
        variables.registerVariable({
            name: 'fqbn',
            description: 'Qualified name of the selected board',
            resolve: this.resolveFqbn.bind(this),
        });
        variables.registerVariable({
            name: 'port',
            description: 'Selected upload port',
            resolve: this.resolvePort.bind(this)
        });
    }
    resolveFqbn() {
        return __awaiter(this, void 0, void 0, function* () {
            const { boardsConfig } = this.boardsServiceClient;
            if (!boardsConfig || !boardsConfig.selectedBoard) {
                this.messageService.error('No board selected. Please select a board for debugging.');
                return undefined;
            }
            return boardsConfig.selectedBoard.fqbn;
        });
    }
    resolvePort() {
        return __awaiter(this, void 0, void 0, function* () {
            const { boardsConfig } = this.boardsServiceClient;
            if (!boardsConfig || !boardsConfig.selectedPort) {
                return undefined;
            }
            return boardsConfig.selectedPort.address;
        });
    }
};
__decorate([
    inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
    __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
], ArduinoVariableResolver.prototype, "boardsServiceClient", void 0);
__decorate([
    inversify_1.inject(message_service_1.MessageService),
    __metadata("design:type", message_service_1.MessageService)
], ArduinoVariableResolver.prototype, "messageService", void 0);
ArduinoVariableResolver = __decorate([
    inversify_1.injectable()
], ArduinoVariableResolver);
exports.ArduinoVariableResolver = ArduinoVariableResolver;
//# sourceMappingURL=arduino-variable-resolver.js.map