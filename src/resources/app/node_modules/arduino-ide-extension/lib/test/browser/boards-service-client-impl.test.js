"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var sinon = require("sinon");
var os = require("@theia/core/lib/common/os");
var inversify_1 = require("inversify");
var logger_1 = require("@theia/core/lib/common/logger");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var mock_logger_1 = require("@theia/core/lib/common/test/mock-logger");
var storage_service_1 = require("@theia/core/lib/browser/storage-service");
var disposable_1 = require("@theia/core/lib/common/disposable");
var protocol_1 = require("../../common/protocol");
var boards_service_client_impl_1 = require("../../browser/boards/boards-service-client-impl");
// tslint:disable: no-unused-expression   
describe('boards-service-client-impl', function () {
    describe('onAvailableBoardsChanged', function () {
        var ESP8266 = { protocol: 'serial', address: '/dev/cu.SLAB_USBtoUART' };
        var UNO = { name: 'Arduino Uno', fqbn: 'arduino:avr:uno', port: { protocol: 'serial', address: '/dev/cu.usbmodem14501' } };
        var MKR1000 = { name: 'Arduino MKR1000', fqbn: 'arduino:samd:mkr1000', port: { protocol: 'serial', address: '/dev/cu.usbmodem14601' } };
        var NANO = { name: 'Arduino Nano', fqbn: 'arduino:avr:nano' };
        var recognized = boards_service_client_impl_1.AvailableBoard.State.recognized;
        var guessed = boards_service_client_impl_1.AvailableBoard.State.guessed;
        var incomplete = boards_service_client_impl_1.AvailableBoard.State.incomplete;
        var stub;
        var server;
        var client;
        beforeEach(function () {
            stub = sinon.stub(os, 'isOSX').value(true);
            var container = init();
            server = container.get(MockBoardsService);
            client = container.get(boards_service_client_impl_1.BoardsServiceClientImpl);
            server.setClient(client);
        });
        afterEach(function () {
            stub.reset();
        });
        it('should have no available boards by default', function () {
            chai_1.expect(client.availableBoards).to.have.length(0);
        });
        it('should be notified when a board is attached', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(MKR1000)];
                    case 1:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(recognized);
                        chai_1.expect(!!availableBoards()[0].selected).to.be.false;
                        return [2 /*return*/];
                }
            });
        }); });
        it('should be notified when a unknown board is attached', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(ESP8266)];
                    case 1:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(incomplete);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should be notified when a board is detached', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(MKR1000, UNO, ESP8266)];
                    case 1:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(3);
                        return [4 /*yield*/, detach(MKR1000)];
                    case 2:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should be notified when an unknown board is detached', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(MKR1000, UNO, ESP8266)];
                    case 1:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(3);
                        return [4 /*yield*/, detach(ESP8266)];
                    case 2:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(2);
                        return [2 /*return*/];
                }
            });
        }); });
        it('should recognize boards config as an available board', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, configureBoards({ selectedBoard: NANO })];
                    case 1:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(incomplete);
                        chai_1.expect(availableBoards()[0].selected).to.be.true;
                        return [2 /*return*/];
                }
            });
        }); });
        it('should discard the boards config port when corresponding board is detached', function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(MKR1000)];
                    case 1:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(recognized);
                        chai_1.expect(availableBoards()[0].selected).to.be.false;
                        return [4 /*yield*/, configureBoards({ selectedBoard: MKR1000, selectedPort: server.portFor(MKR1000) })];
                    case 2:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(recognized);
                        chai_1.expect(availableBoards()[0].selected).to.be.true;
                        return [4 /*yield*/, detach(MKR1000)];
                    case 3:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(incomplete);
                        chai_1.expect(availableBoards()[0].selected).to.be.true;
                        return [2 /*return*/];
                }
            });
        }); });
        it("should consider selected unknown boards as 'guessed'", function () { return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(ESP8266)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, configureBoards({ selectedBoard: { name: 'guessed' }, selectedPort: ESP8266 })];
                    case 2:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(1);
                        chai_1.expect(availableBoards()[0].state).to.be.equal(guessed);
                        chai_1.expect(availableBoards()[0].name).to.be.equal('guessed');
                        chai_1.expect(availableBoards()[0].fqbn).to.be.undefined;
                        chai_1.expect(client.canVerify(client.boardsConfig)).to.be.true;
                        return [2 /*return*/];
                }
            });
        }); });
        it('should not reconnect last valid selected if port is gone', function () { return __awaiter(_this, void 0, void 0, function () {
            var selected;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, attach(ESP8266, UNO)];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, configureBoards({ selectedBoard: { name: 'NodeMCU 0.9 (ESP-12 Module)', fqbn: 'esp8266:esp8266:nodemcu' }, selectedPort: ESP8266 })];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, detach(ESP8266)];
                    case 3:
                        _a.sent();
                        chai_1.expect(availableBoards()).to.have.length(2);
                        selected = availableBoards().find(function (_a) {
                            var selected = _a.selected;
                            return selected;
                        });
                        chai_1.expect(selected).to.be.not.undefined;
                        chai_1.expect(selected.port).to.be.undefined;
                        chai_1.expect(selected.name).to.be.equal('NodeMCU 0.9 (ESP-12 Module)');
                        return [2 /*return*/];
                }
            });
        }); });
        function availableBoards() {
            return client.availableBoards.slice();
        }
        function configureBoards(config) {
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, awaitAll(function () { client.boardsConfig = config; }, client.onAvailableBoardsChanged)];
                });
            });
        }
        function detach() {
            var toDetach = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                toDetach[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, awaitAll(function () { return server.detach.apply(server, __spread(toDetach)); }, client.onAttachedBoardsChanged, client.onAvailableBoardsChanged)];
                });
            });
        }
        function attach() {
            var toAttach = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                toAttach[_i] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    return [2 /*return*/, awaitAll(function () { return server.attach.apply(server, __spread(toAttach)); }, client.onAttachedBoardsChanged, client.onAvailableBoardsChanged)];
                });
            });
        }
        function awaitAll(exec) {
            var waitFor = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                waitFor[_i - 1] = arguments[_i];
            }
            return __awaiter(this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    return [2 /*return*/, new Promise(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                            var toDispose, promises;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        toDispose = new disposable_1.DisposableCollection();
                                        promises = waitFor.map(function (event) {
                                            var deferred = new promise_util_1.Deferred();
                                            toDispose.push(event(function () { return deferred.resolve(); }));
                                            return deferred.promise;
                                        });
                                        return [4 /*yield*/, exec()];
                                    case 1:
                                        _a.sent();
                                        return [4 /*yield*/, Promise.all(promises)];
                                    case 2:
                                        _a.sent();
                                        toDispose.dispose();
                                        resolve();
                                        return [2 /*return*/];
                                }
                            });
                        }); })];
                });
            });
        }
    });
});
function init() {
    var container = new inversify_1.Container({ defaultScope: 'Singleton' });
    container.bind(MockBoardsService).toSelf();
    container.bind(mock_logger_1.MockLogger).toSelf();
    container.bind(logger_1.ILogger).toService(mock_logger_1.MockLogger);
    container.bind(MockStorageService).toSelf();
    container.bind(storage_service_1.StorageService).toService(MockStorageService);
    container.bind(boards_service_client_impl_1.BoardsServiceClientImpl).toSelf();
    return container;
}
var MockBoardsService = /** @class */ (function () {
    function MockBoardsService() {
        this.boards = [];
        this.ports = [];
    }
    MockBoardsService.prototype.attach = function () {
        var e_1, _a;
        var toAttach = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            toAttach[_i] = arguments[_i];
        }
        var oldState = { boards: this.boards.slice(), ports: this.ports.slice() };
        try {
            for (var toAttach_1 = __values(toAttach), toAttach_1_1 = toAttach_1.next(); !toAttach_1_1.done; toAttach_1_1 = toAttach_1.next()) {
                var what = toAttach_1_1.value;
                if (protocol_1.Board.is(what)) {
                    if (what.port) {
                        this.ports.push(what.port);
                    }
                    this.boards.push(what);
                }
                else {
                    this.ports.push(what);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (toAttach_1_1 && !toAttach_1_1.done && (_a = toAttach_1.return)) _a.call(toAttach_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        var newState = { boards: this.boards, ports: this.ports };
        if (this.client) {
            this.client.notifyAttachedBoardsChanged({ oldState: oldState, newState: newState });
        }
    };
    MockBoardsService.prototype.detach = function () {
        var e_2, _a;
        var toRemove = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            toRemove[_i] = arguments[_i];
        }
        var oldState = { boards: this.boards.slice(), ports: this.ports.slice() };
        var _loop_1 = function (what) {
            if (protocol_1.Board.is(what)) {
                var index = this_1.boards.indexOf(what);
                if (index === -1) {
                    throw new Error(what + " board is not attached. Boards were: " + JSON.stringify(oldState.boards));
                }
                this_1.boards.splice(index, 1);
                if (what.port) {
                    var portIndex = this_1.ports.findIndex(function (port) { return protocol_1.Port.sameAs(what.port, port); });
                    if (portIndex === -1) {
                        throw new Error(what + " port is not available. Ports were: " + JSON.stringify(oldState.ports));
                    }
                    this_1.ports.splice(portIndex, 1);
                }
            }
            else {
                var index = this_1.ports.indexOf(what);
                if (index === -1) {
                    throw new Error(what + " port is not available. Ports were: " + JSON.stringify(oldState.ports));
                }
                this_1.ports.splice(index, 1);
            }
        };
        var this_1 = this;
        try {
            for (var toRemove_1 = __values(toRemove), toRemove_1_1 = toRemove_1.next(); !toRemove_1_1.done; toRemove_1_1 = toRemove_1.next()) {
                var what = toRemove_1_1.value;
                _loop_1(what);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (toRemove_1_1 && !toRemove_1_1.done && (_a = toRemove_1.return)) _a.call(toRemove_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        var newState = { boards: this.boards, ports: this.ports };
        if (this.client) {
            this.client.notifyAttachedBoardsChanged({ oldState: oldState, newState: newState });
        }
    };
    MockBoardsService.prototype.reset = function () {
        this.setState({ boards: [], ports: [], silent: true });
    };
    MockBoardsService.prototype.setState = function (_a) {
        var boards = _a.boards, ports = _a.ports, silent = _a.silent;
        var oldState = { boards: this.boards, ports: this.ports };
        var newState = { boards: boards, ports: ports };
        if (this.client && !silent) {
            this.client.notifyAttachedBoardsChanged({ oldState: oldState, newState: newState });
        }
    };
    MockBoardsService.prototype.portFor = function (board) {
        if (!board.port) {
            throw new Error(JSON.stringify(board) + " does not have a port.");
        }
        var port = this.ports.find(function (port) { return protocol_1.Port.sameAs(port, board.port); });
        if (!port) {
            throw new Error("Could not find port for board: " + JSON.stringify(board) + ". Ports were: " + JSON.stringify(this.ports) + ".");
        }
        return port;
    };
    // BoardsService API
    MockBoardsService.prototype.getAttachedBoards = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.boards];
            });
        });
    };
    MockBoardsService.prototype.getAvailablePorts = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw this.ports;
            });
        });
    };
    MockBoardsService.prototype.getBoardDetails = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                throw new Error('Method not implemented.');
            });
        });
    };
    MockBoardsService.prototype.getBoardPackage = function () {
        throw new Error('Method not implemented.');
    };
    MockBoardsService.prototype.getContainerBoardPackage = function () {
        throw new Error('Method not implemented.');
    };
    MockBoardsService.prototype.searchBoards = function () {
        throw new Error('Method not implemented.');
    };
    MockBoardsService.prototype.install = function () {
        throw new Error('Method not implemented.');
    };
    MockBoardsService.prototype.uninstall = function () {
        throw new Error('Method not implemented.');
    };
    MockBoardsService.prototype.search = function () {
        throw new Error('Method not implemented.');
    };
    MockBoardsService.prototype.dispose = function () {
        this.reset();
        this.client = undefined;
    };
    MockBoardsService.prototype.setClient = function (client) {
        this.client = client;
    };
    MockBoardsService = __decorate([
        inversify_1.injectable()
    ], MockBoardsService);
    return MockBoardsService;
}());
exports.MockBoardsService = MockBoardsService;
var MockStorageService = /** @class */ (function () {
    function MockStorageService() {
        this.store = new Map();
    }
    MockStorageService.prototype.reset = function () {
        this.store.clear();
    };
    MockStorageService.prototype.setData = function (key, data) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.store.set(key, data);
                return [2 /*return*/];
            });
        });
    };
    MockStorageService.prototype.getData = function (key, defaultValue) {
        return __awaiter(this, void 0, void 0, function () {
            var data;
            return __generator(this, function (_a) {
                data = this.store.get(key);
                return [2 /*return*/, data ? data : defaultValue];
            });
        });
    };
    MockStorageService = __decorate([
        inversify_1.injectable()
    ], MockStorageService);
    return MockStorageService;
}());
//# sourceMappingURL=boards-service-client-impl.test.js.map