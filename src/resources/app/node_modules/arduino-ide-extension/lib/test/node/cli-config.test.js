"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var chai_1 = require("chai");
var cli_config_1 = require("../../node/cli-config");
describe('cli-config', function () {
    [
        [defaultConfig, defaultConfig, true],
        [function () {
                var conf = defaultConfig();
                delete conf.board_manager;
                return conf;
            }, defaultConfig, true],
        [function () {
                var conf = defaultConfig();
                conf.daemon.port = String(conf.daemon.port);
                return conf;
            }, defaultConfig, true],
    ].forEach(function (_a) {
        var _b = __read(_a, 3), leftInput = _b[0], rightInput = _b[1], expectation = _b[2];
        var left = typeof leftInput === 'function' ? leftInput() : leftInput;
        var right = typeof rightInput === 'function' ? rightInput() : rightInput;
        it(JSON.stringify(left) + " should " + (expectation ? '' : 'not ') + "be the same as " + JSON.stringify(right), function () {
            chai_1.expect(cli_config_1.DefaultCliConfig.sameAs(left, right)).to.be.equal(expectation);
        });
    });
    function defaultConfig() {
        return {
            board_manager: {
                additional_urls: []
            },
            daemon: {
                port: 5000
            },
            directories: {
                data: 'data',
                downloads: 'downloads',
                user: 'user'
            }
        };
    }
});
//# sourceMappingURL=cli-config.test.js.map