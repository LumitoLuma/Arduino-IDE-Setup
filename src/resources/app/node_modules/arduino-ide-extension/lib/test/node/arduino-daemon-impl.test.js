"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var _this = this;
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var net = require("net");
var path = require("path");
var temp = require("temp");
var assert_1 = require("assert");
var chai_1 = require("chai");
var js_yaml_1 = require("js-yaml");
var arduino_daemon_impl_1 = require("../../node/arduino-daemon-impl");
var exec_util_1 = require("../../node/exec-util");
var cli_config_1 = require("../../node/cli-config");
var track = temp.track();
var SilentArduinoDaemonImpl = /** @class */ (function (_super) {
    __extends(SilentArduinoDaemonImpl, _super);
    function SilentArduinoDaemonImpl(port, logFormat) {
        var _this = _super.call(this) || this;
        _this.port = port;
        _this.logFormat = logFormat;
        return _this;
    }
    SilentArduinoDaemonImpl.prototype.onData = function (data) {
        // NOOP
    };
    SilentArduinoDaemonImpl.prototype.spawnDaemonProcess = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, _super.prototype.spawnDaemonProcess.call(this)];
            });
        });
    };
    SilentArduinoDaemonImpl.prototype.getSpawnArgs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliConfigPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.initCliConfig()];
                    case 1:
                        cliConfigPath = _a.sent();
                        return [2 /*return*/, ['daemon', '--config-file', cliConfigPath, '-v', '--log-format', this.logFormat]];
                }
            });
        });
    };
    SilentArduinoDaemonImpl.prototype.initCliConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliPath, destDir, content, cliConfig, modifiedContent;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getExecPath()];
                    case 1:
                        cliPath = _a.sent();
                        destDir = track.mkdirSync();
                        return [4 /*yield*/, exec_util_1.spawnCommand("\"" + cliPath + "\"", ['config', 'init', '--dest-dir', destDir])];
                    case 2:
                        _a.sent();
                        content = fs.readFileSync(path.join(destDir, cli_config_1.CLI_CONFIG), { encoding: 'utf8' });
                        cliConfig = js_yaml_1.safeLoad(content);
                        cliConfig.daemon.port = String(this.port);
                        modifiedContent = js_yaml_1.safeDump(cliConfig);
                        fs.writeFileSync(path.join(destDir, cli_config_1.CLI_CONFIG), modifiedContent, { encoding: 'utf8' });
                        return [2 /*return*/, path.join(destDir, cli_config_1.CLI_CONFIG)];
                }
            });
        });
    };
    return SilentArduinoDaemonImpl;
}(arduino_daemon_impl_1.ArduinoDaemonImpl));
describe('arduino-daemon-impl', function () {
    after(function () {
        track.cleanupSync();
    });
    it('should parse an error - address already in use error [json]', function () { return __awaiter(_this, void 0, void 0, function () {
        var server, address, e_1;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    server = undefined;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, 5, 6]);
                    return [4 /*yield*/, new Promise(function (resolve) {
                            var server = net.createServer();
                            server.listen(function () { return resolve(server); });
                        })];
                case 2:
                    server = _a.sent();
                    address = server.address();
                    return [4 /*yield*/, new SilentArduinoDaemonImpl(address.port, 'json').spawnDaemonProcess()];
                case 3:
                    _a.sent();
                    assert_1.fail('Expected a failure.');
                    return [3 /*break*/, 6];
                case 4:
                    e_1 = _a.sent();
                    chai_1.expect(e_1).to.be.instanceOf(arduino_daemon_impl_1.DaemonError);
                    chai_1.expect(e_1.code).to.be.equal(arduino_daemon_impl_1.DaemonError.ADDRESS_IN_USE);
                    return [3 /*break*/, 6];
                case 5:
                    if (server) {
                        server.close();
                    }
                    return [7 /*endfinally*/];
                case 6: return [2 /*return*/];
            }
        });
    }); });
    it('should parse an error - address already in use error [text]', function () { return __awaiter(_this, void 0, void 0, function () {
        var server, address, e_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    server = undefined;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, 5, 6]);
                    return [4 /*yield*/, new Promise(function (resolve) {
                            var server = net.createServer();
                            server.listen(function () { return resolve(server); });
                        })];
                case 2:
                    server = _a.sent();
                    address = server.address();
                    return [4 /*yield*/, new SilentArduinoDaemonImpl(address.port, 'text').spawnDaemonProcess()];
                case 3:
                    _a.sent();
                    assert_1.fail('Expected a failure.');
                    return [3 /*break*/, 6];
                case 4:
                    e_2 = _a.sent();
                    chai_1.expect(e_2).to.be.instanceOf(arduino_daemon_impl_1.DaemonError);
                    chai_1.expect(e_2.code).to.be.equal(arduino_daemon_impl_1.DaemonError.ADDRESS_IN_USE);
                    return [3 /*break*/, 6];
                case 5:
                    if (server) {
                        server.close();
                    }
                    return [7 /*endfinally*/];
                case 6: return [2 /*return*/];
            }
        });
    }); });
    it('should parse an error - unknown address [json]', function () { return __awaiter(_this, void 0, void 0, function () {
        var e_3;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, new SilentArduinoDaemonImpl('foo', 'json').spawnDaemonProcess()];
                case 1:
                    _a.sent();
                    assert_1.fail('Expected a failure.');
                    return [3 /*break*/, 3];
                case 2:
                    e_3 = _a.sent();
                    chai_1.expect(e_3).to.be.instanceOf(arduino_daemon_impl_1.DaemonError);
                    chai_1.expect(e_3.code).to.be.equal(arduino_daemon_impl_1.DaemonError.UNKNOWN_ADDRESS);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    it('should parse an error - unknown address [text]', function () { return __awaiter(_this, void 0, void 0, function () {
        var e_4;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, new SilentArduinoDaemonImpl('foo', 'text').spawnDaemonProcess()];
                case 1:
                    _a.sent();
                    assert_1.fail('Expected a failure.');
                    return [3 /*break*/, 3];
                case 2:
                    e_4 = _a.sent();
                    chai_1.expect(e_4).to.be.instanceOf(arduino_daemon_impl_1.DaemonError);
                    chai_1.expect(e_4.code).to.be.equal(arduino_daemon_impl_1.DaemonError.UNKNOWN_ADDRESS);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    it('should parse an error - invalid port [json]', function () { return __awaiter(_this, void 0, void 0, function () {
        var e_5;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, new SilentArduinoDaemonImpl(-1, 'json').spawnDaemonProcess()];
                case 1:
                    _a.sent();
                    assert_1.fail('Expected a failure.');
                    return [3 /*break*/, 3];
                case 2:
                    e_5 = _a.sent();
                    chai_1.expect(e_5).to.be.instanceOf(arduino_daemon_impl_1.DaemonError);
                    chai_1.expect(e_5.code).to.be.equal(arduino_daemon_impl_1.DaemonError.INVALID_PORT);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
    it('should parse an error - invalid port [text]', function () { return __awaiter(_this, void 0, void 0, function () {
        var e_6;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    _a.trys.push([0, 2, , 3]);
                    return [4 /*yield*/, new SilentArduinoDaemonImpl(-1, 'text').spawnDaemonProcess()];
                case 1:
                    _a.sent();
                    assert_1.fail('Expected a failure.');
                    return [3 /*break*/, 3];
                case 2:
                    e_6 = _a.sent();
                    chai_1.expect(e_6).to.be.instanceOf(arduino_daemon_impl_1.DaemonError);
                    chai_1.expect(e_6.code).to.be.equal(arduino_daemon_impl_1.DaemonError.INVALID_PORT);
                    return [3 /*break*/, 3];
                case 3: return [2 /*return*/];
            }
        });
    }); });
});
//# sourceMappingURL=arduino-daemon-impl.test.js.map