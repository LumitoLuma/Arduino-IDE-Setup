"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ListWidget = void 0;
var React = require("react");
var inversify_1 = require("inversify");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var event_1 = require("@theia/core/lib/common/event");
var react_widget_1 = require("@theia/core/lib/browser/widgets/react-widget");
var filterable_list_container_1 = require("./filterable-list-container");
var core_service_client_impl_1 = require("../../core-service-client-impl");
var arduino_daemon_client_impl_1 = require("../../arduino-daemon-client-impl");
var ListWidget = /** @class */ (function (_super) {
    __extends(ListWidget, _super);
    function ListWidget(options) {
        var _this = _super.call(this) || this;
        _this.options = options;
        _this.deferredContainer = new promise_util_1.Deferred();
        _this.filterTextChangeEmitter = new event_1.Emitter();
        _this.onFocusResolved = function (element) {
            _this.focusNode = element;
        };
        var id = options.id, label = options.label, iconClass = options.iconClass;
        _this.id = id;
        _this.title.label = label;
        _this.title.caption = label;
        _this.title.iconClass = iconClass;
        _this.title.closable = true;
        _this.addClass('arduino-list-widget');
        _this.node.tabIndex = 0; // To be able to set the focus on the widget.
        _this.scrollOptions = {
            suppressScrollX: true
        };
        _this.toDispose.push(_this.filterTextChangeEmitter);
        return _this;
    }
    ListWidget.prototype.init = function () {
        var _this = this;
        this.update();
        this.toDispose.pushAll([
            this.coreServiceClient.onIndexUpdated(function () { return _this.refresh(undefined); }),
            this.daemonClient.onDaemonStarted(function () { return _this.refresh(undefined); }),
            this.daemonClient.onDaemonStopped(function () { return _this.refresh(undefined); })
        ]);
    };
    ListWidget.prototype.getScrollContainer = function () {
        return this.deferredContainer.promise;
    };
    ListWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        (this.focusNode || this.node).focus();
    };
    ListWidget.prototype.onUpdateRequest = function (msg) {
        _super.prototype.onUpdateRequest.call(this, msg);
        this.render();
    };
    ListWidget.prototype.render = function () {
        return React.createElement(filterable_list_container_1.FilterableListContainer, { container: this, resolveContainer: this.deferredContainer.resolve, resolveFocus: this.onFocusResolved, searchable: this.options.searchable, installable: this.options.installable, itemLabel: this.options.itemLabel, itemRenderer: this.options.itemRenderer, filterTextChangeEvent: this.filterTextChangeEmitter.event });
    };
    /**
     * If `filterText` is defined, sets the filter text to the argument.
     * If it is `undefined`, updates the view state by re-running the search with the current `filterText` term.
     */
    ListWidget.prototype.refresh = function (filterText) {
        var _this = this;
        this.deferredContainer.promise.then(function () { return _this.filterTextChangeEmitter.fire(filterText); });
    };
    ListWidget.prototype.updateScrollBar = function () {
        if (this.scrollBar) {
            this.scrollBar.update();
        }
    };
    __decorate([
        inversify_1.inject(core_service_client_impl_1.CoreServiceClientImpl),
        __metadata("design:type", core_service_client_impl_1.CoreServiceClientImpl)
    ], ListWidget.prototype, "coreServiceClient", void 0);
    __decorate([
        inversify_1.inject(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl),
        __metadata("design:type", arduino_daemon_client_impl_1.ArduinoDaemonClientImpl)
    ], ListWidget.prototype, "daemonClient", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ListWidget.prototype, "init", null);
    ListWidget = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [Object])
    ], ListWidget);
    return ListWidget;
}(react_widget_1.ReactWidget));
exports.ListWidget = ListWidget;
//# sourceMappingURL=list-widget.js.map