"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoLanguageClientContribution = void 0;
var inversify_1 = require("inversify");
var browser_1 = require("@theia/languages/lib/browser");
var boards_service_client_impl_1 = require("../boards/boards-service-client-impl");
var ArduinoLanguageClientContribution = /** @class */ (function (_super) {
    __extends(ArduinoLanguageClientContribution, _super);
    function ArduinoLanguageClientContribution() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.id = 'ino';
        _this.name = 'Arduino';
        return _this;
    }
    Object.defineProperty(ArduinoLanguageClientContribution.prototype, "documentSelector", {
        get: function () {
            return ['ino'];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ArduinoLanguageClientContribution.prototype, "globPatterns", {
        get: function () {
            return ['**/*.ino'];
        },
        enumerable: false,
        configurable: true
    });
    ArduinoLanguageClientContribution.prototype.init = function () {
        this.boardsServiceClient.onBoardsConfigChanged(this.selectBoard.bind(this));
    };
    ArduinoLanguageClientContribution.prototype.selectBoard = function (config) {
        this.boardConfig = config;
        // Force a restart to send the new board config to the language server
        this.restart();
    };
    ArduinoLanguageClientContribution.prototype.getStartParameters = function () {
        return this.boardConfig;
    };
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], ArduinoLanguageClientContribution.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ArduinoLanguageClientContribution.prototype, "init", null);
    ArduinoLanguageClientContribution = __decorate([
        inversify_1.injectable()
    ], ArduinoLanguageClientContribution);
    return ArduinoLanguageClientContribution;
}(browser_1.BaseLanguageClientContribution));
exports.ArduinoLanguageClientContribution = ArduinoLanguageClientContribution;
//# sourceMappingURL=arduino-language-client-contribution.js.map