"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var core_1 = require("@theia/core");
var problem_manager_1 = require("@theia/markers/lib/browser/problem/problem-manager");
var config_service_1 = require("../../common/protocol/config-service");
var ArduinoProblemManager = /** @class */ (function (_super) {
    __extends(ArduinoProblemManager, _super);
    function ArduinoProblemManager() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArduinoProblemManager.prototype.init = function () {
        var _this = this;
        _super.prototype.init.call(this);
        this.configService.getConfiguration()
            .then(function (_a) {
            var dataDirUri = _a.dataDirUri;
            return _this.dataDirUri = new uri_1.default(dataDirUri);
        })
            .catch(function (err) { return _this.logger.error("Failed to determine the data directory: " + err); });
    };
    ArduinoProblemManager.prototype.setMarkers = function (uri, owner, data) {
        if (this.dataDirUri && this.dataDirUri.isEqualOrParent(uri)) {
            return [];
        }
        return _super.prototype.setMarkers.call(this, uri, owner, data);
    };
    __decorate([
        inversify_1.inject(config_service_1.ConfigService),
        __metadata("design:type", Object)
    ], ArduinoProblemManager.prototype, "configService", void 0);
    __decorate([
        inversify_1.inject(core_1.ILogger),
        __metadata("design:type", Object)
    ], ArduinoProblemManager.prototype, "logger", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ArduinoProblemManager.prototype, "init", null);
    ArduinoProblemManager = __decorate([
        inversify_1.injectable()
    ], ArduinoProblemManager);
    return ArduinoProblemManager;
}(problem_manager_1.ProblemManager));
exports.ArduinoProblemManager = ArduinoProblemManager;
//# sourceMappingURL=arduino-problem-manager.js.map