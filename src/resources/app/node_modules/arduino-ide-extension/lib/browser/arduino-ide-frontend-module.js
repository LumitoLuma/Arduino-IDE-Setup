"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
require("../../src/browser/style/index.css");
var inversify_1 = require("inversify");
var widget_manager_1 = require("@theia/core/lib/browser/widget-manager");
var command_1 = require("@theia/core/lib/common/command");
var view_contribution_1 = require("@theia/core/lib/browser/shell/view-contribution");
var tab_bar_toolbar_1 = require("@theia/core/lib/browser/shell/tab-bar-toolbar");
var ws_connection_provider_1 = require("@theia/core/lib/browser/messaging/ws-connection-provider");
var frontend_application_1 = require("@theia/core/lib/browser/frontend-application");
var textmate_1 = require("@theia/monaco/lib/browser/textmate");
var browser_1 = require("@theia/languages/lib/browser");
var arduino_language_client_contribution_1 = require("./language/arduino-language-client-contribution");
var library_list_widget_1 = require("./library/library-list-widget");
var arduino_frontend_contribution_1 = require("./arduino-frontend-contribution");
var arduino_language_grammar_contribution_1 = require("./language/arduino-language-grammar-contribution");
var library_service_1 = require("../common/protocol/library-service");
var boards_service_1 = require("../common/protocol/boards-service");
var sketches_service_1 = require("../common/protocol/sketches-service");
var sketches_service_client_impl_1 = require("../common/protocol/sketches-service-client-impl");
var core_service_1 = require("../common/protocol/core-service");
var boards_list_widget_1 = require("./boards/boards-list-widget");
var boards_widget_frontend_contribution_1 = require("./boards/boards-widget-frontend-contribution");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var tool_output_service_2 = require("../common/protocol/tool-output-service");
var client_service_impl_1 = require("./tool-output/client-service-impl");
var boards_service_client_impl_1 = require("./boards/boards-service-client-impl");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var workspace_service_2 = require("./theia/workspace/workspace-service");
var outline_view_contribution_1 = require("@theia/outline-view/lib/browser/outline-view-contribution");
var outline_contribution_1 = require("./theia/outline/outline-contribution");
var problem_contribution_1 = require("@theia/markers/lib/browser/problem/problem-contribution");
var problem_contribution_2 = require("./theia/markers/problem-contribution");
var navigator_contribution_1 = require("./theia/navigator/navigator-contribution");
var navigator_contribution_2 = require("@theia/navigator/lib/browser/navigator-contribution");
var arduino_toolbar_contribution_1 = require("./toolbar/arduino-toolbar-contribution");
var editor_contribution_1 = require("@theia/editor/lib/browser/editor-contribution");
var editor_contribution_2 = require("./theia/editor/editor-contribution");
var monaco_status_bar_contribution_1 = require("@theia/monaco/lib/browser/monaco-status-bar-contribution");
var monaco_status_bar_contribution_2 = require("./theia/monaco/monaco-status-bar-contribution");
var browser_2 = require("@theia/core/lib/browser");
var menu_1 = require("@theia/core/lib/common/menu");
var application_shell_1 = require("./theia/core/application-shell");
var frontend_application_2 = require("./theia/core/frontend-application");
var boards_config_dialog_1 = require("./boards/boards-config-dialog");
var boards_config_dialog_widget_1 = require("./boards/boards-config-dialog-widget");
var scm_contribution_1 = require("@theia/scm/lib/browser/scm-contribution");
var scm_contribution_2 = require("./theia/scm/scm-contribution");
var search_in_workspace_frontend_contribution_1 = require("@theia/search-in-workspace/lib/browser/search-in-workspace-frontend-contribution");
var search_in_workspace_frontend_contribution_2 = require("./theia/search-in-workspace/search-in-workspace-frontend-contribution");
var library_widget_frontend_contribution_1 = require("./library/library-widget-frontend-contribution");
var monitor_service_client_impl_1 = require("./monitor/monitor-service-client-impl");
var monitor_service_1 = require("../common/protocol/monitor-service");
var config_service_1 = require("../common/protocol/config-service");
var monitor_widget_1 = require("./monitor/monitor-widget");
var monitor_view_contribution_1 = require("./monitor/monitor-view-contribution");
var monitor_connection_1 = require("./monitor/monitor-connection");
var monitor_model_1 = require("./monitor/monitor-model");
var tab_bar_decorator_1 = require("@theia/core/lib/browser/shell/tab-bar-decorator");
var tab_bar_decorator_2 = require("./theia/core/tab-bar-decorator");
var browser_3 = require("@theia/markers/lib/browser");
var problem_manager_1 = require("./theia/markers/problem-manager");
var boards_auto_installer_1 = require("./boards/boards-auto-installer");
var about_dialog_1 = require("@theia/core/lib/browser/about-dialog");
var about_dialog_2 = require("./theia/core/about-dialog");
var shell_layout_restorer_1 = require("./theia/core/shell-layout-restorer");
var editor_mode_1 = require("./editor-mode");
var list_item_renderer_1 = require("./widgets/component-list/list-item-renderer");
var color_application_contribution_1 = require("@theia/core/lib/browser/color-application-contribution");
var monaco_theming_service_1 = require("@theia/monaco/lib/browser/monaco-theming-service");
var arduino_daemon_client_impl_1 = require("./arduino-daemon-client-impl");
var arduino_daemon_1 = require("../common/protocol/arduino-daemon");
var browser_4 = require("@theia/editor/lib/browser");
var editor_manager_1 = require("./theia/editor/editor-manager");
var connection_status_service_1 = require("./theia/core/connection-status-service");
var connection_status_service_2 = require("@theia/core/lib/browser/connection-status-service");
var config_service_client_impl_1 = require("./config-service-client-impl");
var core_service_client_impl_1 = require("./core-service-client-impl");
var boards_data_menu_updater_1 = require("./boards/boards-data-menu-updater");
var boards_data_store_1 = require("./boards/boards-data-store");
var core_1 = require("@theia/core");
var filesystem_ext_1 = require("../common/protocol/filesystem-ext");
var browser_5 = require("@theia/workspace/lib/browser");
var workspace_frontend_contribution_1 = require("./theia/workspace/workspace-frontend-contribution");
var contribution_1 = require("./contributions/contribution");
var new_sketch_1 = require("./contributions/new-sketch");
var open_sketch_1 = require("./contributions/open-sketch");
var close_sketch_1 = require("./contributions/close-sketch");
var save_as_sketch_1 = require("./contributions/save-as-sketch");
var save_sketch_1 = require("./contributions/save-sketch");
var verify_sketch_1 = require("./contributions/verify-sketch");
var upload_sketch_1 = require("./contributions/upload-sketch");
var common_frontend_contribution_1 = require("./theia/core/common-frontend-contribution");
var edit_contributions_1 = require("./contributions/edit-contributions");
var open_sketch_external_1 = require("./contributions/open-sketch-external");
var preferences_contribution_1 = require("@theia/preferences/lib/browser/preferences-contribution");
var preferences_contribution_2 = require("./theia/preferences/preferences-contribution");
var quit_app_1 = require("./contributions/quit-app");
var sketch_control_1 = require("./contributions/sketch-control");
var settings_1 = require("./contributions/settings");
var keybindings_1 = require("./theia/core/keybindings");
var workspace_commands_1 = require("./theia/workspace/workspace-commands");
var workspace_delete_handler_1 = require("@theia/workspace/lib/browser/workspace-delete-handler");
var workspace_delete_handler_2 = require("./theia/workspace/workspace-delete-handler");
var tab_bar_toolbar_2 = require("./theia/core/tab-bar-toolbar");
var editor_widget_factory_1 = require("@theia/editor/lib/browser/editor-widget-factory");
var editor_widget_factory_2 = require("./theia/editor/editor-widget-factory");
var output_widget_1 = require("@theia/output/lib/browser/output-widget");
var output_widget_2 = require("./theia/output/output-widget");
var ElementQueries = require('css-element-queries/src/ElementQueries');
monaco_theming_service_1.MonacoThemingService.register({
    id: 'arduinoTheme',
    label: 'Light (Arduino)',
    uiTheme: 'vs',
    json: require('../../src/browser/data/arduino.color-theme.json')
});
exports.default = new inversify_1.ContainerModule(function (bind, unbind, isBound, rebind) {
    ElementQueries.listen();
    ElementQueries.init();
    // Commands and toolbar items
    bind(arduino_frontend_contribution_1.ArduinoFrontendContribution).toSelf().inSingletonScope();
    bind(command_1.CommandContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(menu_1.MenuContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(frontend_application_1.FrontendApplicationContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(color_application_contribution_1.ColorContribution).toService(arduino_frontend_contribution_1.ArduinoFrontendContribution);
    bind(arduino_toolbar_contribution_1.ArduinoToolbarContribution).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(arduino_toolbar_contribution_1.ArduinoToolbarContribution);
    // `ino` TextMate grammar and language client
    bind(textmate_1.LanguageGrammarDefinitionContribution).to(arduino_language_grammar_contribution_1.ArduinoLanguageGrammarContribution).inSingletonScope();
    bind(browser_1.LanguageClientContribution).to(arduino_language_client_contribution_1.ArduinoLanguageClientContribution).inSingletonScope();
    // Renderer for both the library and the core widgets.
    bind(list_item_renderer_1.ListItemRenderer).toSelf().inSingletonScope();
    // Library service
    bind(library_service_1.LibraryService).toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, library_service_1.LibraryServicePath); }).inSingletonScope();
    // Library list widget
    bind(library_list_widget_1.LibraryListWidget).toSelf();
    view_contribution_1.bindViewContribution(bind, library_widget_frontend_contribution_1.LibraryListWidgetFrontendContribution);
    bind(widget_manager_1.WidgetFactory).toDynamicValue(function (context) { return ({
        id: library_list_widget_1.LibraryListWidget.WIDGET_ID,
        createWidget: function () { return context.container.get(library_list_widget_1.LibraryListWidget); }
    }); });
    bind(frontend_application_1.FrontendApplicationContribution).toService(library_widget_frontend_contribution_1.LibraryListWidgetFrontendContribution);
    // Sketch list service
    bind(sketches_service_1.SketchesService).toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, sketches_service_1.SketchesServicePath); }).inSingletonScope();
    bind(sketches_service_client_impl_1.SketchesServiceClientImpl).toSelf().inSingletonScope();
    // Config service
    bind(config_service_1.ConfigService).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(config_service_client_impl_1.ConfigServiceClientImpl);
        return connection.createProxy(config_service_1.ConfigServicePath, client);
    }).inSingletonScope();
    bind(config_service_client_impl_1.ConfigServiceClientImpl).toSelf().inSingletonScope();
    bind(config_service_1.ConfigServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(config_service_client_impl_1.ConfigServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, config_service_1.ConfigServicePath, client);
        return client;
    }).inSingletonScope();
    // Boards service
    bind(boards_service_1.BoardsService).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(boards_service_client_impl_1.BoardsServiceClientImpl);
        return connection.createProxy(boards_service_1.BoardsServicePath, client);
    }).inSingletonScope();
    // Boards service client to receive and delegate notifications from the backend.
    bind(boards_service_client_impl_1.BoardsServiceClientImpl).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_service_client_impl_1.BoardsServiceClientImpl);
    bind(boards_service_1.BoardsServiceClient).toDynamicValue(function (context) { return __awaiter(void 0, void 0, void 0, function () {
        var client, service;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    client = context.container.get(boards_service_client_impl_1.BoardsServiceClientImpl);
                    service = context.container.get(boards_service_1.BoardsService);
                    return [4 /*yield*/, client.init(service)];
                case 1:
                    _a.sent();
                    ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, boards_service_1.BoardsServicePath, client);
                    return [2 /*return*/, client];
            }
        });
    }); }).inSingletonScope();
    // To be able to track, and update the menu based on the core settings (aka. board details) of the currently selected board.
    bind(frontend_application_1.FrontendApplicationContribution).to(boards_data_menu_updater_1.BoardsDataMenuUpdater).inSingletonScope();
    bind(boards_data_store_1.BoardsDataStore).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_data_store_1.BoardsDataStore);
    // Logger for the Arduino daemon
    bind(core_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(core_1.ILogger);
        return parentLogger.child('store');
    }).inSingletonScope().whenTargetNamed('store');
    // Boards auto-installer
    bind(boards_auto_installer_1.BoardsAutoInstaller).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_auto_installer_1.BoardsAutoInstaller);
    // Boards list widget
    bind(boards_list_widget_1.BoardsListWidget).toSelf();
    view_contribution_1.bindViewContribution(bind, boards_widget_frontend_contribution_1.BoardsListWidgetFrontendContribution);
    bind(widget_manager_1.WidgetFactory).toDynamicValue(function (context) { return ({
        id: boards_list_widget_1.BoardsListWidget.WIDGET_ID,
        createWidget: function () { return context.container.get(boards_list_widget_1.BoardsListWidget); }
    }); });
    bind(frontend_application_1.FrontendApplicationContribution).toService(boards_widget_frontend_contribution_1.BoardsListWidgetFrontendContribution);
    // Board select dialog
    bind(boards_config_dialog_widget_1.BoardsConfigDialogWidget).toSelf().inSingletonScope();
    bind(boards_config_dialog_1.BoardsConfigDialog).toSelf().inSingletonScope();
    bind(boards_config_dialog_1.BoardsConfigDialogProps).toConstantValue({
        title: 'Select Board'
    });
    // Core service
    bind(core_service_1.CoreService).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(core_service_client_impl_1.CoreServiceClientImpl);
        return connection.createProxy(core_service_1.CoreServicePath, client);
    }).inSingletonScope();
    // Core service client to receive and delegate notifications when the index or the library index has been updated.
    bind(core_service_client_impl_1.CoreServiceClientImpl).toSelf().inSingletonScope();
    bind(core_service_1.CoreServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(core_service_client_impl_1.CoreServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, core_service_1.CoreServicePath, client);
        return client;
    }).inSingletonScope();
    // Tool output service client
    bind(client_service_impl_1.ToolOutputServiceClientImpl).toSelf().inSingletonScope();
    bind(tool_output_service_1.ToolOutputServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(client_service_impl_1.ToolOutputServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, tool_output_service_2.ToolOutputService.SERVICE_PATH, client);
        return client;
    }).inSingletonScope();
    // Serial monitor
    bind(monitor_model_1.MonitorModel).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(monitor_model_1.MonitorModel);
    bind(monitor_widget_1.MonitorWidget).toSelf();
    view_contribution_1.bindViewContribution(bind, monitor_view_contribution_1.MonitorViewContribution);
    bind(tab_bar_toolbar_1.TabBarToolbarContribution).toService(monitor_view_contribution_1.MonitorViewContribution);
    bind(widget_manager_1.WidgetFactory).toDynamicValue(function (context) { return ({
        id: monitor_widget_1.MonitorWidget.ID,
        createWidget: function () { return context.container.get(monitor_widget_1.MonitorWidget); }
    }); });
    // Frontend binding for the serial monitor service
    bind(monitor_service_1.MonitorService).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(monitor_service_client_impl_1.MonitorServiceClientImpl);
        return connection.createProxy(monitor_service_1.MonitorServicePath, client);
    }).inSingletonScope();
    bind(monitor_connection_1.MonitorConnection).toSelf().inSingletonScope();
    // Serial monitor service client to receive and delegate notifications from the backend.
    bind(monitor_service_client_impl_1.MonitorServiceClientImpl).toSelf().inSingletonScope();
    bind(monitor_service_1.MonitorServiceClient).toDynamicValue(function (context) {
        var client = context.container.get(monitor_service_client_impl_1.MonitorServiceClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, monitor_service_1.MonitorServicePath, client);
        return client;
    }).inSingletonScope();
    bind(workspace_service_2.WorkspaceService).toSelf().inSingletonScope();
    rebind(workspace_service_1.WorkspaceService).toService(workspace_service_2.WorkspaceService);
    // Customizing default Theia layout based on the editor mode: `pro-mode` or `classic`.
    bind(editor_mode_1.EditorMode).toSelf().inSingletonScope();
    bind(frontend_application_1.FrontendApplicationContribution).toService(editor_mode_1.EditorMode);
    // Layout and shell customizations.
    rebind(outline_view_contribution_1.OutlineViewContribution).to(outline_contribution_1.OutlineViewContribution).inSingletonScope();
    rebind(problem_contribution_1.ProblemContribution).to(problem_contribution_2.ProblemContribution).inSingletonScope();
    rebind(navigator_contribution_2.FileNavigatorContribution).to(navigator_contribution_1.FileNavigatorContribution).inSingletonScope();
    rebind(editor_contribution_1.EditorContribution).to(editor_contribution_2.EditorContribution).inSingletonScope();
    rebind(monaco_status_bar_contribution_1.MonacoStatusBarContribution).to(monaco_status_bar_contribution_2.MonacoStatusBarContribution).inSingletonScope();
    rebind(browser_2.ApplicationShell).to(application_shell_1.ApplicationShell).inSingletonScope();
    rebind(scm_contribution_1.ScmContribution).to(scm_contribution_2.ScmContribution).inSingletonScope();
    rebind(search_in_workspace_frontend_contribution_1.SearchInWorkspaceFrontendContribution).to(search_in_workspace_frontend_contribution_2.SearchInWorkspaceFrontendContribution).inSingletonScope();
    rebind(frontend_application_1.FrontendApplication).to(frontend_application_2.FrontendApplication).inSingletonScope();
    rebind(browser_5.WorkspaceFrontendContribution).to(workspace_frontend_contribution_1.WorkspaceFrontendContribution).inSingletonScope();
    rebind(browser_5.FileMenuContribution).to(workspace_frontend_contribution_1.ArduinoFileMenuContribution).inSingletonScope();
    rebind(browser_2.CommonFrontendContribution).to(common_frontend_contribution_1.CommonFrontendContribution).inSingletonScope();
    rebind(preferences_contribution_1.PreferencesContribution).to(preferences_contribution_2.PreferencesContribution).inSingletonScope();
    rebind(browser_2.KeybindingRegistry).to(keybindings_1.KeybindingRegistry).inSingletonScope();
    rebind(browser_5.WorkspaceCommandContribution).to(workspace_commands_1.WorkspaceCommandContribution).inSingletonScope();
    rebind(workspace_delete_handler_1.WorkspaceDeleteHandler).to(workspace_delete_handler_2.WorkspaceDeleteHandler).inSingletonScope();
    rebind(editor_widget_factory_1.EditorWidgetFactory).to(editor_widget_factory_2.EditorWidgetFactory).inSingletonScope();
    rebind(tab_bar_toolbar_1.TabBarToolbarFactory).toFactory(function (_a) {
        var parentContainer = _a.container;
        return function () {
            var container = parentContainer.createChild();
            container.bind(tab_bar_toolbar_2.TabBarToolbar).toSelf().inSingletonScope();
            return container.get(tab_bar_toolbar_2.TabBarToolbar);
        };
    });
    bind(output_widget_2.OutputWidget).toSelf().inSingletonScope();
    rebind(output_widget_1.OutputWidget).toService(output_widget_2.OutputWidget);
    // Show a disconnected status bar, when the daemon is not available
    bind(connection_status_service_1.ApplicationConnectionStatusContribution).toSelf().inSingletonScope();
    rebind(connection_status_service_2.ApplicationConnectionStatusContribution).toService(connection_status_service_1.ApplicationConnectionStatusContribution);
    bind(connection_status_service_1.FrontendConnectionStatusService).toSelf().inSingletonScope();
    rebind(connection_status_service_2.FrontendConnectionStatusService).toService(connection_status_service_1.FrontendConnectionStatusService);
    // Editor customizations. Sets the editor to `readOnly` if under the data dir.
    bind(editor_manager_1.EditorManager).toSelf().inSingletonScope();
    rebind(browser_4.EditorManager).toService(editor_manager_1.EditorManager);
    // Decorator customizations
    bind(tab_bar_decorator_2.TabBarDecoratorService).toSelf().inSingletonScope();
    rebind(tab_bar_decorator_1.TabBarDecoratorService).toService(tab_bar_decorator_2.TabBarDecoratorService);
    // Problem markers
    bind(problem_manager_1.ProblemManager).toSelf().inSingletonScope();
    rebind(browser_3.ProblemManager).toService(problem_manager_1.ProblemManager);
    // About dialog to show the CLI version
    bind(about_dialog_2.AboutDialog).toSelf().inSingletonScope();
    rebind(about_dialog_1.AboutDialog).toService(about_dialog_2.AboutDialog);
    // Customized layout restorer that can restore the state in async way: https://github.com/eclipse-theia/theia/issues/6579
    bind(shell_layout_restorer_1.ShellLayoutRestorer).toSelf().inSingletonScope();
    rebind(browser_2.ShellLayoutRestorer).toService(shell_layout_restorer_1.ShellLayoutRestorer);
    // Arduino daemon client. Receives notifications from the backend if the CLI daemon process has been restarted.
    bind(arduino_daemon_1.ArduinoDaemon).toDynamicValue(function (context) {
        var connection = context.container.get(ws_connection_provider_1.WebSocketConnectionProvider);
        var client = context.container.get(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl);
        return connection.createProxy(arduino_daemon_1.ArduinoDaemonPath, client);
    }).inSingletonScope();
    bind(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl).toSelf().inSingletonScope();
    bind(arduino_daemon_1.ArduinoDaemonClient).toDynamicValue(function (context) {
        var client = context.container.get(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl);
        ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, arduino_daemon_1.ArduinoDaemonPath, client);
        return client;
    }).inSingletonScope();
    // File-system extension
    bind(filesystem_ext_1.FileSystemExt).toDynamicValue(function (context) { return ws_connection_provider_1.WebSocketConnectionProvider.createProxy(context.container, filesystem_ext_1.FileSystemExtPath); }).inSingletonScope();
    contribution_1.Contribution.configure(bind, new_sketch_1.NewSketch);
    contribution_1.Contribution.configure(bind, open_sketch_1.OpenSketch);
    contribution_1.Contribution.configure(bind, close_sketch_1.CloseSketch);
    contribution_1.Contribution.configure(bind, save_sketch_1.SaveSketch);
    contribution_1.Contribution.configure(bind, save_as_sketch_1.SaveAsSketch);
    contribution_1.Contribution.configure(bind, verify_sketch_1.VerifySketch);
    contribution_1.Contribution.configure(bind, upload_sketch_1.UploadSketch);
    contribution_1.Contribution.configure(bind, open_sketch_external_1.OpenSketchExternal);
    contribution_1.Contribution.configure(bind, edit_contributions_1.EditContributions);
    contribution_1.Contribution.configure(bind, quit_app_1.QuitApp);
    contribution_1.Contribution.configure(bind, sketch_control_1.SketchControl);
    contribution_1.Contribution.configure(bind, settings_1.Settings);
});
//# sourceMappingURL=arduino-ide-frontend-module.js.map