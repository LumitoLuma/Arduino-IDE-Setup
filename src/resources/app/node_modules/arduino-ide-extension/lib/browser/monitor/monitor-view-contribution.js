"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorViewContribution = exports.SerialMonitor = void 0;
var React = require("react");
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var monitor_widget_1 = require("./monitor-widget");
var arduino_toolbar_1 = require("../toolbar/arduino-toolbar");
var monitor_model_1 = require("./monitor-model");
var arduino_menus_1 = require("../menu/arduino-menus");
var SerialMonitor;
(function (SerialMonitor) {
    var Commands;
    (function (Commands) {
        Commands.AUTOSCROLL = {
            id: 'serial-monitor-autoscroll',
            label: 'Autoscroll'
        };
        Commands.TIMESTAMP = {
            id: 'serial-monitor-timestamp',
            label: 'Timestamp'
        };
        Commands.CLEAR_OUTPUT = {
            id: 'serial-monitor-clear-output',
            label: 'Clear Output',
            iconClass: 'clear-all'
        };
    })(Commands = SerialMonitor.Commands || (SerialMonitor.Commands = {}));
})(SerialMonitor = exports.SerialMonitor || (exports.SerialMonitor = {}));
var MonitorViewContribution = /** @class */ (function (_super) {
    __extends(MonitorViewContribution, _super);
    function MonitorViewContribution() {
        var _this = _super.call(this, {
            widgetId: monitor_widget_1.MonitorWidget.ID,
            widgetName: 'Serial Monitor',
            defaultWidgetOptions: {
                area: 'bottom'
            },
            toggleCommandId: MonitorViewContribution_1.TOGGLE_SERIAL_MONITOR,
            toggleKeybinding: 'CtrlCmd+Shift+M'
        }) || this;
        _this.toggleAutoScroll = function () { return _this.doToggleAutoScroll(); };
        _this.toggleTimestamp = function () { return _this.doToggleTimestamp(); };
        return _this;
    }
    MonitorViewContribution_1 = MonitorViewContribution;
    MonitorViewContribution.prototype.registerMenus = function (menus) {
        if (this.toggleCommand) {
            menus.registerMenuAction(arduino_menus_1.ArduinoMenus.TOOLS__MAIN_GROUP, {
                commandId: this.toggleCommand.id,
                label: 'Serial Monitor',
                order: '5'
            });
        }
    };
    MonitorViewContribution.prototype.registerToolbarItems = function (registry) {
        var _this = this;
        registry.registerItem({
            id: 'monitor-autoscroll',
            render: function () { return _this.renderAutoScrollButton(); },
            isVisible: function (widget) { return widget instanceof monitor_widget_1.MonitorWidget; },
            onDidChange: this.model.onChange // XXX: it's a hack. See: https://github.com/eclipse-theia/theia/pull/6696/
        });
        registry.registerItem({
            id: 'monitor-timestamp',
            render: function () { return _this.renderTimestampButton(); },
            isVisible: function (widget) { return widget instanceof monitor_widget_1.MonitorWidget; },
            onDidChange: this.model.onChange // XXX: it's a hack. See: https://github.com/eclipse-theia/theia/pull/6696/
        });
        registry.registerItem({
            id: SerialMonitor.Commands.CLEAR_OUTPUT.id,
            command: SerialMonitor.Commands.CLEAR_OUTPUT.id,
            tooltip: 'Clear Output'
        });
    };
    MonitorViewContribution.prototype.registerCommands = function (commands) {
        var _this = this;
        commands.registerCommand(SerialMonitor.Commands.CLEAR_OUTPUT, {
            isEnabled: function (widget) { return widget instanceof monitor_widget_1.MonitorWidget; },
            isVisible: function (widget) { return widget instanceof monitor_widget_1.MonitorWidget; },
            execute: function (widget) {
                if (widget instanceof monitor_widget_1.MonitorWidget) {
                    widget.clearConsole();
                }
            }
        });
        if (this.toggleCommand) {
            commands.registerCommand(this.toggleCommand, { execute: function () { return _this.toggle(); } });
            commands.registerCommand({ id: MonitorViewContribution_1.TOGGLE_SERIAL_MONITOR_TOOLBAR }, {
                isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'right'; },
                execute: function () { return _this.toggle(); }
            });
        }
    };
    MonitorViewContribution.prototype.toggle = function () {
        return __awaiter(this, void 0, void 0, function () {
            var widget;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        widget = this.tryGetWidget();
                        if (!widget) return [3 /*break*/, 1];
                        widget.dispose();
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.openView({ activate: true, reveal: true })];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    MonitorViewContribution.prototype.renderAutoScrollButton = function () {
        return React.createElement(React.Fragment, { key: 'autoscroll-toolbar-item' },
            React.createElement("div", { title: 'Toggle Autoscroll', className: "item enabled fa fa-angle-double-down arduino-monitor " + (this.model.autoscroll ? 'toggled' : ''), onClick: this.toggleAutoScroll }));
    };
    MonitorViewContribution.prototype.doToggleAutoScroll = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.model.toggleAutoscroll();
                return [2 /*return*/];
            });
        });
    };
    MonitorViewContribution.prototype.renderTimestampButton = function () {
        return React.createElement(React.Fragment, { key: 'line-ending-toolbar-item' },
            React.createElement("div", { title: 'Toggle Timestamp', className: "item enabled fa fa-clock-o arduino-monitor " + (this.model.timestamp ? 'toggled' : ''), onClick: this.toggleTimestamp }));
    };
    MonitorViewContribution.prototype.doToggleTimestamp = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.model.toggleTimestamp();
                return [2 /*return*/];
            });
        });
    };
    var MonitorViewContribution_1;
    MonitorViewContribution.TOGGLE_SERIAL_MONITOR = monitor_widget_1.MonitorWidget.ID + ':toggle';
    MonitorViewContribution.TOGGLE_SERIAL_MONITOR_TOOLBAR = monitor_widget_1.MonitorWidget.ID + ':toggle-toolbar';
    __decorate([
        inversify_1.inject(monitor_model_1.MonitorModel),
        __metadata("design:type", monitor_model_1.MonitorModel)
    ], MonitorViewContribution.prototype, "model", void 0);
    MonitorViewContribution = MonitorViewContribution_1 = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], MonitorViewContribution);
    return MonitorViewContribution;
}(browser_1.AbstractViewContribution));
exports.MonitorViewContribution = MonitorViewContribution;
//# sourceMappingURL=monitor-view-contribution.js.map