"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MonitorConnection = void 0;
var inversify_1 = require("inversify");
var objects_1 = require("@theia/core/lib/common/objects");
var event_1 = require("@theia/core/lib/common/event");
var message_service_1 = require("@theia/core/lib/common/message-service");
var frontend_application_state_1 = require("@theia/core/lib/browser/frontend-application-state");
var monitor_service_1 = require("../../common/protocol/monitor-service");
var boards_service_client_impl_1 = require("../boards/boards-service-client-impl");
var boards_service_1 = require("../../common/protocol/boards-service");
var monitor_service_client_impl_1 = require("./monitor-service-client-impl");
var boards_config_1 = require("../boards/boards-config");
var monitor_model_1 = require("./monitor-model");
var MonitorConnection = /** @class */ (function () {
    function MonitorConnection() {
        /**
         * Note: The idea is to toggle this property from the UI (`Monitor` view)
         * and the boards config and the boards attachment/detachment logic can be at on place, here.
         */
        this._autoConnect = false;
        this.onConnectionChangedEmitter = new event_1.Emitter();
        /**
         * This emitter forwards all read events **iff** the connection is established.
         */
        this.onReadEmitter = new event_1.Emitter();
        /**
         * Array for storing previous monitor errors received from the server, and based on the number of elements in this array,
         * we adjust the reconnection delay.
         * Super naive way: we wait `array.length * 1000` ms. Once we hit 10 errors, we do not try to reconnect and clean the array.
         */
        this.monitorErrors = [];
    }
    MonitorConnection_1 = MonitorConnection;
    MonitorConnection.prototype.init = function () {
        var _this = this;
        // Forward the messages from the board **iff** connected.
        this.monitorServiceClient.onRead(function (event) {
            if (_this.connected) {
                _this.onReadEmitter.fire(event);
            }
        });
        this.monitorServiceClient.onError(function (error) { return __awaiter(_this, void 0, void 0, function () {
            var shouldReconnect, code, config, board, port, options, oldState_1, attempts, timeout;
            var _this = this;
            return __generator(this, function (_a) {
                shouldReconnect = false;
                if (this.state) {
                    code = error.code, config = error.config;
                    board = config.board, port = config.port;
                    options = { timeout: 3000 };
                    switch (code) {
                        case monitor_service_1.MonitorError.ErrorCodes.CLIENT_CANCEL: {
                            console.debug("Connection was canceled by client: " + MonitorConnection_1.State.toString(this.state) + ".");
                            break;
                        }
                        case monitor_service_1.MonitorError.ErrorCodes.DEVICE_BUSY: {
                            this.messageService.warn("Connection failed. Serial port is busy: " + boards_service_1.Port.toString(port) + ".", options);
                            shouldReconnect = this.autoConnect;
                            this.monitorErrors.push(error);
                            break;
                        }
                        case monitor_service_1.MonitorError.ErrorCodes.DEVICE_NOT_CONFIGURED: {
                            this.messageService.info("Disconnected " + boards_service_1.Board.toString(board, { useFqbn: false }) + " from " + boards_service_1.Port.toString(port) + ".", options);
                            break;
                        }
                        case undefined: {
                            this.messageService.error("Unexpected error. Reconnecting " + boards_service_1.Board.toString(board) + " on port " + boards_service_1.Port.toString(port) + ".", options);
                            console.error(JSON.stringify(error));
                            shouldReconnect = this.connected && this.autoConnect;
                            break;
                        }
                    }
                    oldState_1 = this.state;
                    this.state = undefined;
                    this.onConnectionChangedEmitter.fire(this.state);
                    if (shouldReconnect) {
                        if (this.monitorErrors.length >= 10) {
                            this.messageService.warn("Failed to reconnect " + boards_service_1.Board.toString(board, { useFqbn: false }) + " to the the serial-monitor after 10 consecutive attempts. The " + boards_service_1.Port.toString(port) + " serial port is busy. after 10 consecutive attempts.");
                            this.monitorErrors.length = 0;
                        }
                        else {
                            attempts = (this.monitorErrors.length || 1);
                            if (this.reconnectTimeout !== undefined) {
                                // Clear the previous timer.
                                window.clearTimeout(this.reconnectTimeout);
                            }
                            timeout = attempts * 1000;
                            this.messageService.warn("Reconnecting " + boards_service_1.Board.toString(board, { useFqbn: false }) + " to " + boards_service_1.Port.toString(port) + " in " + attempts + " seconds...", { timeout: timeout });
                            this.reconnectTimeout = window.setTimeout(function () { return _this.connect(oldState_1.config); }, timeout);
                        }
                    }
                }
                return [2 /*return*/];
            });
        }); });
        this.boardsServiceClient.onBoardsConfigChanged(this.handleBoardConfigChange.bind(this));
        this.boardsServiceClient.onAttachedBoardsChanged(function (event) {
            if (_this.autoConnect && _this.connected) {
                var boardsConfig_1 = _this.boardsServiceClient.boardsConfig;
                if (_this.boardsServiceClient.canUploadTo(boardsConfig_1, { silent: false })) {
                    var attached = boards_service_1.AttachedBoardsChangeEvent.diff(event).attached;
                    if (attached.boards.some(function (board) { return !!board.port && boards_config_1.BoardsConfig.Config.sameAs(boardsConfig_1, board); })) {
                        var board_1 = boardsConfig_1.selectedBoard, port_1 = boardsConfig_1.selectedPort;
                        var baudRate_1 = _this.monitorModel.baudRate;
                        _this.disconnect()
                            .then(function () { return _this.connect({ board: board_1, port: port_1, baudRate: baudRate_1 }); });
                    }
                }
            }
        });
        // Handles the `baudRate` changes by reconnecting if required.
        this.monitorModel.onChange(function (_a) {
            var property = _a.property;
            if (property === 'baudRate' && _this.autoConnect && _this.connected) {
                var boardsConfig = _this.boardsServiceClient.boardsConfig;
                _this.handleBoardConfigChange(boardsConfig);
            }
        });
    };
    Object.defineProperty(MonitorConnection.prototype, "connected", {
        get: function () {
            return !!this.state;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonitorConnection.prototype, "monitorConfig", {
        get: function () {
            return this.state ? this.state.config : undefined;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonitorConnection.prototype, "autoConnect", {
        get: function () {
            return this._autoConnect;
        },
        set: function (value) {
            var _this = this;
            var oldValue = this._autoConnect;
            this._autoConnect = value;
            // When we enable the auto-connect, we have to connect
            if (!oldValue && value) {
                // We have to make sure the previous boards config has been restored.
                // Otherwise, we might start the auto-connection without configured boards.
                this.applicationState.reachedState('started_contributions').then(function () {
                    var boardsConfig = _this.boardsServiceClient.boardsConfig;
                    _this.handleBoardConfigChange(boardsConfig);
                });
            }
            else if (oldValue && !value) {
                if (this.reconnectTimeout !== undefined) {
                    window.clearTimeout(this.reconnectTimeout);
                    this.monitorErrors.length = 0;
                }
            }
        },
        enumerable: false,
        configurable: true
    });
    MonitorConnection.prototype.connect = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var disconnectStatus, connectStatus;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.connected) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.disconnect()];
                    case 1:
                        disconnectStatus = _a.sent();
                        if (!monitor_service_1.Status.isOK(disconnectStatus)) {
                            return [2 /*return*/, disconnectStatus];
                        }
                        _a.label = 2;
                    case 2:
                        console.info(">>> Creating serial monitor connection for " + boards_service_1.Board.toString(config.board) + " on port " + boards_service_1.Port.toString(config.port) + "...");
                        return [4 /*yield*/, this.monitorService.connect(config)];
                    case 3:
                        connectStatus = _a.sent();
                        if (monitor_service_1.Status.isOK(connectStatus)) {
                            this.state = { config: config };
                            console.info("<<< Serial monitor connection created for " + boards_service_1.Board.toString(config.board, { useFqbn: false }) + " on port " + boards_service_1.Port.toString(config.port) + ".");
                        }
                        this.onConnectionChangedEmitter.fire(this.state);
                        return [2 /*return*/, monitor_service_1.Status.isOK(connectStatus)];
                }
            });
        });
    };
    MonitorConnection.prototype.disconnect = function () {
        return __awaiter(this, void 0, void 0, function () {
            var stateCopy, status;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.connected) {
                            return [2 /*return*/, monitor_service_1.Status.OK];
                        }
                        stateCopy = objects_1.deepClone(this.state);
                        if (!stateCopy) {
                            return [2 /*return*/, monitor_service_1.Status.OK];
                        }
                        console.log('>>> Disposing existing monitor connection...');
                        return [4 /*yield*/, this.monitorService.disconnect()];
                    case 1:
                        status = _a.sent();
                        if (monitor_service_1.Status.isOK(status)) {
                            console.log("<<< Disposed connection. Was: " + MonitorConnection_1.State.toString(stateCopy));
                        }
                        else {
                            console.warn("<<< Could not dispose connection. Activate connection: " + MonitorConnection_1.State.toString(stateCopy));
                        }
                        this.state = undefined;
                        this.onConnectionChangedEmitter.fire(this.state);
                        return [2 /*return*/, status];
                }
            });
        });
    };
    /**
     * Sends the data to the connected serial monitor.
     * The desired EOL is appended to `data`, you do not have to add it.
     * It is a NOOP if connected.
     */
    MonitorConnection.prototype.send = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.connected) {
                    return [2 /*return*/, monitor_service_1.Status.NOT_CONNECTED];
                }
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.monitorService.send(data + _this.monitorModel.lineEnding)
                            .then(function () { return resolve(monitor_service_1.Status.OK); });
                    })];
            });
        });
    };
    Object.defineProperty(MonitorConnection.prototype, "onConnectionChanged", {
        get: function () {
            return this.onConnectionChangedEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(MonitorConnection.prototype, "onRead", {
        get: function () {
            return this.onReadEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    MonitorConnection.prototype.handleBoardConfigChange = function (boardsConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                if (this.autoConnect) {
                    if (this.boardsServiceClient.canUploadTo(boardsConfig, { silent: false })) {
                        // Instead of calling `getAttachedBoards` and filtering for `AttachedSerialBoard` we have to check the available ports.
                        // The connected board might be unknown. See: https://github.com/arduino/arduino-pro-ide/issues/127#issuecomment-563251881
                        this.boardsService.getAvailablePorts().then(function (ports) {
                            if (ports.some(function (port) { return boards_service_1.Port.equals(port, boardsConfig.selectedPort); })) {
                                new Promise(function (resolve) {
                                    // First, disconnect if connected.
                                    if (_this.connected) {
                                        _this.disconnect().then(function () { return resolve(); });
                                        return;
                                    }
                                    resolve();
                                }).then(function () {
                                    // Then (re-)connect.
                                    var board = boardsConfig.selectedBoard, port = boardsConfig.selectedPort;
                                    var baudRate = _this.monitorModel.baudRate;
                                    _this.connect({ board: board, port: port, baudRate: baudRate });
                                });
                            }
                        });
                    }
                }
                return [2 /*return*/];
            });
        });
    };
    var MonitorConnection_1;
    __decorate([
        inversify_1.inject(monitor_model_1.MonitorModel),
        __metadata("design:type", monitor_model_1.MonitorModel)
    ], MonitorConnection.prototype, "monitorModel", void 0);
    __decorate([
        inversify_1.inject(monitor_service_1.MonitorService),
        __metadata("design:type", Object)
    ], MonitorConnection.prototype, "monitorService", void 0);
    __decorate([
        inversify_1.inject(monitor_service_client_impl_1.MonitorServiceClientImpl),
        __metadata("design:type", monitor_service_client_impl_1.MonitorServiceClientImpl)
    ], MonitorConnection.prototype, "monitorServiceClient", void 0);
    __decorate([
        inversify_1.inject(boards_service_1.BoardsService),
        __metadata("design:type", Object)
    ], MonitorConnection.prototype, "boardsService", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], MonitorConnection.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], MonitorConnection.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(frontend_application_state_1.FrontendApplicationStateService),
        __metadata("design:type", frontend_application_state_1.FrontendApplicationStateService)
    ], MonitorConnection.prototype, "applicationState", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], MonitorConnection.prototype, "init", null);
    MonitorConnection = MonitorConnection_1 = __decorate([
        inversify_1.injectable()
    ], MonitorConnection);
    return MonitorConnection;
}());
exports.MonitorConnection = MonitorConnection;
(function (MonitorConnection) {
    var State;
    (function (State) {
        function toString(state) {
            var config = state.config;
            var board = config.board, port = config.port;
            return boards_service_1.Board.toString(board) + " " + boards_service_1.Port.toString(port);
        }
        State.toString = toString;
    })(State = MonitorConnection.State || (MonitorConnection.State = {}));
})(MonitorConnection = exports.MonitorConnection || (exports.MonitorConnection = {}));
exports.MonitorConnection = MonitorConnection;
//# sourceMappingURL=monitor-connection.js.map