"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var core_1 = require("@theia/core");
var boards_service_1 = require("../../common/protocol/boards-service");
var Item = /** @class */ (function (_super) {
    __extends(Item, _super);
    function Item() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.onClick = function () {
            _this.props.onClick(_this.props.item);
        };
        return _this;
    }
    Item.prototype.render = function () {
        var _a = this.props, selected = _a.selected, label = _a.label, missing = _a.missing, details = _a.details;
        var classNames = ['item'];
        if (selected) {
            classNames.push('selected');
        }
        if (missing === true) {
            classNames.push('missing');
        }
        return React.createElement("div", { onClick: this.onClick, className: classNames.join(' '), title: "" + label + (!details ? '' : details) },
            React.createElement("div", { className: 'label' }, label),
            !details ? '' : React.createElement("div", { className: 'details' }, details),
            !selected ? '' : React.createElement("div", { className: 'selected-icon' },
                React.createElement("i", { className: 'fa fa-check' })));
    };
    return Item;
}(React.Component));
exports.Item = Item;
var BoardsConfig = /** @class */ (function (_super) {
    __extends(BoardsConfig, _super);
    function BoardsConfig(props) {
        var _this = _super.call(this, props) || this;
        _this.toDispose = new core_1.DisposableCollection();
        _this.updateBoards = function (eventOrQuery) {
            if (eventOrQuery === void 0) { eventOrQuery = ''; }
            var query = (typeof eventOrQuery === 'string'
                ? eventOrQuery
                : eventOrQuery.target.value.toLowerCase()).trim();
            _this.setState({ query: query });
            _this.queryBoards({ query: query }).then(function (searchResults) { return _this.setState({ searchResults: searchResults }); });
        };
        _this.updatePorts = function (ports, removedPorts) {
            if (ports === void 0) { ports = []; }
            if (removedPorts === void 0) { removedPorts = []; }
            _this.queryPorts(Promise.resolve(ports)).then(function (_a) {
                var knownPorts = _a.knownPorts;
                var selectedPort = _this.state.selectedPort;
                // If the currently selected port is not available anymore, unset the selected port.
                if (removedPorts.some(function (port) { return boards_service_1.Port.equals(port, selectedPort); })) {
                    selectedPort = undefined;
                }
                _this.setState({ knownPorts: knownPorts, selectedPort: selectedPort }, function () { return _this.fireConfigChanged(); });
            });
        };
        _this.queryBoards = function (options) {
            if (options === void 0) { options = {}; }
            return _this.props.boardsService.searchBoards(options);
        };
        _this.queryPorts = function (availablePorts) {
            if (availablePorts === void 0) { availablePorts = _this.availablePorts; }
            return __awaiter(_this, void 0, void 0, function () {
                var ports;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, availablePorts];
                        case 1:
                            ports = _a.sent();
                            return [2 /*return*/, { knownPorts: ports.sort(boards_service_1.Port.compare) }];
                    }
                });
            });
        };
        _this.toggleFilterPorts = function () {
            _this.setState({ showAllPorts: !_this.state.showAllPorts });
        };
        _this.selectPort = function (selectedPort) {
            _this.setState({ selectedPort: selectedPort }, function () { return _this.fireConfigChanged(); });
        };
        _this.selectBoard = function (selectedBoard) {
            _this.setState({ selectedBoard: selectedBoard }, function () { return _this.fireConfigChanged(); });
        };
        _this.focusNodeSet = function (element) {
            _this.props.onFocusNodeSet(element || undefined);
        };
        var boardsConfig = props.boardsServiceClient.boardsConfig;
        _this.state = __assign({ searchResults: [], knownPorts: [], showAllPorts: false, query: '' }, boardsConfig);
        return _this;
    }
    BoardsConfig.prototype.componentDidMount = function () {
        var _this = this;
        this.updateBoards();
        this.props.boardsService.getAvailablePorts().then(function (ports) { return _this.updatePorts(ports); });
        var _a = this.props, boardsServiceClient = _a.boardsServiceClient, coreServiceClient = _a.coreServiceClient, daemonClient = _a.daemonClient;
        this.toDispose.pushAll([
            boardsServiceClient.onAttachedBoardsChanged(function (event) { return _this.updatePorts(event.newState.ports, boards_service_1.AttachedBoardsChangeEvent.diff(event).detached.ports); }),
            boardsServiceClient.onBoardsConfigChanged(function (_a) {
                var selectedBoard = _a.selectedBoard, selectedPort = _a.selectedPort;
                _this.setState({ selectedBoard: selectedBoard, selectedPort: selectedPort }, function () { return _this.fireConfigChanged(); });
            }),
            boardsServiceClient.onBoardsPackageInstalled(function () { return _this.updateBoards(_this.state.query); }),
            boardsServiceClient.onBoardsPackageUninstalled(function () { return _this.updateBoards(_this.state.query); }),
            coreServiceClient.onIndexUpdated(function () { return _this.updateBoards(_this.state.query); }),
            daemonClient.onDaemonStarted(function () { return _this.updateBoards(_this.state.query); }),
            daemonClient.onDaemonStopped(function () { return _this.setState({ searchResults: [] }); })
        ]);
    };
    BoardsConfig.prototype.componentWillUnmount = function () {
        this.toDispose.dispose();
    };
    BoardsConfig.prototype.fireConfigChanged = function () {
        var _a = this.state, selectedBoard = _a.selectedBoard, selectedPort = _a.selectedPort;
        this.props.onConfigChange({ selectedBoard: selectedBoard, selectedPort: selectedPort });
    };
    Object.defineProperty(BoardsConfig.prototype, "availablePorts", {
        get: function () {
            return this.props.boardsService.getAvailablePorts();
        },
        enumerable: true,
        configurable: true
    });
    BoardsConfig.prototype.render = function () {
        return React.createElement("div", { className: 'body' },
            this.renderContainer('boards', this.renderBoards.bind(this)),
            this.renderContainer('ports', this.renderPorts.bind(this), this.renderPortsFooter.bind(this)));
    };
    BoardsConfig.prototype.renderContainer = function (title, contentRenderer, footerRenderer) {
        return React.createElement("div", { className: 'container' },
            React.createElement("div", { className: 'content' },
                React.createElement("div", { className: 'title' }, title),
                contentRenderer(),
                React.createElement("div", { className: 'footer' }, (footerRenderer ? footerRenderer() : ''))));
    };
    BoardsConfig.prototype.renderBoards = function () {
        var _this = this;
        var _a = this.state, selectedBoard = _a.selectedBoard, searchResults = _a.searchResults;
        return React.createElement(React.Fragment, null,
            React.createElement("div", { className: 'search' },
                React.createElement("input", { type: 'search', className: 'theia-input', placeholder: 'SEARCH BOARD', onChange: this.updateBoards, ref: this.focusNodeSet }),
                React.createElement("i", { className: 'fa fa-search' })),
            React.createElement("div", { className: 'boards list' }, boards_service_1.Board.decorateBoards(selectedBoard, searchResults).map(function (board) { return React.createElement(Item, { key: board.name + "-" + board.packageName, item: board, label: board.name, details: board.details, selected: board.selected, onClick: _this.selectBoard, missing: board.missing }); })));
    };
    BoardsConfig.prototype.renderPorts = function () {
        var _this = this;
        var filter = this.state.showAllPorts ? function () { return true; } : boards_service_1.Port.isBoardPort;
        var ports = this.state.knownPorts.filter(filter);
        return !ports.length ?
            (React.createElement("div", { className: 'loading noselect' }, "No ports discovered")) :
            (React.createElement("div", { className: 'ports list' }, ports.map(function (port) { return React.createElement(Item, { key: boards_service_1.Port.toString(port), item: port, label: boards_service_1.Port.toString(port), selected: boards_service_1.Port.equals(_this.state.selectedPort, port), onClick: _this.selectPort }); })));
    };
    BoardsConfig.prototype.renderPortsFooter = function () {
        return React.createElement("div", { className: 'noselect' },
            React.createElement("label", { title: 'Shows all available ports when enabled' },
                React.createElement("input", { type: 'checkbox', defaultChecked: this.state.showAllPorts, onChange: this.toggleFilterPorts }),
                React.createElement("span", null, "Show all ports")));
    };
    return BoardsConfig;
}(React.Component));
exports.BoardsConfig = BoardsConfig;
(function (BoardsConfig) {
    var Config;
    (function (Config) {
        function sameAs(config, other) {
            var selectedBoard = config.selectedBoard, selectedPort = config.selectedPort;
            if (boards_service_1.Board.is(other)) {
                return !!selectedBoard
                    && boards_service_1.Board.equals(other, selectedBoard)
                    && boards_service_1.Port.sameAs(selectedPort, other.port);
            }
            return sameAs(config, other);
        }
        Config.sameAs = sameAs;
        function equals(left, right) {
            return left.selectedBoard === right.selectedBoard
                && left.selectedPort === right.selectedPort;
        }
        Config.equals = equals;
        function toString(config, options) {
            if (options === void 0) { options = { default: '' }; }
            var selectedBoard = config.selectedBoard, port = config.selectedPort;
            if (!selectedBoard) {
                return options.default;
            }
            var name = selectedBoard.name;
            return "" + name + (port ? ' at ' + boards_service_1.Port.toString(port) : '');
        }
        Config.toString = toString;
    })(Config = BoardsConfig.Config || (BoardsConfig.Config = {}));
})(BoardsConfig = exports.BoardsConfig || (exports.BoardsConfig = {}));
exports.BoardsConfig = BoardsConfig;
//# sourceMappingURL=boards-config.js.map