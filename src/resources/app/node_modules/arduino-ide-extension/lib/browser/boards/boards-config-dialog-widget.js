"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var React = require("react");
var inversify_1 = require("inversify");
var event_1 = require("@theia/core/lib/common/event");
var browser_1 = require("@theia/core/lib/browser");
var boards_service_1 = require("../../common/protocol/boards-service");
var boards_config_1 = require("./boards-config");
var boards_service_client_impl_1 = require("./boards-service-client-impl");
var core_service_client_impl_1 = require("../core-service-client-impl");
var arduino_daemon_client_impl_1 = require("../arduino-daemon-client-impl");
var BoardsConfigDialogWidget = /** @class */ (function (_super) {
    __extends(BoardsConfigDialogWidget, _super);
    function BoardsConfigDialogWidget() {
        var _this = _super.call(this) || this;
        _this.onBoardConfigChangedEmitter = new event_1.Emitter();
        _this.onBoardConfigChanged = _this.onBoardConfigChangedEmitter.event;
        _this.fireConfigChanged = function (config) {
            _this.onBoardConfigChangedEmitter.fire(config);
        };
        _this.setFocusNode = function (element) {
            _this.focusNode = element;
        };
        _this.id = 'select-board-dialog';
        return _this;
    }
    BoardsConfigDialogWidget.prototype.render = function () {
        return React.createElement("div", { className: 'selectBoardContainer' },
            React.createElement(boards_config_1.BoardsConfig, { boardsService: this.boardsService, boardsServiceClient: this.boardsServiceClient, coreServiceClient: this.coreServiceClient, daemonClient: this.daemonClient, onConfigChange: this.fireConfigChanged, onFocusNodeSet: this.setFocusNode }));
    };
    BoardsConfigDialogWidget.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        if (this.focusNode instanceof HTMLInputElement) {
            this.focusNode.select();
        }
        (this.focusNode || this.node).focus();
    };
    __decorate([
        inversify_1.inject(boards_service_1.BoardsService),
        __metadata("design:type", Object)
    ], BoardsConfigDialogWidget.prototype, "boardsService", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], BoardsConfigDialogWidget.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.inject(core_service_client_impl_1.CoreServiceClientImpl),
        __metadata("design:type", core_service_client_impl_1.CoreServiceClientImpl)
    ], BoardsConfigDialogWidget.prototype, "coreServiceClient", void 0);
    __decorate([
        inversify_1.inject(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl),
        __metadata("design:type", arduino_daemon_client_impl_1.ArduinoDaemonClientImpl)
    ], BoardsConfigDialogWidget.prototype, "daemonClient", void 0);
    BoardsConfigDialogWidget = __decorate([
        inversify_1.injectable(),
        __metadata("design:paramtypes", [])
    ], BoardsConfigDialogWidget);
    return BoardsConfigDialogWidget;
}(browser_1.ReactWidget));
exports.BoardsConfigDialogWidget = BoardsConfigDialogWidget;
//# sourceMappingURL=boards-config-dialog-widget.js.map