"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var message_service_1 = require("@theia/core/lib/common/message-service");
var boards_service_1 = require("../../common/protocol/boards-service");
var boards_service_client_impl_1 = require("./boards-service-client-impl");
var boards_widget_frontend_contribution_1 = require("./boards-widget-frontend-contribution");
var progress_dialog_1 = require("../components/progress-dialog");
/**
 * Listens on `BoardsConfig.Config` changes, if a board is selected which does not
 * have the corresponding core installed, it proposes the user to install the core.
 */
var BoardsAutoInstaller = /** @class */ (function () {
    function BoardsAutoInstaller() {
    }
    BoardsAutoInstaller.prototype.onStart = function () {
        this.boardsServiceClient.onBoardsConfigChanged(this.ensureCoreExists.bind(this));
        this.ensureCoreExists(this.boardsServiceClient.boardsConfig);
    };
    BoardsAutoInstaller.prototype.ensureCoreExists = function (config) {
        var _this = this;
        var selectedBoard = config.selectedBoard;
        if (selectedBoard) {
            this.boardsService.search({}).then(function (packages) {
                var e_1, _a;
                var candidates = packages
                    .filter(function (pkg) { return pkg.boards.some(function (board) { return boards_service_1.Board.sameAs(board, selectedBoard); }); })
                    .filter(function (_a) {
                    var installable = _a.installable, installedVersion = _a.installedVersion;
                    return installable && !installedVersion;
                });
                var _loop_1 = function (candidate) {
                    // tslint:disable-next-line:max-line-length
                    _this.messageService.info("The `\"" + candidate.name + "\"` core has to be installed for the currently selected `\"" + selectedBoard.name + "\"` board. Do you want to install it now?", 'Install Manually', 'Yes').then(function (answer) { return __awaiter(_this, void 0, void 0, function () {
                        var dialog;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0:
                                    if (!(answer === 'Yes')) return [3 /*break*/, 4];
                                    dialog = new progress_dialog_1.InstallationProgressDialog(candidate.name, candidate.availableVersions[0]);
                                    dialog.open();
                                    _a.label = 1;
                                case 1:
                                    _a.trys.push([1, , 3, 4]);
                                    return [4 /*yield*/, this.boardsService.install({ item: candidate })];
                                case 2:
                                    _a.sent();
                                    return [3 /*break*/, 4];
                                case 3:
                                    dialog.close();
                                    return [7 /*endfinally*/];
                                case 4:
                                    if (answer) {
                                        this.boardsManagerFrontendContribution.openView({ reveal: true }).then(function (widget) { return widget.refresh(candidate.name.toLocaleLowerCase()); });
                                    }
                                    return [2 /*return*/];
                            }
                        });
                    }); });
                };
                try {
                    for (var candidates_1 = __values(candidates), candidates_1_1 = candidates_1.next(); !candidates_1_1.done; candidates_1_1 = candidates_1.next()) {
                        var candidate = candidates_1_1.value;
                        _loop_1(candidate);
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (candidates_1_1 && !candidates_1_1.done && (_a = candidates_1.return)) _a.call(candidates_1);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            });
        }
    };
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], BoardsAutoInstaller.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(boards_service_1.BoardsService),
        __metadata("design:type", Object)
    ], BoardsAutoInstaller.prototype, "boardsService", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], BoardsAutoInstaller.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.inject(boards_widget_frontend_contribution_1.BoardsListWidgetFrontendContribution),
        __metadata("design:type", boards_widget_frontend_contribution_1.BoardsListWidgetFrontendContribution)
    ], BoardsAutoInstaller.prototype, "boardsManagerFrontendContribution", void 0);
    BoardsAutoInstaller = __decorate([
        inversify_1.injectable()
    ], BoardsAutoInstaller);
    return BoardsAutoInstaller;
}());
exports.BoardsAutoInstaller = BoardsAutoInstaller;
//# sourceMappingURL=boards-auto-installer.js.map