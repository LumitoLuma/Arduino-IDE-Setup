"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __param = (this && this.__param) || function (paramIndex, decorator) {
    return function (target, key) { decorator(target, key, paramIndex); }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var browser_1 = require("@theia/core/lib/browser");
var boards_service_1 = require("../../common/protocol/boards-service");
var boards_config_dialog_widget_1 = require("./boards-config-dialog-widget");
var boards_service_client_impl_1 = require("./boards-service-client-impl");
var BoardsConfigDialogProps = /** @class */ (function (_super) {
    __extends(BoardsConfigDialogProps, _super);
    function BoardsConfigDialogProps() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    BoardsConfigDialogProps = __decorate([
        inversify_1.injectable()
    ], BoardsConfigDialogProps);
    return BoardsConfigDialogProps;
}(browser_1.DialogProps));
exports.BoardsConfigDialogProps = BoardsConfigDialogProps;
var BoardsConfigDialog = /** @class */ (function (_super) {
    __extends(BoardsConfigDialog, _super);
    function BoardsConfigDialog(props) {
        var _this = _super.call(this, props) || this;
        _this.props = props;
        _this.config = {};
        _this.contentNode.classList.add('select-board-dialog');
        _this.contentNode.appendChild(_this.createDescription());
        _this.appendCloseButton('CANCEL');
        _this.appendAcceptButton('OK');
        return _this;
    }
    BoardsConfigDialog.prototype.init = function () {
        var _this = this;
        this.toDispose.push(this.boardsServiceClient.onBoardsConfigChanged(function (config) {
            _this.config = config;
            _this.update();
        }));
    };
    BoardsConfigDialog.prototype.createDescription = function () {
        var e_1, _a;
        var head = document.createElement('div');
        head.classList.add('head');
        var title = document.createElement('div');
        title.textContent = 'Select Other Board & Port';
        title.classList.add('title');
        head.appendChild(title);
        var text = document.createElement('div');
        text.classList.add('text');
        head.appendChild(text);
        try {
            for (var _b = __values([
                'Select both a Board and a Port if you want to upload a sketch.',
                'If you only select a Board you will be able just to compile, but not to upload your sketch.'
            ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var paragraph = _c.value;
                var p = document.createElement('p');
                p.textContent = paragraph;
                text.appendChild(p);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return head;
    };
    BoardsConfigDialog.prototype.onAfterAttach = function (msg) {
        var _this = this;
        if (this.widget.isAttached) {
            browser_1.Widget.detach(this.widget);
        }
        browser_1.Widget.attach(this.widget, this.contentNode);
        this.toDisposeOnDetach.push(this.widget.onBoardConfigChanged(function (config) {
            _this.config = config;
            _this.update();
        }));
        _super.prototype.onAfterAttach.call(this, msg);
        this.update();
    };
    BoardsConfigDialog.prototype.onUpdateRequest = function (msg) {
        _super.prototype.onUpdateRequest.call(this, msg);
        this.widget.update();
    };
    BoardsConfigDialog.prototype.onActivateRequest = function (msg) {
        _super.prototype.onActivateRequest.call(this, msg);
        this.widget.activate();
    };
    BoardsConfigDialog.prototype.handleEnter = function (event) {
        if (event.target instanceof HTMLTextAreaElement) {
            return false;
        }
    };
    BoardsConfigDialog.prototype.isValid = function (value) {
        if (!value.selectedBoard) {
            if (value.selectedPort) {
                return 'Please pick a board connected to the port you have selected.';
            }
            return false;
        }
        return '';
    };
    Object.defineProperty(BoardsConfigDialog.prototype, "value", {
        get: function () {
            return this.config;
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        inversify_1.inject(boards_config_dialog_widget_1.BoardsConfigDialogWidget),
        __metadata("design:type", boards_config_dialog_widget_1.BoardsConfigDialogWidget)
    ], BoardsConfigDialog.prototype, "widget", void 0);
    __decorate([
        inversify_1.inject(boards_service_1.BoardsService),
        __metadata("design:type", Object)
    ], BoardsConfigDialog.prototype, "boardService", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], BoardsConfigDialog.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], BoardsConfigDialog.prototype, "init", null);
    BoardsConfigDialog = __decorate([
        inversify_1.injectable(),
        __param(0, inversify_1.inject(BoardsConfigDialogProps)),
        __metadata("design:paramtypes", [BoardsConfigDialogProps])
    ], BoardsConfigDialog);
    return BoardsConfigDialog;
}(browser_1.AbstractDialog));
exports.BoardsConfigDialog = BoardsConfigDialog;
//# sourceMappingURL=boards-config-dialog.js.map