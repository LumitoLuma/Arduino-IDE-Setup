"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var workspace_service_1 = require("@theia/workspace/lib/browser/workspace-service");
var config_service_1 = require("../common/protocol/config-service");
var sketches_service_1 = require("../common/protocol/sketches-service");
var arduino_workspace_resolver_1 = require("./arduino-workspace-resolver");
var editor_mode_1 = require("./editor-mode");
var ArduinoWorkspaceService = /** @class */ (function (_super) {
    __extends(ArduinoWorkspaceService, _super);
    function ArduinoWorkspaceService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArduinoWorkspaceService.prototype.getDefaultWorkspaceUri = function () {
        var _this = this;
        if (this.workspaceUri) {
            // Avoid creating a new sketch twice
            return this.workspaceUri;
        }
        this.workspaceUri = (function () { return __awaiter(_this, void 0, void 0, function () {
            var hash, _a, recentWorkspaces, recentSketches, toOpen, uri, sketchDirUri, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _b.trys.push([0, 7, , 8]);
                        hash = window.location.hash;
                        return [4 /*yield*/, Promise.all([
                                this.server.getRecentWorkspaces(),
                                this.sketchService.getSketches().then(function (sketches) { return sketches.map(function (s) { return s.uri; }); })
                            ])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), recentWorkspaces = _a[0], recentSketches = _a[1];
                        return [4 /*yield*/, new arduino_workspace_resolver_1.ArduinoWorkspaceRootResolver({
                                isValid: this.isValid.bind(this)
                            }).resolve({ hash: hash, recentWorkspaces: recentWorkspaces, recentSketches: recentSketches })];
                    case 2:
                        toOpen = _b.sent();
                        if (!toOpen) return [3 /*break*/, 4];
                        uri = toOpen.uri;
                        return [4 /*yield*/, this.server.setMostRecentlyUsedWorkspace(uri)];
                    case 3:
                        _b.sent();
                        return [2 /*return*/, toOpen.uri];
                    case 4: return [4 /*yield*/, this.configService.getConfiguration()];
                    case 5:
                        sketchDirUri = (_b.sent()).sketchDirUri;
                        this.logger.info("No valid workspace URI found. Creating new sketch in " + sketchDirUri);
                        return [4 /*yield*/, this.sketchService.createNewSketch(sketchDirUri)];
                    case 6: return [2 /*return*/, (_b.sent()).uri];
                    case 7:
                        err_1 = _b.sent();
                        this.logger.fatal("Failed to determine the sketch directory: " + err_1);
                        this.messageService.error('There was an error creating the sketch directory. ' +
                            'See the log for more details. ' +
                            'The application will probably not work as expected.');
                        return [2 /*return*/, _super.prototype.getDefaultWorkspaceUri.call(this)];
                    case 8: return [2 /*return*/];
                }
            });
        }); })();
        return this.workspaceUri;
    };
    ArduinoWorkspaceService.prototype.isValid = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var exists, sketchFolder;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.fileSystem.exists(uri)];
                    case 1:
                        exists = _a.sent();
                        if (!exists) {
                            return [2 /*return*/, false];
                        }
                        // The workspace root location must exist. However, when opening a workspace root in pro-mode,
                        // the workspace root must not be a sketch folder. It can be the default sketch directory, or any other directories, for instance.
                        if (this.editorMode.proMode) {
                            return [2 /*return*/, true];
                        }
                        return [4 /*yield*/, this.sketchService.isSketchFolder(uri)];
                    case 2:
                        sketchFolder = _a.sent();
                        return [2 /*return*/, sketchFolder];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(sketches_service_1.SketchesService),
        __metadata("design:type", Object)
    ], ArduinoWorkspaceService.prototype, "sketchService", void 0);
    __decorate([
        inversify_1.inject(config_service_1.ConfigService),
        __metadata("design:type", Object)
    ], ArduinoWorkspaceService.prototype, "configService", void 0);
    __decorate([
        inversify_1.inject(browser_1.LabelProvider),
        __metadata("design:type", browser_1.LabelProvider)
    ], ArduinoWorkspaceService.prototype, "labelProvider", void 0);
    __decorate([
        inversify_1.inject(editor_mode_1.EditorMode),
        __metadata("design:type", editor_mode_1.EditorMode)
    ], ArduinoWorkspaceService.prototype, "editorMode", void 0);
    __decorate([
        inversify_1.inject(core_1.MessageService),
        __metadata("design:type", core_1.MessageService)
    ], ArduinoWorkspaceService.prototype, "messageService", void 0);
    ArduinoWorkspaceService = __decorate([
        inversify_1.injectable()
    ], ArduinoWorkspaceService);
    return ArduinoWorkspaceService;
}(workspace_service_1.WorkspaceService));
exports.ArduinoWorkspaceService = ArduinoWorkspaceService;
//# sourceMappingURL=arduino-workspace-service.js.map