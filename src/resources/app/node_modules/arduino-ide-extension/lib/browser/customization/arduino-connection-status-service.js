"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var disposable_1 = require("@theia/core/lib/common/disposable");
var status_bar_1 = require("@theia/core/lib/browser/status-bar/status-bar");
var connection_status_service_1 = require("@theia/core/lib/browser/connection-status-service");
var arduino_daemon_client_impl_1 = require("../arduino-daemon-client-impl");
var ArduinoFrontendConnectionStatusService = /** @class */ (function (_super) {
    __extends(ArduinoFrontendConnectionStatusService, _super);
    function ArduinoFrontendConnectionStatusService() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArduinoFrontendConnectionStatusService.prototype.init = function () {
        var _this = this;
        this.schedulePing();
        this.wsConnectionProvider.onIncomingMessageActivity(function () {
            // natural activity
            _this.updateStatus(_this.daemonClient.isRunning);
            _this.schedulePing();
        });
    };
    __decorate([
        inversify_1.inject(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl),
        __metadata("design:type", arduino_daemon_client_impl_1.ArduinoDaemonClientImpl)
    ], ArduinoFrontendConnectionStatusService.prototype, "daemonClient", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], ArduinoFrontendConnectionStatusService.prototype, "init", null);
    ArduinoFrontendConnectionStatusService = __decorate([
        inversify_1.injectable()
    ], ArduinoFrontendConnectionStatusService);
    return ArduinoFrontendConnectionStatusService;
}(connection_status_service_1.FrontendConnectionStatusService));
exports.ArduinoFrontendConnectionStatusService = ArduinoFrontendConnectionStatusService;
var ArduinoApplicationConnectionStatusContribution = /** @class */ (function (_super) {
    __extends(ArduinoApplicationConnectionStatusContribution, _super);
    function ArduinoApplicationConnectionStatusContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArduinoApplicationConnectionStatusContribution.prototype.onStateChange = function (state) {
        if (!this.daemonClient.isRunning && state === connection_status_service_1.ConnectionStatus.ONLINE) {
            return;
        }
        _super.prototype.onStateChange.call(this, state);
    };
    ArduinoApplicationConnectionStatusContribution.prototype.handleOffline = function () {
        var _this = this;
        var isRunning = this.daemonClient.isRunning;
        this.statusBar.setElement('connection-status', {
            alignment: status_bar_1.StatusBarAlignment.LEFT,
            text: isRunning ? 'Offline' : '$(bolt) CLI Daemon Offline',
            tooltip: isRunning ? 'Cannot connect to the backend.' : 'Cannot connect to the CLI daemon.',
            priority: 5000
        });
        this.toDisposeOnOnline.push(disposable_1.Disposable.create(function () { return _this.statusBar.removeElement('connection-status'); }));
        document.body.classList.add('theia-mod-offline');
        this.toDisposeOnOnline.push(disposable_1.Disposable.create(function () { return document.body.classList.remove('theia-mod-offline'); }));
    };
    __decorate([
        inversify_1.inject(arduino_daemon_client_impl_1.ArduinoDaemonClientImpl),
        __metadata("design:type", arduino_daemon_client_impl_1.ArduinoDaemonClientImpl)
    ], ArduinoApplicationConnectionStatusContribution.prototype, "daemonClient", void 0);
    ArduinoApplicationConnectionStatusContribution = __decorate([
        inversify_1.injectable()
    ], ArduinoApplicationConnectionStatusContribution);
    return ArduinoApplicationConnectionStatusContribution;
}(connection_status_service_1.ApplicationConnectionStatusContribution));
exports.ArduinoApplicationConnectionStatusContribution = ArduinoApplicationConnectionStatusContribution;
//# sourceMappingURL=arduino-connection-status-service.js.map