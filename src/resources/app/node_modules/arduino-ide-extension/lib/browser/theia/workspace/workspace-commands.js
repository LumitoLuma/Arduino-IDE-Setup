"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkspaceCommandContribution = void 0;
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var opener_service_1 = require("@theia/core/lib/browser/opener-service");
var command_1 = require("@theia/core/lib/common/command");
var workspace_commands_1 = require("@theia/workspace/lib/browser/workspace-commands");
var protocol_1 = require("../../../common/protocol");
var workspace_input_dialog_1 = require("./workspace-input-dialog");
var sketches_service_client_impl_1 = require("../../../common/protocol/sketches-service-client-impl");
var save_as_sketch_1 = require("../../contributions/save-as-sketch");
var browser_1 = require("@theia/core/lib/browser");
var WorkspaceCommandContribution = /** @class */ (function (_super) {
    __extends(WorkspaceCommandContribution, _super);
    function WorkspaceCommandContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WorkspaceCommandContribution.prototype.registerCommands = function (registry) {
        var _this = this;
        _super.prototype.registerCommands.call(this, registry);
        registry.unregisterCommand(workspace_commands_1.WorkspaceCommands.NEW_FILE);
        registry.registerCommand(workspace_commands_1.WorkspaceCommands.NEW_FILE, this.newWorkspaceRootUriAwareCommandHandler({
            execute: function (uri) { return _this.newFile(uri); }
        }));
        registry.unregisterCommand(workspace_commands_1.WorkspaceCommands.FILE_RENAME);
        registry.registerCommand(workspace_commands_1.WorkspaceCommands.FILE_RENAME, this.newUriAwareCommandHandler({
            execute: function (uri) { return _this.renameFile(uri); }
        }));
    };
    WorkspaceCommandContribution.prototype.newFile = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var parent, parentUri, dialog, name, nameWithExt, fileUri;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!uri) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.getDirectory(uri)];
                    case 1:
                        parent = _a.sent();
                        if (!parent) {
                            return [2 /*return*/];
                        }
                        parentUri = new uri_1.default(parent.uri);
                        dialog = new workspace_input_dialog_1.WorkspaceInputDialog({
                            title: 'Name for new file',
                            parentUri: parentUri,
                            validate: function (name) { return _this.validateFileName(name, parent, true); }
                        }, this.labelProvider);
                        return [4 /*yield*/, dialog.open()];
                    case 2:
                        name = _a.sent();
                        nameWithExt = this.maybeAppendInoExt(name);
                        if (!nameWithExt) return [3 /*break*/, 4];
                        fileUri = parentUri.resolve(nameWithExt);
                        return [4 /*yield*/, this.fileSystem.createFile(fileUri.toString())];
                    case 3:
                        _a.sent();
                        this.fireCreateNewFile({ parent: parentUri, uri: fileUri });
                        opener_service_1.open(this.openerService, fileUri);
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    WorkspaceCommandContribution.prototype.validateFileName = function (name, parent, recursive) {
        if (recursive === void 0) { recursive = false; }
        return __awaiter(this, void 0, void 0, function () {
            var nameWithExt, errorMessage, extension;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        nameWithExt = this.maybeAppendInoExt(name);
                        return [4 /*yield*/, _super.prototype.validateFileName.call(this, nameWithExt, parent, recursive)];
                    case 1:
                        errorMessage = _a.sent();
                        if (errorMessage) {
                            return [2 /*return*/, errorMessage];
                        }
                        extension = nameWithExt.split('.').pop();
                        if (!extension) {
                            return [2 /*return*/, 'Invalid filename.']; // XXX: this should not happen as we forcefully append `.ino` if it's not there.
                        }
                        if (protocol_1.Sketch.Extensions.ALL.indexOf("." + extension) === -1) {
                            return [2 /*return*/, "." + extension + " is not a valid extension."];
                        }
                        return [2 /*return*/, ''];
                }
            });
        });
    };
    WorkspaceCommandContribution.prototype.maybeAppendInoExt = function (name) {
        if (!name) {
            return '';
        }
        if (name.trim().length) {
            if (name.indexOf('.') === -1) {
                return name + ".ino";
            }
            if (name.lastIndexOf('.') === name.length - 1) {
                return name.slice(0, -1) + ".ino";
            }
        }
        return name;
    };
    WorkspaceCommandContribution.prototype.renameFile = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var sketch, options, parent, initialValue, dialog, newName, newNameWithExt, oldUri, newUri;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!uri) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.sketchesServiceClient.currentSketch()];
                    case 1:
                        sketch = _a.sent();
                        if (!sketch) {
                            return [2 /*return*/];
                        }
                        if (!(uri.toString() === sketch.mainFileUri)) return [3 /*break*/, 3];
                        options = {
                            execOnlyIfTemp: false,
                            openAfterMove: true,
                            wipeOriginal: true
                        };
                        return [4 /*yield*/, this.commandService.executeCommand(save_as_sketch_1.SaveAsSketch.Commands.SAVE_AS_SKETCH.id, options)];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                    case 3: return [4 /*yield*/, this.getParent(uri)];
                    case 4:
                        parent = _a.sent();
                        if (!parent) {
                            return [2 /*return*/];
                        }
                        initialValue = uri.path.base;
                        dialog = new browser_1.SingleTextInputDialog({
                            title: 'New name for file',
                            initialValue: initialValue,
                            initialSelectionRange: {
                                start: 0,
                                end: uri.path.name.length
                            },
                            validate: function (name, mode) {
                                if (initialValue === name && mode === 'preview') {
                                    return false;
                                }
                                return _this.validateFileName(name, parent, false);
                            }
                        });
                        return [4 /*yield*/, dialog.open()];
                    case 5:
                        newName = _a.sent();
                        newNameWithExt = this.maybeAppendInoExt(newName);
                        if (newNameWithExt) {
                            oldUri = uri;
                            newUri = uri.parent.resolve(newNameWithExt);
                            this.fileSystem.move(oldUri.toString(), newUri.toString());
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(sketches_service_client_impl_1.SketchesServiceClientImpl),
        __metadata("design:type", sketches_service_client_impl_1.SketchesServiceClientImpl)
    ], WorkspaceCommandContribution.prototype, "sketchesServiceClient", void 0);
    __decorate([
        inversify_1.inject(command_1.CommandService),
        __metadata("design:type", Object)
    ], WorkspaceCommandContribution.prototype, "commandService", void 0);
    WorkspaceCommandContribution = __decorate([
        inversify_1.injectable()
    ], WorkspaceCommandContribution);
    return WorkspaceCommandContribution;
}(workspace_commands_1.WorkspaceCommandContribution));
exports.WorkspaceCommandContribution = WorkspaceCommandContribution;
//# sourceMappingURL=workspace-commands.js.map