"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoFileMenuContribution = exports.WorkspaceFrontendContribution = void 0;
var inversify_1 = require("inversify");
var workspace_commands_1 = require("@theia/workspace/lib/browser/workspace-commands");
var workspace_frontend_contribution_1 = require("@theia/workspace/lib/browser/workspace-frontend-contribution");
var WorkspaceFrontendContribution = /** @class */ (function (_super) {
    __extends(WorkspaceFrontendContribution, _super);
    function WorkspaceFrontendContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    WorkspaceFrontendContribution.prototype.registerCommands = function (registry) {
        _super.prototype.registerCommands.call(this, registry);
        // TODO: instead of blacklisting commands to remove, it would be more robust to whitelist the ones we want to keep
        var commands = new Set(registry.commands);
        [
            workspace_commands_1.WorkspaceCommands.OPEN,
            workspace_commands_1.WorkspaceCommands.OPEN_FILE,
            workspace_commands_1.WorkspaceCommands.OPEN_FOLDER,
            workspace_commands_1.WorkspaceCommands.OPEN_WORKSPACE,
            workspace_commands_1.WorkspaceCommands.OPEN_RECENT_WORKSPACE,
            workspace_commands_1.WorkspaceCommands.SAVE_WORKSPACE_AS,
            workspace_commands_1.WorkspaceCommands.SAVE_AS,
            workspace_commands_1.WorkspaceCommands.CLOSE
        ].filter(commands.has.bind(commands)).forEach(registry.unregisterCommand.bind(registry));
    };
    WorkspaceFrontendContribution.prototype.registerMenus = function (_) {
    };
    WorkspaceFrontendContribution.prototype.registerKeybindings = function (registry) {
        _super.prototype.registerKeybindings.call(this, registry);
        [
            workspace_commands_1.WorkspaceCommands.NEW_FILE,
            workspace_commands_1.WorkspaceCommands.FILE_RENAME,
            workspace_commands_1.WorkspaceCommands.FILE_DELETE
        ].map(function (_a) {
            var id = _a.id;
            return id;
        }).forEach(registry.unregisterKeybinding.bind(registry));
    };
    WorkspaceFrontendContribution = __decorate([
        inversify_1.injectable()
    ], WorkspaceFrontendContribution);
    return WorkspaceFrontendContribution;
}(workspace_frontend_contribution_1.WorkspaceFrontendContribution));
exports.WorkspaceFrontendContribution = WorkspaceFrontendContribution;
var ArduinoFileMenuContribution = /** @class */ (function (_super) {
    __extends(ArduinoFileMenuContribution, _super);
    function ArduinoFileMenuContribution() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArduinoFileMenuContribution.prototype.registerMenus = function (_) {
        // NOOP
    };
    ArduinoFileMenuContribution = __decorate([
        inversify_1.injectable()
    ], ArduinoFileMenuContribution);
    return ArduinoFileMenuContribution;
}(workspace_commands_1.FileMenuContribution));
exports.ArduinoFileMenuContribution = ArduinoFileMenuContribution;
//# sourceMappingURL=workspace-frontend-contribution.js.map