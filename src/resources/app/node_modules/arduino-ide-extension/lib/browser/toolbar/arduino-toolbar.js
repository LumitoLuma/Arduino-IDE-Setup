"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoToolbar = exports.ArduinoToolbarComponent = exports.ARDUINO_TOOLBAR_ITEM_CLASS = void 0;
var React = require("react");
var tab_bar_toolbar_1 = require("@theia/core/lib/browser/shell/tab-bar-toolbar");
var browser_1 = require("@theia/core/lib/browser");
var label_parser_1 = require("@theia/core/lib/browser/label-parser");
exports.ARDUINO_TOOLBAR_ITEM_CLASS = 'arduino-tool-item';
var ArduinoToolbarComponent = /** @class */ (function (_super) {
    __extends(ArduinoToolbarComponent, _super);
    function ArduinoToolbarComponent(props) {
        var _this = _super.call(this, props) || this;
        _this.renderItem = function (item) {
            var e_1, _a;
            var innerText = '';
            var className = "arduino-tool-icon " + item.id + "-icon";
            if (item.text) {
                try {
                    for (var _b = __values(_this.props.labelParser.parse(item.text)), _c = _b.next(); !_c.done; _c = _b.next()) {
                        var labelPart = _c.value;
                        if (typeof labelPart !== 'string' && label_parser_1.LabelIcon.is(labelPart)) {
                            className += " fa fa-" + labelPart.name;
                        }
                        else {
                            innerText = labelPart;
                        }
                    }
                }
                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                finally {
                    try {
                        if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                    }
                    finally { if (e_1) throw e_1.error; }
                }
            }
            var command = _this.props.commands.getCommand(item.command);
            var cls = exports.ARDUINO_TOOLBAR_ITEM_CLASS + " " + tab_bar_toolbar_1.TabBarToolbar.Styles.TAB_BAR_TOOLBAR_ITEM + " " + (command && _this.props.commandIsEnabled(command.id) ? 'enabled' : '');
            return React.createElement("div", { key: item.id, className: cls },
                React.createElement("div", { className: item.id },
                    React.createElement("div", { key: item.id + '-icon', id: item.id, className: className, onClick: _this.props.executeCommand, onMouseOver: function () { return _this.setState({ tooltip: item.tooltip || '' }); }, onMouseOut: function () { return _this.setState({ tooltip: '' }); }, title: item.tooltip }, innerText)));
        };
        _this.state = { tooltip: '' };
        return _this;
    }
    ArduinoToolbarComponent.prototype.render = function () {
        var _this = this;
        var tooltip = React.createElement("div", { key: 'arduino-toolbar-tooltip', className: 'arduino-toolbar-tooltip' }, this.state.tooltip);
        var items = [
            React.createElement(React.Fragment, { key: this.props.side + '-arduino-toolbar-tooltip' }, __spread(this.props.items).map(function (item) { return tab_bar_toolbar_1.TabBarToolbarItem.is(item) ? _this.renderItem(item) : item.render(); }))
        ];
        if (this.props.side === 'left') {
            items.unshift(tooltip);
        }
        else {
            items.push(tooltip);
        }
        return items;
    };
    return ArduinoToolbarComponent;
}(React.Component));
exports.ArduinoToolbarComponent = ArduinoToolbarComponent;
var ArduinoToolbar = /** @class */ (function (_super) {
    __extends(ArduinoToolbar, _super);
    function ArduinoToolbar(tabBarToolbarRegistry, commands, labelParser, side) {
        var _this = _super.call(this) || this;
        _this.tabBarToolbarRegistry = tabBarToolbarRegistry;
        _this.commands = commands;
        _this.labelParser = labelParser;
        _this.side = side;
        _this.items = new Map();
        _this.doCommandIsEnabled = function (id) { return _this.commandIsEnabled(id); };
        _this.executeCommand = function (e) {
            var item = _this.items.get(e.currentTarget.id);
            if (tab_bar_toolbar_1.TabBarToolbarItem.is(item)) {
                _this.commands.executeCommand(item.command, _this, e.target);
            }
        };
        _this.id = side + '-arduino-toolbar';
        _this.addClass(tab_bar_toolbar_1.TabBarToolbar.Styles.TAB_BAR_TOOLBAR);
        _this.init();
        _this.tabBarToolbarRegistry.onDidChange(function () { return _this.updateToolbar(); });
        return _this;
    }
    ArduinoToolbar.prototype.updateItems = function (items) {
        var e_2, _a;
        this.items.clear();
        var revItems = items.sort(tab_bar_toolbar_1.TabBarToolbarItem.PRIORITY_COMPARATOR).reverse();
        try {
            for (var revItems_1 = __values(revItems), revItems_1_1 = revItems_1.next(); !revItems_1_1.done; revItems_1_1 = revItems_1.next()) {
                var item = revItems_1_1.value;
                this.items.set(item.id, item);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (revItems_1_1 && !revItems_1_1.done && (_a = revItems_1.return)) _a.call(revItems_1);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.update();
    };
    ArduinoToolbar.prototype.updateToolbar = function () {
        var items = this ? this.tabBarToolbarRegistry.visibleItems(this) : [];
        this.updateItems(items);
    };
    ArduinoToolbar.prototype.init = function () {
        this.node.classList.add('theia-arduino-toolbar', this.side);
        this.update();
    };
    ArduinoToolbar.prototype.commandIsEnabled = function (command) {
        return this.commands.isEnabled(command, this);
    };
    ArduinoToolbar.prototype.render = function () {
        return React.createElement(ArduinoToolbarComponent, { key: 'arduino-toolbar-component', side: this.side, labelParser: this.labelParser, items: __spread(this.items.values()), commands: this.commands, commandIsEnabled: this.doCommandIsEnabled, executeCommand: this.executeCommand });
    };
    return ArduinoToolbar;
}(browser_1.ReactWidget));
exports.ArduinoToolbar = ArduinoToolbar;
(function (ArduinoToolbar) {
    function is(maybeToolbarWidget) {
        return maybeToolbarWidget instanceof ArduinoToolbar;
    }
    ArduinoToolbar.is = is;
})(ArduinoToolbar = exports.ArduinoToolbar || (exports.ArduinoToolbar = {}));
exports.ArduinoToolbar = ArduinoToolbar;
//# sourceMappingURL=arduino-toolbar.js.map