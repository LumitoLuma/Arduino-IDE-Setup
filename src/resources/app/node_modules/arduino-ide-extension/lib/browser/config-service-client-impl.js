"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var logger_1 = require("@theia/core/lib/common/logger");
var event_1 = require("@theia/core/lib/common/event");
var command_1 = require("@theia/core/lib/common/command");
var message_service_1 = require("@theia/core/lib/common/message-service");
var arduino_commands_1 = require("./arduino-commands");
var ConfigServiceClientImpl = /** @class */ (function () {
    function ConfigServiceClientImpl() {
        this.onConfigChangedEmitter = new event_1.Emitter();
    }
    ConfigServiceClientImpl.prototype.notifyConfigChanged = function (config) {
        this.invalidConfigPopup = undefined;
        this.info("The CLI configuration has been successfully reloaded.");
        this.onConfigChangedEmitter.fire(config);
    };
    ConfigServiceClientImpl.prototype.notifyInvalidConfig = function () {
        var _this = this;
        if (!this.invalidConfigPopup) {
            this.invalidConfigPopup = this.messageService.error("Your CLI configuration is invalid. Do you want to correct it now?", 'No', 'Yes')
                .then(function (answer) {
                if (answer === 'Yes') {
                    _this.commandService.executeCommand(arduino_commands_1.ArduinoCommands.OPEN_CLI_CONFIG.id);
                }
                _this.invalidConfigPopup = undefined;
            });
        }
    };
    Object.defineProperty(ConfigServiceClientImpl.prototype, "onConfigChanged", {
        get: function () {
            return this.onConfigChangedEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    ConfigServiceClientImpl.prototype.info = function (message) {
        this.messageService.info(message, { timeout: 3000 });
        this.logger.info(message);
    };
    __decorate([
        inversify_1.inject(command_1.CommandService),
        __metadata("design:type", Object)
    ], ConfigServiceClientImpl.prototype, "commandService", void 0);
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], ConfigServiceClientImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], ConfigServiceClientImpl.prototype, "messageService", void 0);
    ConfigServiceClientImpl = __decorate([
        inversify_1.injectable()
    ], ConfigServiceClientImpl);
    return ConfigServiceClientImpl;
}());
exports.ConfigServiceClientImpl = ConfigServiceClientImpl;
//# sourceMappingURL=config-service-client-impl.js.map