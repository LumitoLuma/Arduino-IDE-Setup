"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoFrontendContribution = void 0;
var core_1 = require("@theia/core");
var browser_1 = require("@theia/core/lib/browser");
var common_frontend_contribution_1 = require("@theia/core/lib/browser/common-frontend-contribution");
var command_1 = require("@theia/core/lib/common/command");
var message_service_1 = require("@theia/core/lib/common/message-service");
var uri_1 = require("@theia/core/lib/common/uri");
var browser_2 = require("@theia/editor/lib/browser");
var file_dialog_1 = require("@theia/filesystem/lib/browser/file-dialog");
var common_1 = require("@theia/filesystem/lib/common");
var problem_contribution_1 = require("@theia/markers/lib/browser/problem/problem-contribution");
var monaco_menu_1 = require("@theia/monaco/lib/browser/monaco-menu");
var navigator_contribution_1 = require("@theia/navigator/lib/browser/navigator-contribution");
var outline_view_contribution_1 = require("@theia/outline-view/lib/browser/outline-view-contribution");
var output_contribution_1 = require("@theia/output/lib/browser/output-contribution");
var scm_contribution_1 = require("@theia/scm/lib/browser/scm-contribution");
var search_in_workspace_frontend_contribution_1 = require("@theia/search-in-workspace/lib/browser/search-in-workspace-frontend-contribution");
var terminal_frontend_contribution_1 = require("@theia/terminal/lib/browser/terminal-frontend-contribution");
var inversify_1 = require("inversify");
var React = require("react");
var main_menu_manager_1 = require("../common/main-menu-manager");
var protocol_1 = require("../common/protocol");
var arduino_daemon_1 = require("../common/protocol/arduino-daemon");
var config_service_1 = require("../common/protocol/config-service");
var filesystem_ext_1 = require("../common/protocol/filesystem-ext");
var arduino_commands_1 = require("./arduino-commands");
var boards_config_dialog_1 = require("./boards/boards-config-dialog");
var boards_data_store_1 = require("./boards/boards-data-store");
var boards_service_client_impl_1 = require("./boards/boards-service-client-impl");
var boards_toolbar_item_1 = require("./boards/boards-toolbar-item");
var editor_mode_1 = require("./editor-mode");
var arduino_menus_1 = require("./menu/arduino-menus");
var monitor_connection_1 = require("./monitor/monitor-connection");
var monitor_view_contribution_1 = require("./monitor/monitor-view-contribution");
var workspace_service_1 = require("./theia/workspace/workspace-service");
var arduino_toolbar_1 = require("./toolbar/arduino-toolbar");
var ArduinoFrontendContribution = /** @class */ (function () {
    function ArduinoFrontendContribution() {
    }
    ArduinoFrontendContribution.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var updateStatusBar;
            var _this = this;
            return __generator(this, function (_a) {
                if (!window.navigator.onLine) {
                    // tslint:disable-next-line:max-line-length
                    this.messageService.warn('You appear to be offline. Without an Internet connection, the Arduino CLI might not be able to download the required resources and could cause malfunction. Please connect to the Internet and restart the application.');
                }
                updateStatusBar = function (_a) {
                    var selectedBoard = _a.selectedBoard, selectedPort = _a.selectedPort;
                    _this.statusBar.setElement('arduino-selected-board', {
                        alignment: browser_1.StatusBarAlignment.RIGHT,
                        text: selectedBoard ? "$(microchip) " + selectedBoard.name : '$(close) no board selected',
                        className: 'arduino-selected-board'
                    });
                    if (selectedBoard) {
                        _this.statusBar.setElement('arduino-selected-port', {
                            alignment: browser_1.StatusBarAlignment.RIGHT,
                            text: selectedPort ? "on " + protocol_1.Port.toString(selectedPort) : '[not connected]',
                            className: 'arduino-selected-port'
                        });
                    }
                };
                this.boardsServiceClientImpl.onBoardsConfigChanged(updateStatusBar);
                updateStatusBar(this.boardsServiceClientImpl.boardsConfig);
                return [2 /*return*/];
            });
        });
    };
    ArduinoFrontendContribution.prototype.onStart = function (app) {
        var e_1, _a;
        try {
            // Initialize all `pro-mode` widgets. This is a NOOP if in normal mode.
            for (var _b = __values([
                this.fileNavigatorContributions,
                this.outputContribution,
                this.outlineContribution,
                this.problemContribution,
                this.scmContribution,
                this.siwContribution
            ]), _c = _b.next(); !_c.done; _c = _b.next()) {
                var viewContribution = _c.value;
                if (viewContribution.initializeLayout) {
                    viewContribution.initializeLayout(app);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ArduinoFrontendContribution.prototype.registerToolbarItems = function (registry) {
        var _this = this;
        registry.registerItem({
            id: boards_toolbar_item_1.BoardsToolBarItem.TOOLBAR_ID,
            render: function () { return React.createElement(boards_toolbar_item_1.BoardsToolBarItem, { key: 'boardsToolbarItem', commands: _this.commandRegistry, boardsServiceClient: _this.boardsServiceClientImpl }); },
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            priority: 7
        });
        registry.registerItem({
            id: 'toggle-serial-monitor',
            command: monitor_view_contribution_1.MonitorViewContribution.TOGGLE_SERIAL_MONITOR_TOOLBAR,
            tooltip: 'Serial Monitor'
        });
        registry.registerItem({
            id: arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE.id,
            command: arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE_TOOLBAR.id,
            tooltip: this.editorMode.proMode ? 'Switch to Classic Mode' : 'Switch to Advanced Mode',
            text: this.editorMode.proMode ? '$(toggle-on)' : '$(toggle-off)'
        });
    };
    ArduinoFrontendContribution.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(arduino_commands_1.ArduinoCommands.TOGGLE_COMPILE_FOR_DEBUG, {
            execute: function () { return _this.editorMode.toggleCompileForDebug(); },
            isToggled: function () { return _this.editorMode.compileForDebug; }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.OPEN_SKETCH_FILES, {
            execute: function (uri) { return __awaiter(_this, void 0, void 0, function () {
                return __generator(this, function (_a) {
                    this.openSketchFiles(uri);
                    return [2 /*return*/];
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.OPEN_BOARDS_DIALOG, {
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var boardsConfig;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.boardsConfigDialog.open()];
                        case 1:
                            boardsConfig = _a.sent();
                            if (boardsConfig) {
                                this.boardsServiceClientImpl.boardsConfig = boardsConfig;
                            }
                            return [2 /*return*/];
                    }
                });
            }); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE, {
            isToggled: function () { return _this.editorMode.proMode; },
            execute: function () { return _this.editorMode.toggleProMode(); }
        });
        registry.registerCommand(arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE_TOOLBAR, {
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'right'; },
            isToggled: function () { return _this.editorMode.proMode; },
            execute: function () { return _this.editorMode.toggleProMode(); }
        });
    };
    ArduinoFrontendContribution.prototype.registerMenus = function (registry) {
        if (!this.editorMode.proMode) {
            var menuId = function (menuPath) {
                var index = menuPath.length - 1;
                var menuId = menuPath[index];
                return menuId;
            };
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(menuId(monaco_menu_1.MonacoMenus.SELECTION));
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(menuId(browser_2.EditorMainMenu.GO));
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(menuId(terminal_frontend_contribution_1.TerminalMenus.TERMINAL));
            registry.getMenu(core_1.MAIN_MENU_BAR).removeNode(menuId(common_frontend_contribution_1.CommonMenus.VIEW));
        }
        registry.registerSubmenu(arduino_menus_1.ArduinoMenus.SKETCH, 'Sketch');
        registry.registerSubmenu(arduino_menus_1.ArduinoMenus.TOOLS, 'Tools');
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH, {
            commandId: arduino_commands_1.ArduinoCommands.TOGGLE_COMPILE_FOR_DEBUG.id,
            label: 'Optimize for Debugging',
            order: '1'
        });
        registry.registerMenuAction(common_frontend_contribution_1.CommonMenus.HELP, {
            commandId: arduino_commands_1.ArduinoCommands.TOGGLE_ADVANCED_MODE.id,
            label: 'Advanced Mode'
        });
    };
    ArduinoFrontendContribution.prototype.openSketchFiles = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var sketch, mainFileUri, otherSketchFileUris, additionalFileUris, _a, _b, uri_2, e_2_1, e_3, message;
            var e_2, _c;
            return __generator(this, function (_d) {
                switch (_d.label) {
                    case 0:
                        _d.trys.push([0, 11, , 12]);
                        return [4 /*yield*/, this.sketchService.loadSketch(uri)];
                    case 1:
                        sketch = _d.sent();
                        mainFileUri = sketch.mainFileUri, otherSketchFileUris = sketch.otherSketchFileUris, additionalFileUris = sketch.additionalFileUris;
                        _d.label = 2;
                    case 2:
                        _d.trys.push([2, 7, 8, 9]);
                        _a = __values(__spread([mainFileUri], otherSketchFileUris, additionalFileUris)), _b = _a.next();
                        _d.label = 3;
                    case 3:
                        if (!!_b.done) return [3 /*break*/, 6];
                        uri_2 = _b.value;
                        return [4 /*yield*/, this.ensureOpened(uri_2)];
                    case 4:
                        _d.sent();
                        _d.label = 5;
                    case 5:
                        _b = _a.next();
                        return [3 /*break*/, 3];
                    case 6: return [3 /*break*/, 9];
                    case 7:
                        e_2_1 = _d.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 9];
                    case 8:
                        try {
                            if (_b && !_b.done && (_c = _a.return)) _c.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 9: return [4 /*yield*/, this.ensureOpened(mainFileUri, true)];
                    case 10:
                        _d.sent();
                        return [3 /*break*/, 12];
                    case 11:
                        e_3 = _d.sent();
                        console.error(e_3);
                        message = e_3 instanceof Error ? e_3.message : JSON.stringify(e_3);
                        this.messageService.error(message);
                        return [3 /*break*/, 12];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    ArduinoFrontendContribution.prototype.ensureOpened = function (uri, forceOpen) {
        if (forceOpen === void 0) { forceOpen = false; }
        return __awaiter(this, void 0, void 0, function () {
            var widget;
            return __generator(this, function (_a) {
                widget = this.editorManager.all.find(function (widget) { return widget.editor.uri.toString() === uri; });
                if (!widget || forceOpen) {
                    return [2 /*return*/, this.editorManager.open(new uri_1.default(uri))];
                }
                return [2 /*return*/];
            });
        });
    };
    ArduinoFrontendContribution.prototype.registerColors = function (colors) {
        colors.register({
            id: 'arduino.branding.primary',
            defaults: {
                dark: 'statusBar.background',
                light: 'statusBar.background'
            },
            description: 'The primary branding color, such as dialog titles, library, and board manager list labels.'
        }, {
            id: 'arduino.branding.secondary',
            defaults: {
                dark: 'statusBar.background',
                light: 'statusBar.background'
            },
            description: 'Secondary branding color for list selections, dropdowns, and widget borders.'
        }, {
            id: 'arduino.foreground',
            defaults: {
                dark: 'editorWidget.background',
                light: 'editorWidget.background',
                hc: 'editorWidget.background'
            },
            description: 'Color of the Arduino Pro IDE foreground which is used for dialogs, such as the Select Board dialog.'
        }, {
            id: 'arduino.toolbar.background',
            defaults: {
                dark: 'button.background',
                light: 'button.background',
                hc: 'activityBar.inactiveForeground'
            },
            description: 'Background color of the toolbar items. Such as Upload, Verify, etc.'
        }, {
            id: 'arduino.toolbar.hoverBackground',
            defaults: {
                dark: 'button.hoverBackground',
                light: 'button.hoverBackground',
                hc: 'activityBar.inactiveForeground'
            },
            description: 'Background color of the toolbar items when hovering over them. Such as Upload, Verify, etc.'
        }, {
            id: 'arduino.output.foreground',
            defaults: {
                dark: 'editor.foreground',
                light: 'editor.foreground',
                hc: 'editor.foreground'
            },
            description: 'Color of the text in the Output view.'
        }, {
            id: 'arduino.output.background',
            defaults: {
                dark: 'editor.background',
                light: 'editor.background',
                hc: 'editor.background'
            },
            description: 'Background color of the Output view.'
        });
    };
    __decorate([
        inversify_1.inject(message_service_1.MessageService),
        __metadata("design:type", message_service_1.MessageService)
    ], ArduinoFrontendContribution.prototype, "messageService", void 0);
    __decorate([
        inversify_1.inject(protocol_1.BoardsService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "boardsService", void 0);
    __decorate([
        inversify_1.inject(protocol_1.CoreService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "coreService", void 0);
    __decorate([
        inversify_1.inject(protocol_1.ToolOutputServiceClient),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "toolOutputServiceClient", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], ArduinoFrontendContribution.prototype, "boardsServiceClientImpl", void 0);
    __decorate([
        inversify_1.inject(protocol_1.BoardsServiceClient),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "boardsServiceClient", void 0);
    __decorate([
        inversify_1.inject(core_1.SelectionService),
        __metadata("design:type", core_1.SelectionService)
    ], ArduinoFrontendContribution.prototype, "selectionService", void 0);
    __decorate([
        inversify_1.inject(browser_2.EditorManager),
        __metadata("design:type", browser_2.EditorManager)
    ], ArduinoFrontendContribution.prototype, "editorManager", void 0);
    __decorate([
        inversify_1.inject(browser_1.ContextMenuRenderer),
        __metadata("design:type", browser_1.ContextMenuRenderer)
    ], ArduinoFrontendContribution.prototype, "contextMenuRenderer", void 0);
    __decorate([
        inversify_1.inject(file_dialog_1.FileDialogService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "fileDialogService", void 0);
    __decorate([
        inversify_1.inject(common_1.FileSystem),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "fileSystem", void 0);
    __decorate([
        inversify_1.inject(protocol_1.SketchesService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "sketchService", void 0);
    __decorate([
        inversify_1.inject(boards_config_dialog_1.BoardsConfigDialog),
        __metadata("design:type", boards_config_dialog_1.BoardsConfigDialog)
    ], ArduinoFrontendContribution.prototype, "boardsConfigDialog", void 0);
    __decorate([
        inversify_1.inject(core_1.MenuModelRegistry),
        __metadata("design:type", core_1.MenuModelRegistry)
    ], ArduinoFrontendContribution.prototype, "menuRegistry", void 0);
    __decorate([
        inversify_1.inject(command_1.CommandRegistry),
        __metadata("design:type", command_1.CommandRegistry)
    ], ArduinoFrontendContribution.prototype, "commandRegistry", void 0);
    __decorate([
        inversify_1.inject(browser_1.StatusBar),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "statusBar", void 0);
    __decorate([
        inversify_1.inject(workspace_service_1.WorkspaceService),
        __metadata("design:type", workspace_service_1.WorkspaceService)
    ], ArduinoFrontendContribution.prototype, "workspaceService", void 0);
    __decorate([
        inversify_1.inject(monitor_connection_1.MonitorConnection),
        __metadata("design:type", monitor_connection_1.MonitorConnection)
    ], ArduinoFrontendContribution.prototype, "monitorConnection", void 0);
    __decorate([
        inversify_1.inject(navigator_contribution_1.FileNavigatorContribution),
        __metadata("design:type", navigator_contribution_1.FileNavigatorContribution)
    ], ArduinoFrontendContribution.prototype, "fileNavigatorContributions", void 0);
    __decorate([
        inversify_1.inject(output_contribution_1.OutputContribution),
        __metadata("design:type", output_contribution_1.OutputContribution)
    ], ArduinoFrontendContribution.prototype, "outputContribution", void 0);
    __decorate([
        inversify_1.inject(outline_view_contribution_1.OutlineViewContribution),
        __metadata("design:type", outline_view_contribution_1.OutlineViewContribution)
    ], ArduinoFrontendContribution.prototype, "outlineContribution", void 0);
    __decorate([
        inversify_1.inject(problem_contribution_1.ProblemContribution),
        __metadata("design:type", problem_contribution_1.ProblemContribution)
    ], ArduinoFrontendContribution.prototype, "problemContribution", void 0);
    __decorate([
        inversify_1.inject(scm_contribution_1.ScmContribution),
        __metadata("design:type", scm_contribution_1.ScmContribution)
    ], ArduinoFrontendContribution.prototype, "scmContribution", void 0);
    __decorate([
        inversify_1.inject(search_in_workspace_frontend_contribution_1.SearchInWorkspaceFrontendContribution),
        __metadata("design:type", search_in_workspace_frontend_contribution_1.SearchInWorkspaceFrontendContribution)
    ], ArduinoFrontendContribution.prototype, "siwContribution", void 0);
    __decorate([
        inversify_1.inject(editor_mode_1.EditorMode),
        __metadata("design:type", editor_mode_1.EditorMode)
    ], ArduinoFrontendContribution.prototype, "editorMode", void 0);
    __decorate([
        inversify_1.inject(arduino_daemon_1.ArduinoDaemon),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "daemon", void 0);
    __decorate([
        inversify_1.inject(browser_1.OpenerService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "openerService", void 0);
    __decorate([
        inversify_1.inject(config_service_1.ConfigService),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "configService", void 0);
    __decorate([
        inversify_1.inject(boards_data_store_1.BoardsDataStore),
        __metadata("design:type", boards_data_store_1.BoardsDataStore)
    ], ArduinoFrontendContribution.prototype, "boardsDataStore", void 0);
    __decorate([
        inversify_1.inject(main_menu_manager_1.MainMenuManager),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "mainMenuManager", void 0);
    __decorate([
        inversify_1.inject(filesystem_ext_1.FileSystemExt),
        __metadata("design:type", Object)
    ], ArduinoFrontendContribution.prototype, "fileSystemExt", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], ArduinoFrontendContribution.prototype, "init", null);
    ArduinoFrontendContribution = __decorate([
        inversify_1.injectable()
    ], ArduinoFrontendContribution);
    return ArduinoFrontendContribution;
}());
exports.ArduinoFrontendContribution = ArduinoFrontendContribution;
//# sourceMappingURL=arduino-frontend-contribution.js.map