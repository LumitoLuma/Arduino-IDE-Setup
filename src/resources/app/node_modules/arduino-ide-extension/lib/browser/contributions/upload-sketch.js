"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.UploadSketch = void 0;
var inversify_1 = require("inversify");
var output_channel_1 = require("@theia/output/lib/common/output-channel");
var protocol_1 = require("../../common/protocol");
var arduino_menus_1 = require("../menu/arduino-menus");
var arduino_toolbar_1 = require("../toolbar/arduino-toolbar");
var boards_data_store_1 = require("../boards/boards-data-store");
var monitor_connection_1 = require("../monitor/monitor-connection");
var boards_service_client_impl_1 = require("../boards/boards-service-client-impl");
var contribution_1 = require("./contribution");
var UploadSketch = /** @class */ (function (_super) {
    __extends(UploadSketch, _super);
    function UploadSketch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    UploadSketch_1 = UploadSketch;
    UploadSketch.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(UploadSketch_1.Commands.UPLOAD_SKETCH, {
            execute: function () { return _this.uploadSketch(); }
        });
        registry.registerCommand(UploadSketch_1.Commands.UPLOAD_SKETCH_USING_PROGRAMMER, {
            execute: function () { return _this.uploadSketch(true); }
        });
        registry.registerCommand(UploadSketch_1.Commands.UPLOAD_SKETCH_TOOLBAR, {
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            execute: function () { return registry.executeCommand(UploadSketch_1.Commands.UPLOAD_SKETCH.id); }
        });
    };
    UploadSketch.prototype.registerMenus = function (registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH__MAIN_GROUP, {
            commandId: UploadSketch_1.Commands.UPLOAD_SKETCH.id,
            label: 'Upload',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH__MAIN_GROUP, {
            commandId: UploadSketch_1.Commands.UPLOAD_SKETCH_USING_PROGRAMMER.id,
            label: 'Upload Using Programmer',
            order: '1'
        });
    };
    UploadSketch.prototype.registerKeybindings = function (registry) {
        registry.registerKeybinding({
            command: UploadSketch_1.Commands.UPLOAD_SKETCH.id,
            keybinding: 'CtrlCmd+U'
        });
        registry.registerKeybinding({
            command: UploadSketch_1.Commands.UPLOAD_SKETCH_USING_PROGRAMMER.id,
            keybinding: 'CtrlCmd+Shift+U'
        });
    };
    UploadSketch.prototype.registerToolbarItems = function (registry) {
        registry.registerItem({
            id: UploadSketch_1.Commands.UPLOAD_SKETCH_TOOLBAR.id,
            command: UploadSketch_1.Commands.UPLOAD_SKETCH_TOOLBAR.id,
            tooltip: 'Upload',
            priority: 1
        });
    };
    UploadSketch.prototype.uploadSketch = function (usingProgrammer) {
        if (usingProgrammer === void 0) { usingProgrammer = false; }
        return __awaiter(this, void 0, void 0, function () {
            var uri, monitorConfig, boardsConfig, _a, fqbn, selectedProgrammer, options, sketchUri, optimizeForDebug, selectedPort, programmer, port, port, e_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.sketchServiceClient.currentSketchFile()];
                    case 1:
                        uri = _b.sent();
                        if (!uri) {
                            return [2 /*return*/];
                        }
                        monitorConfig = this.monitorConnection.monitorConfig;
                        if (!monitorConfig) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.monitorConnection.disconnect()];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 6, 7, 10]);
                        boardsConfig = this.boardsServiceClientImpl.boardsConfig;
                        if (!boardsConfig || !boardsConfig.selectedBoard) {
                            throw new Error('No boards selected. Please select a board.');
                        }
                        if (!boardsConfig.selectedBoard.fqbn) {
                            throw new Error("No core is installed for the '" + boardsConfig.selectedBoard.name + "' board. Please install the core.");
                        }
                        return [4 /*yield*/, Promise.all([
                                this.boardsDataStore.appendConfigToFqbn(boardsConfig.selectedBoard.fqbn),
                                this.boardsDataStore.getData(boardsConfig.selectedBoard.fqbn)
                            ])];
                    case 4:
                        _a = __read.apply(void 0, [_b.sent(), 2]), fqbn = _a[0], selectedProgrammer = _a[1].selectedProgrammer;
                        options = undefined;
                        sketchUri = uri;
                        optimizeForDebug = this.editorMode.compileForDebug;
                        selectedPort = boardsConfig.selectedPort;
                        if (usingProgrammer) {
                            programmer = selectedProgrammer;
                            if (!programmer) {
                                throw new Error('Programmer is not selected. Please select a programmer.');
                            }
                            port = undefined;
                            // If the port is set by the user, we pass it to the CLI as it might be required.
                            // If it is not set but the CLI requires it, we let the CLI to complain.
                            if (selectedPort) {
                                port = selectedPort.address;
                            }
                            options = {
                                sketchUri: sketchUri,
                                fqbn: fqbn,
                                optimizeForDebug: optimizeForDebug,
                                programmer: programmer,
                                port: port
                            };
                        }
                        else {
                            if (!selectedPort) {
                                throw new Error('No ports selected. Please select a port.');
                            }
                            port = selectedPort.address;
                            options = {
                                sketchUri: sketchUri,
                                fqbn: fqbn,
                                optimizeForDebug: optimizeForDebug,
                                port: port
                            };
                        }
                        this.outputChannelManager.getChannel('Arduino: upload').clear();
                        return [4 /*yield*/, this.coreService.upload(options)];
                    case 5:
                        _b.sent();
                        this.messageService.info('Done uploading.', { timeout: 1000 });
                        return [3 /*break*/, 10];
                    case 6:
                        e_1 = _b.sent();
                        this.messageService.error(e_1.toString());
                        return [3 /*break*/, 10];
                    case 7:
                        if (!monitorConfig) return [3 /*break*/, 9];
                        return [4 /*yield*/, this.monitorConnection.connect(monitorConfig)];
                    case 8:
                        _b.sent();
                        _b.label = 9;
                    case 9: return [7 /*endfinally*/];
                    case 10: return [2 /*return*/];
                }
            });
        });
    };
    var UploadSketch_1;
    __decorate([
        inversify_1.inject(protocol_1.CoreService),
        __metadata("design:type", Object)
    ], UploadSketch.prototype, "coreService", void 0);
    __decorate([
        inversify_1.inject(monitor_connection_1.MonitorConnection),
        __metadata("design:type", monitor_connection_1.MonitorConnection)
    ], UploadSketch.prototype, "monitorConnection", void 0);
    __decorate([
        inversify_1.inject(boards_data_store_1.BoardsDataStore),
        __metadata("design:type", boards_data_store_1.BoardsDataStore)
    ], UploadSketch.prototype, "boardsDataStore", void 0);
    __decorate([
        inversify_1.inject(boards_service_client_impl_1.BoardsServiceClientImpl),
        __metadata("design:type", boards_service_client_impl_1.BoardsServiceClientImpl)
    ], UploadSketch.prototype, "boardsServiceClientImpl", void 0);
    __decorate([
        inversify_1.inject(output_channel_1.OutputChannelManager),
        __metadata("design:type", output_channel_1.OutputChannelManager)
    ], UploadSketch.prototype, "outputChannelManager", void 0);
    UploadSketch = UploadSketch_1 = __decorate([
        inversify_1.injectable()
    ], UploadSketch);
    return UploadSketch;
}(contribution_1.SketchContribution));
exports.UploadSketch = UploadSketch;
(function (UploadSketch) {
    var Commands;
    (function (Commands) {
        Commands.UPLOAD_SKETCH = {
            id: 'arduino-upload-sketch'
        };
        Commands.UPLOAD_SKETCH_USING_PROGRAMMER = {
            id: 'arduino-upload-sketch-using-programmer'
        };
        Commands.UPLOAD_SKETCH_TOOLBAR = {
            id: 'arduino-upload-sketch--toolbar'
        };
    })(Commands = UploadSketch.Commands || (UploadSketch.Commands = {}));
})(UploadSketch = exports.UploadSketch || (exports.UploadSketch = {}));
exports.UploadSketch = UploadSketch;
//# sourceMappingURL=upload-sketch.js.map