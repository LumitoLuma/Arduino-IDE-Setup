"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SketchControl = void 0;
var inversify_1 = require("inversify");
var common_frontend_contribution_1 = require("@theia/core/lib/browser/common-frontend-contribution");
var application_shell_1 = require("@theia/core/lib/browser/shell/application-shell");
var browser_1 = require("@theia/workspace/lib/browser");
var context_menu_renderer_1 = require("@theia/core/lib/browser/context-menu-renderer");
var disposable_1 = require("@theia/core/lib/common/disposable");
var contribution_1 = require("./contribution");
var arduino_menus_1 = require("../menu/arduino-menus");
var SketchControl = /** @class */ (function (_super) {
    __extends(SketchControl, _super);
    function SketchControl() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toDisposeBeforeCreateNewContextMenu = new disposable_1.DisposableCollection();
        return _this;
    }
    SketchControl_1 = SketchControl;
    SketchControl.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(SketchControl_1.Commands.OPEN_SKETCH_CONTROL__TOOLBAR, {
            isVisible: function (widget) { return _this.shell.getWidgets('main').indexOf(widget) !== -1; },
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var sketch, target, parentElement, _a, mainFileUri, otherSketchFileUris, additionalFileUris, uris, _loop_1, this_1, i, options;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0:
                            this.toDisposeBeforeCreateNewContextMenu.dispose();
                            return [4 /*yield*/, this.sketchServiceClient.currentSketch()];
                        case 1:
                            sketch = _b.sent();
                            if (!sketch) {
                                return [2 /*return*/];
                            }
                            target = document.getElementById(SketchControl_1.Commands.OPEN_SKETCH_CONTROL__TOOLBAR.id);
                            if (!(target instanceof HTMLElement)) {
                                return [2 /*return*/];
                            }
                            parentElement = target.parentElement;
                            if (!parentElement) {
                                return [2 /*return*/];
                            }
                            return [4 /*yield*/, this.sketchService.loadSketch(sketch.uri)];
                        case 2:
                            _a = _b.sent(), mainFileUri = _a.mainFileUri, otherSketchFileUris = _a.otherSketchFileUris, additionalFileUris = _a.additionalFileUris;
                            uris = __spread([mainFileUri], otherSketchFileUris, additionalFileUris);
                            _loop_1 = function (i) {
                                var uri = new contribution_1.URI(uris[i]);
                                var command = { id: "arduino-focus-file--" + uri.toString() };
                                var handler = { execute: function () { return contribution_1.open(_this.openerService, uri); } };
                                this_1.toDisposeBeforeCreateNewContextMenu.push(registry.registerCommand(command, handler));
                                this_1.menuRegistry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT__RESOURCES_GROUP, {
                                    commandId: command.id,
                                    label: this_1.labelProvider.getName(uri),
                                    order: "" + i
                                });
                                this_1.toDisposeBeforeCreateNewContextMenu.push(disposable_1.Disposable.create(function () { return _this.menuRegistry.unregisterMenuAction(command); }));
                            };
                            this_1 = this;
                            for (i = 0; i < uris.length; i++) {
                                _loop_1(i);
                            }
                            options = {
                                menuPath: arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT,
                                anchor: {
                                    x: parentElement.getBoundingClientRect().left,
                                    y: parentElement.getBoundingClientRect().top + parentElement.offsetHeight
                                }
                            };
                            this.contextMenuRenderer.render(options);
                            return [2 /*return*/];
                    }
                });
            }); }
        });
    };
    SketchControl.prototype.registerMenus = function (registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT__MAIN_GROUP, {
            commandId: browser_1.WorkspaceCommands.NEW_FILE.id,
            label: 'New Tab',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT__MAIN_GROUP, {
            commandId: browser_1.WorkspaceCommands.FILE_RENAME.id,
            label: 'Rename',
            order: '1'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT__MAIN_GROUP, {
            commandId: browser_1.WorkspaceCommands.FILE_DELETE.id,
            label: 'Delete',
            order: '2'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT__NAVIGATION_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.PREVIOUS_TAB.id,
            label: 'Previous Tab',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.SKETCH_CONTROL__CONTEXT__NAVIGATION_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.NEXT_TAB.id,
            label: 'Next Tab',
            order: '0'
        });
    };
    SketchControl.prototype.registerKeybindings = function (registry) {
        registry.registerKeybinding({
            command: browser_1.WorkspaceCommands.NEW_FILE.id,
            keybinding: 'CtrlCmd+Shift+N'
        });
        registry.registerKeybinding({
            command: common_frontend_contribution_1.CommonCommands.PREVIOUS_TAB.id,
            keybinding: 'CtrlCmd+Alt+Left' // TODO: check why electron does not show the keybindings in the UI.
        });
        registry.registerKeybinding({
            command: common_frontend_contribution_1.CommonCommands.NEXT_TAB.id,
            keybinding: 'CtrlCmd+Alt+Right'
        });
    };
    SketchControl.prototype.registerToolbarItems = function (registry) {
        registry.registerItem({
            id: SketchControl_1.Commands.OPEN_SKETCH_CONTROL__TOOLBAR.id,
            command: SketchControl_1.Commands.OPEN_SKETCH_CONTROL__TOOLBAR.id
        });
    };
    var SketchControl_1;
    __decorate([
        inversify_1.inject(application_shell_1.ApplicationShell),
        __metadata("design:type", application_shell_1.ApplicationShell)
    ], SketchControl.prototype, "shell", void 0);
    __decorate([
        inversify_1.inject(contribution_1.MenuModelRegistry),
        __metadata("design:type", contribution_1.MenuModelRegistry)
    ], SketchControl.prototype, "menuRegistry", void 0);
    __decorate([
        inversify_1.inject(context_menu_renderer_1.ContextMenuRenderer),
        __metadata("design:type", context_menu_renderer_1.ContextMenuRenderer)
    ], SketchControl.prototype, "contextMenuRenderer", void 0);
    SketchControl = SketchControl_1 = __decorate([
        inversify_1.injectable()
    ], SketchControl);
    return SketchControl;
}(contribution_1.SketchContribution));
exports.SketchControl = SketchControl;
(function (SketchControl) {
    var Commands;
    (function (Commands) {
        Commands.OPEN_SKETCH_CONTROL__TOOLBAR = {
            id: 'arduino-open-sketch-control--toolbar',
            iconClass: 'fa fa-caret-down'
        };
    })(Commands = SketchControl.Commands || (SketchControl.Commands = {}));
})(SketchControl = exports.SketchControl || (exports.SketchControl = {}));
exports.SketchControl = SketchControl;
//# sourceMappingURL=sketch-control.js.map