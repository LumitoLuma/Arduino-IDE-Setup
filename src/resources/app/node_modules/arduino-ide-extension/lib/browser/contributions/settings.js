"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Settings = void 0;
var inversify_1 = require("inversify");
var common_frontend_contribution_1 = require("@theia/core/lib/browser/common-frontend-contribution");
var contribution_1 = require("./contribution");
var arduino_menus_1 = require("../menu/arduino-menus");
var Settings = /** @class */ (function (_super) {
    __extends(Settings, _super);
    function Settings() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Settings_1 = Settings;
    Settings.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(Settings_1.Commands.OPEN_CLI_CONFIG, {
            execute: function () { return _this.configService.getCliConfigFileUri().then(function (uri) { return contribution_1.open(_this.openerService, new contribution_1.URI(uri)); }); }
        });
    };
    Settings.prototype.registerMenus = function (registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__SETTINGS_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.OPEN_PREFERENCES.id,
            label: 'Preferences...',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__SETTINGS_GROUP, {
            commandId: Settings_1.Commands.OPEN_CLI_CONFIG.id,
            label: 'Open CLI Configuration',
            order: '1',
        });
    };
    var Settings_1;
    Settings = Settings_1 = __decorate([
        inversify_1.injectable()
    ], Settings);
    return Settings;
}(contribution_1.SketchContribution));
exports.Settings = Settings;
(function (Settings) {
    var Commands;
    (function (Commands) {
        Commands.OPEN_CLI_CONFIG = {
            id: 'arduino-open-cli-config',
            label: 'Open CLI Configuration',
            category: 'Arduino'
        };
    })(Commands = Settings.Commands || (Settings.Commands = {}));
})(Settings = exports.Settings || (exports.Settings = {}));
exports.Settings = Settings;
//# sourceMappingURL=settings.js.map