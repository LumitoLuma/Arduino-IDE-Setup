"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.EditContributions = void 0;
var inversify_1 = require("inversify");
var common_frontend_contribution_1 = require("@theia/core/lib/browser/common-frontend-contribution");
var clipboard_service_1 = require("@theia/core/lib/browser/clipboard-service");
var preference_service_1 = require("@theia/core/lib/browser/preferences/preference-service");
var monaco_editor_service_1 = require("@theia/monaco/lib/browser/monaco-editor-service");
var editor_preferences_1 = require("@theia/editor/lib/browser/editor-preferences");
var contribution_1 = require("./contribution");
var arduino_menus_1 = require("../menu/arduino-menus");
// TODO: [macOS]: to remove `Start Dictation...` and `Emoji & Symbol` see this thread: https://github.com/electron/electron/issues/8283#issuecomment-269522072
// Depends on https://github.com/eclipse-theia/theia/pull/7964
var EditContributions = /** @class */ (function (_super) {
    __extends(EditContributions, _super);
    function EditContributions() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    EditContributions_1 = EditContributions;
    EditContributions.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(EditContributions_1.Commands.GO_TO_LINE, { execute: function () { return _this.run('editor.action.gotoLine'); } });
        registry.registerCommand(EditContributions_1.Commands.TOGGLE_COMMENT, { execute: function () { return _this.run('editor.action.commentLine'); } });
        registry.registerCommand(EditContributions_1.Commands.INDENT_LINES, { execute: function () { return _this.run('editor.action.indentLines'); } });
        registry.registerCommand(EditContributions_1.Commands.OUTDENT_LINES, { execute: function () { return _this.run('editor.action.outdentLines'); } });
        registry.registerCommand(EditContributions_1.Commands.FIND, { execute: function () { return _this.run('actions.find'); } });
        registry.registerCommand(EditContributions_1.Commands.FIND_NEXT, { execute: function () { return _this.run('actions.findWithSelection'); } });
        registry.registerCommand(EditContributions_1.Commands.FIND_PREVIOUS, { execute: function () { return _this.run('editor.action.nextMatchFindAction'); } });
        registry.registerCommand(EditContributions_1.Commands.USE_FOR_FIND, { execute: function () { return _this.run('editor.action.previousSelectionMatchFindAction'); } });
        registry.registerCommand(EditContributions_1.Commands.INCREASE_FONT_SIZE, {
            execute: function () { return _this.preferences.set('editor.fontSize', _this.preferences.get('editor.fontSize', editor_preferences_1.EDITOR_FONT_DEFAULTS.fontSize) + 1); }
        });
        registry.registerCommand(EditContributions_1.Commands.DECREASE_FONT_SIZE, {
            execute: function () { return _this.preferences.set('editor.fontSize', _this.preferences.get('editor.fontSize', editor_preferences_1.EDITOR_FONT_DEFAULTS.fontSize) - 1); }
        });
        /* Tools */ registry.registerCommand(EditContributions_1.Commands.AUTO_FORMAT, { execute: function () { return _this.run('editor.action.formatDocument'); } });
        registry.registerCommand(EditContributions_1.Commands.COPY_FOR_FORUM, {
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var value;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.currentValue()];
                        case 1:
                            value = _a.sent();
                            if (value !== undefined) {
                                this.clipboardService.writeText("[code]\n" + value + "\n[/code]");
                            }
                            return [2 /*return*/];
                    }
                });
            }); }
        });
        registry.registerCommand(EditContributions_1.Commands.COPY_FOR_GITHUB, {
            execute: function () { return __awaiter(_this, void 0, void 0, function () {
                var value;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.currentValue()];
                        case 1:
                            value = _a.sent();
                            if (value !== undefined) {
                                this.clipboardService.writeText("```cpp\n" + value + "\n```");
                            }
                            return [2 /*return*/];
                    }
                });
            }); }
        });
    };
    EditContributions.prototype.registerMenus = function (registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.CUT.id,
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.COPY.id,
            order: '1'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.COPY_FOR_FORUM.id,
            label: 'Copy for Forum',
            order: '2'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.COPY_FOR_GITHUB.id,
            label: 'Copy for GitHub',
            order: '3'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.PASTE.id,
            order: '4'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: common_frontend_contribution_1.CommonCommands.SELECT_ALL.id,
            order: '5'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__TEXT_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.GO_TO_LINE.id,
            label: 'Go to Line...',
            order: '6'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__CODE_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.TOGGLE_COMMENT.id,
            label: 'Comment/Uncomment',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__CODE_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.INDENT_LINES.id,
            label: 'Increase Indent',
            order: '1'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__CODE_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.OUTDENT_LINES.id,
            label: 'Decrease Indent',
            order: '2'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.INCREASE_FONT_SIZE.id,
            label: 'Increase Font Size',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FONT_CONTROL_GROUP, {
            commandId: EditContributions_1.Commands.DECREASE_FONT_SIZE.id,
            label: 'Decrease Font Size',
            order: '1'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FIND_GROUP, {
            commandId: EditContributions_1.Commands.FIND.id,
            label: 'Find',
            order: '0'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FIND_GROUP, {
            commandId: EditContributions_1.Commands.FIND_NEXT.id,
            label: 'Find Next',
            order: '1'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FIND_GROUP, {
            commandId: EditContributions_1.Commands.FIND_PREVIOUS.id,
            label: 'Find Previous',
            order: '2'
        });
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.EDIT__FIND_GROUP, {
            commandId: EditContributions_1.Commands.USE_FOR_FIND.id,
            label: 'Use Selection for Find',
            order: '3'
        });
        // `Tools`
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.TOOLS__MAIN_GROUP, {
            commandId: EditContributions_1.Commands.AUTO_FORMAT.id,
            label: 'Auto Format',
            order: '0'
        });
    };
    EditContributions.prototype.registerKeybindings = function (registry) {
        registry.registerKeybinding({
            command: EditContributions_1.Commands.COPY_FOR_FORUM.id,
            keybinding: 'CtrlCmd+Shift+C',
            when: 'editorFocus'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.COPY_FOR_GITHUB.id,
            keybinding: 'CtrlCmd+Alt+C',
            when: 'editorFocus'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.GO_TO_LINE.id,
            keybinding: 'CtrlCmd+L',
            when: 'editorFocus'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.TOGGLE_COMMENT.id,
            keybinding: 'CtrlCmd+/',
            when: 'editorFocus'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.INCREASE_FONT_SIZE.id,
            keybinding: 'CtrlCmd+='
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.DECREASE_FONT_SIZE.id,
            keybinding: 'CtrlCmd+-'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.FIND.id,
            keybinding: 'CtrlCmd+F'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.FIND_NEXT.id,
            keybinding: 'CtrlCmd+G'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.FIND_PREVIOUS.id,
            keybinding: 'CtrlCmd+Shift+G'
        });
        registry.registerKeybinding({
            command: EditContributions_1.Commands.USE_FOR_FIND.id,
            keybinding: 'CtrlCmd+E'
        });
        // `Tools`
        registry.registerKeybinding({
            command: EditContributions_1.Commands.AUTO_FORMAT.id,
            keybinding: 'CtrlCmd+T'
        });
    };
    EditContributions.prototype.current = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.codeEditorService.getFocusedCodeEditor() || this.codeEditorService.getActiveCodeEditor()];
            });
        });
    };
    EditContributions.prototype.currentValue = function () {
        var _a;
        return __awaiter(this, void 0, void 0, function () {
            var currentEditor, selection;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.current()];
                    case 1:
                        currentEditor = _b.sent();
                        if (currentEditor) {
                            selection = currentEditor.getSelection();
                            if (!selection || selection.isEmpty()) {
                                return [2 /*return*/, currentEditor.getValue()];
                            }
                            return [2 /*return*/, (_a = currentEditor.getModel()) === null || _a === void 0 ? void 0 : _a.getValueInRange(selection)];
                        }
                        return [2 /*return*/, undefined];
                }
            });
        });
    };
    EditContributions.prototype.run = function (commandId) {
        return __awaiter(this, void 0, void 0, function () {
            var editor, action;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.current()];
                    case 1:
                        editor = _a.sent();
                        if (editor) {
                            action = editor.getAction(commandId);
                            if (action) {
                                return [2 /*return*/, action.run()];
                            }
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    var EditContributions_1;
    __decorate([
        inversify_1.inject(monaco_editor_service_1.MonacoEditorService),
        __metadata("design:type", monaco_editor_service_1.MonacoEditorService)
    ], EditContributions.prototype, "codeEditorService", void 0);
    __decorate([
        inversify_1.inject(clipboard_service_1.ClipboardService),
        __metadata("design:type", Object)
    ], EditContributions.prototype, "clipboardService", void 0);
    __decorate([
        inversify_1.inject(preference_service_1.PreferenceService),
        __metadata("design:type", Object)
    ], EditContributions.prototype, "preferences", void 0);
    EditContributions = EditContributions_1 = __decorate([
        inversify_1.injectable()
    ], EditContributions);
    return EditContributions;
}(contribution_1.Contribution));
exports.EditContributions = EditContributions;
(function (EditContributions) {
    var Commands;
    (function (Commands) {
        Commands.COPY_FOR_FORUM = {
            id: 'arduino-copy-for-forum'
        };
        Commands.COPY_FOR_GITHUB = {
            id: 'arduino-copy-for-github'
        };
        Commands.GO_TO_LINE = {
            id: 'arduino-go-to-line'
        };
        Commands.TOGGLE_COMMENT = {
            id: 'arduino-toggle-comment'
        };
        Commands.INDENT_LINES = {
            id: 'arduino-indent-lines'
        };
        Commands.OUTDENT_LINES = {
            id: 'arduino-outdent-lines'
        };
        Commands.FIND = {
            id: 'arduino-find'
        };
        Commands.FIND_NEXT = {
            id: 'arduino-find-next'
        };
        Commands.FIND_PREVIOUS = {
            id: 'arduino-find-previous'
        };
        Commands.USE_FOR_FIND = {
            id: 'arduino-for-find'
        };
        Commands.INCREASE_FONT_SIZE = {
            id: 'arduino-increase-font-size'
        };
        Commands.DECREASE_FONT_SIZE = {
            id: 'arduino-decrease-font-size'
        };
        Commands.AUTO_FORMAT = {
            id: 'arduino-auto-format' // `Auto Format` should belong to `Tool`.
        };
    })(Commands = EditContributions.Commands || (EditContributions.Commands = {}));
})(EditContributions = exports.EditContributions || (exports.EditContributions = {}));
exports.EditContributions = EditContributions;
//# sourceMappingURL=edit-contributions.js.map