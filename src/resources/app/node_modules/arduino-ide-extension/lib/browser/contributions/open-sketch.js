"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OpenSketch = void 0;
var inversify_1 = require("inversify");
var electron_1 = require("electron");
var browser_1 = require("@theia/core/lib/browser");
var disposable_1 = require("@theia/core/lib/common/disposable");
var arduino_menus_1 = require("../menu/arduino-menus");
var arduino_toolbar_1 = require("../toolbar/arduino-toolbar");
var contribution_1 = require("./contribution");
var OpenSketch = /** @class */ (function (_super) {
    __extends(OpenSketch, _super);
    function OpenSketch() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.toDisposeBeforeCreateNewContextMenu = new disposable_1.DisposableCollection();
        return _this;
    }
    OpenSketch_1 = OpenSketch;
    OpenSketch.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(OpenSketch_1.Commands.OPEN_SKETCH, {
            execute: function (arg) { return contribution_1.Sketch.is(arg) ? _this.openSketch(arg) : _this.openSketch(); }
        });
        registry.registerCommand(OpenSketch_1.Commands.OPEN_SKETCH__TOOLBAR, {
            isVisible: function (widget) { return arduino_toolbar_1.ArduinoToolbar.is(widget) && widget.side === 'left'; },
            execute: function (_, target) { return __awaiter(_this, void 0, void 0, function () {
                var sketches, parentElement, _loop_1, this_1, sketches_1, sketches_1_1, sketch, options;
                var e_1, _a;
                var _this = this;
                return __generator(this, function (_b) {
                    switch (_b.label) {
                        case 0: return [4 /*yield*/, this.sketchService.getSketches()];
                        case 1:
                            sketches = _b.sent();
                            if (!sketches.length) {
                                this.openSketch();
                            }
                            else {
                                this.toDisposeBeforeCreateNewContextMenu.dispose();
                                if (!(target instanceof HTMLElement)) {
                                    return [2 /*return*/];
                                }
                                parentElement = target.parentElement;
                                if (!parentElement) {
                                    return [2 /*return*/];
                                }
                                this.menuRegistry.registerMenuAction(arduino_menus_1.ArduinoMenus.OPEN_SKETCH__CONTEXT__OPEN_GROUP, {
                                    commandId: OpenSketch_1.Commands.OPEN_SKETCH.id,
                                    label: 'Open...'
                                });
                                this.toDisposeBeforeCreateNewContextMenu.push(disposable_1.Disposable.create(function () { return _this.menuRegistry.unregisterMenuAction(OpenSketch_1.Commands.OPEN_SKETCH); }));
                                _loop_1 = function (sketch) {
                                    var command = { id: "arduino-open-sketch--" + sketch.uri };
                                    var handler = { execute: function () { return _this.openSketch(sketch); } };
                                    this_1.toDisposeBeforeCreateNewContextMenu.push(registry.registerCommand(command, handler));
                                    this_1.menuRegistry.registerMenuAction(arduino_menus_1.ArduinoMenus.OPEN_SKETCH__CONTEXT__RECENT_GROUP, {
                                        commandId: command.id,
                                        label: sketch.name
                                    });
                                    this_1.toDisposeBeforeCreateNewContextMenu.push(disposable_1.Disposable.create(function () { return _this.menuRegistry.unregisterMenuAction(command); }));
                                };
                                this_1 = this;
                                try {
                                    for (sketches_1 = __values(sketches), sketches_1_1 = sketches_1.next(); !sketches_1_1.done; sketches_1_1 = sketches_1.next()) {
                                        sketch = sketches_1_1.value;
                                        _loop_1(sketch);
                                    }
                                }
                                catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                finally {
                                    try {
                                        if (sketches_1_1 && !sketches_1_1.done && (_a = sketches_1.return)) _a.call(sketches_1);
                                    }
                                    finally { if (e_1) throw e_1.error; }
                                }
                                options = {
                                    menuPath: arduino_menus_1.ArduinoMenus.OPEN_SKETCH__CONTEXT,
                                    anchor: {
                                        x: parentElement.getBoundingClientRect().left,
                                        y: parentElement.getBoundingClientRect().top + parentElement.offsetHeight
                                    }
                                };
                                this.contextMenuRenderer.render(options);
                            }
                            return [2 /*return*/];
                    }
                });
            }); }
        });
    };
    OpenSketch.prototype.registerMenus = function (registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__SKETCH_GROUP, {
            commandId: OpenSketch_1.Commands.OPEN_SKETCH.id,
            label: 'Open...',
            order: '1'
        });
    };
    OpenSketch.prototype.registerKeybindings = function (registry) {
        registry.registerKeybinding({
            command: OpenSketch_1.Commands.OPEN_SKETCH.id,
            keybinding: 'CtrlCmd+O'
        });
    };
    OpenSketch.prototype.registerToolbarItems = function (registry) {
        registry.registerItem({
            id: OpenSketch_1.Commands.OPEN_SKETCH__TOOLBAR.id,
            command: OpenSketch_1.Commands.OPEN_SKETCH__TOOLBAR.id,
            tooltip: 'Open',
            priority: 4
        });
    };
    OpenSketch.prototype.openSketch = function (toOpen) {
        if (toOpen === void 0) { toOpen = this.selectSketch(); }
        return __awaiter(this, void 0, void 0, function () {
            var sketch;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, toOpen];
                    case 1:
                        sketch = _a.sent();
                        if (sketch) {
                            this.workspaceService.open(new contribution_1.URI(sketch.uri));
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    OpenSketch.prototype.selectSketch = function () {
        return __awaiter(this, void 0, void 0, function () {
            var config, defaultPath, filePaths, sketchFilePath, sketchFileUri, sketch, name_1, nameWithExt, response, newSketchUri, exists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.configService.getConfiguration()];
                    case 1:
                        config = _a.sent();
                        return [4 /*yield*/, this.fileSystem.getFsPath(config.sketchDirUri)];
                    case 2:
                        defaultPath = _a.sent();
                        return [4 /*yield*/, electron_1.remote.dialog.showOpenDialog({
                                defaultPath: defaultPath,
                                properties: ['createDirectory', 'openFile'],
                                filters: [
                                    {
                                        name: 'Sketch',
                                        extensions: ['ino']
                                    }
                                ]
                            })];
                    case 3:
                        filePaths = (_a.sent()).filePaths;
                        if (!filePaths.length) {
                            return [2 /*return*/, undefined];
                        }
                        if (filePaths.length > 1) {
                            this.logger.warn("Multiple sketches were selected: " + filePaths + ". Using the first one.");
                        }
                        sketchFilePath = filePaths[0];
                        return [4 /*yield*/, this.fileSystemExt.getUri(sketchFilePath)];
                    case 4:
                        sketchFileUri = _a.sent();
                        return [4 /*yield*/, this.sketchService.getSketchFolder(sketchFileUri)];
                    case 5:
                        sketch = _a.sent();
                        if (sketch) {
                            return [2 /*return*/, sketch];
                        }
                        if (!sketchFileUri.endsWith('.ino')) return [3 /*break*/, 12];
                        name_1 = new contribution_1.URI(sketchFileUri).path.name;
                        nameWithExt = this.labelProvider.getName(new contribution_1.URI(sketchFileUri));
                        return [4 /*yield*/, electron_1.remote.dialog.showMessageBox({
                                title: 'Moving',
                                type: 'question',
                                buttons: ['Cancel', 'OK'],
                                message: "The file \"" + nameWithExt + "\" needs to be inside a sketch folder named as \"" + name_1 + "\".\nCreate this folder, move the file, and continue?"
                            })];
                    case 6:
                        response = (_a.sent()).response;
                        if (!(response === 1)) return [3 /*break*/, 12];
                        newSketchUri = new contribution_1.URI(sketchFileUri).parent.resolve(name_1);
                        return [4 /*yield*/, this.fileSystem.exists(newSketchUri.toString())];
                    case 7:
                        exists = _a.sent();
                        if (!exists) return [3 /*break*/, 9];
                        return [4 /*yield*/, electron_1.remote.dialog.showMessageBox({
                                type: 'error',
                                title: 'Error',
                                message: "A folder named \"" + name_1 + "\" already exists. Can't open sketch."
                            })];
                    case 8:
                        _a.sent();
                        return [2 /*return*/, undefined];
                    case 9: return [4 /*yield*/, this.fileSystem.createFolder(newSketchUri.toString())];
                    case 10:
                        _a.sent();
                        return [4 /*yield*/, this.fileSystem.move(sketchFileUri, newSketchUri.resolve(nameWithExt).toString())];
                    case 11:
                        _a.sent();
                        return [2 /*return*/, this.sketchService.getSketchFolder(newSketchUri.toString())];
                    case 12: return [2 /*return*/];
                }
            });
        });
    };
    var OpenSketch_1;
    __decorate([
        inversify_1.inject(contribution_1.MenuModelRegistry),
        __metadata("design:type", contribution_1.MenuModelRegistry)
    ], OpenSketch.prototype, "menuRegistry", void 0);
    __decorate([
        inversify_1.inject(browser_1.ContextMenuRenderer),
        __metadata("design:type", browser_1.ContextMenuRenderer)
    ], OpenSketch.prototype, "contextMenuRenderer", void 0);
    OpenSketch = OpenSketch_1 = __decorate([
        inversify_1.injectable()
    ], OpenSketch);
    return OpenSketch;
}(contribution_1.SketchContribution));
exports.OpenSketch = OpenSketch;
(function (OpenSketch) {
    var Commands;
    (function (Commands) {
        Commands.OPEN_SKETCH = {
            id: 'arduino-open-sketch'
        };
        Commands.OPEN_SKETCH__TOOLBAR = {
            id: 'arduino-open-sketch--toolbar'
        };
    })(Commands = OpenSketch.Commands || (OpenSketch.Commands = {}));
})(OpenSketch = exports.OpenSketch || (exports.OpenSketch = {}));
exports.OpenSketch = OpenSketch;
//# sourceMappingURL=open-sketch.js.map