"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.QuitApp = void 0;
var inversify_1 = require("inversify");
var electron_1 = require("electron");
var os_1 = require("@theia/core/lib/common/os");
var contribution_1 = require("./contribution");
var arduino_menus_1 = require("../menu/arduino-menus");
var QuitApp = /** @class */ (function (_super) {
    __extends(QuitApp, _super);
    function QuitApp() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    QuitApp_1 = QuitApp;
    QuitApp.prototype.registerCommands = function (registry) {
        if (!os_1.isOSX) {
            registry.registerCommand(QuitApp_1.Commands.QUIT_APP, {
                execute: function () { return electron_1.remote.app.quit(); }
            });
        }
    };
    QuitApp.prototype.registerMenus = function (registry) {
        // On macOS we will get the `Quit ${YOUR_APP_NAME}` menu item natively, no need to duplicate it. 
        if (!os_1.isOSX) {
            registry.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__QUIT_GROUP, {
                commandId: QuitApp_1.Commands.QUIT_APP.id,
                label: 'Quit',
                order: '0'
            });
        }
    };
    QuitApp.prototype.registerKeybindings = function (registry) {
        if (!os_1.isOSX) {
            registry.registerKeybinding({
                command: QuitApp_1.Commands.QUIT_APP.id,
                keybinding: 'CtrlCmd+Q'
            });
        }
    };
    var QuitApp_1;
    QuitApp = QuitApp_1 = __decorate([
        inversify_1.injectable()
    ], QuitApp);
    return QuitApp;
}(contribution_1.Contribution));
exports.QuitApp = QuitApp;
(function (QuitApp) {
    var Commands;
    (function (Commands) {
        Commands.QUIT_APP = {
            id: 'arduino-quit-app'
        };
    })(Commands = QuitApp.Commands || (QuitApp.Commands = {}));
})(QuitApp = exports.QuitApp || (exports.QuitApp = {}));
exports.QuitApp = QuitApp;
//# sourceMappingURL=quit-app.js.map