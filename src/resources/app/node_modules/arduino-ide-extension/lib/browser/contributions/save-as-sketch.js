"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SaveAsSketch = void 0;
var inversify_1 = require("inversify");
var electron_1 = require("electron");
var dateFormat = require("dateformat");
var arduino_menus_1 = require("../menu/arduino-menus");
var contribution_1 = require("./contribution");
var SaveAsSketch = /** @class */ (function (_super) {
    __extends(SaveAsSketch, _super);
    function SaveAsSketch() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    SaveAsSketch_1 = SaveAsSketch;
    SaveAsSketch.prototype.registerCommands = function (registry) {
        var _this = this;
        registry.registerCommand(SaveAsSketch_1.Commands.SAVE_AS_SKETCH, {
            execute: function (args) { return _this.saveAs(args); }
        });
    };
    SaveAsSketch.prototype.registerMenus = function (registry) {
        registry.registerMenuAction(arduino_menus_1.ArduinoMenus.FILE__SKETCH_GROUP, {
            commandId: SaveAsSketch_1.Commands.SAVE_AS_SKETCH.id,
            label: 'Save As...',
            order: '7'
        });
    };
    SaveAsSketch.prototype.registerKeybindings = function (registry) {
        registry.registerKeybinding({
            command: SaveAsSketch_1.Commands.SAVE_AS_SKETCH.id,
            keybinding: 'CtrlCmd+Shift+S'
        });
    };
    /**
     * Resolves `true` if the sketch was successfully saved as something.
     */
    SaveAsSketch.prototype.saveAs = function (_a) {
        var _b = _a === void 0 ? SaveAsSketch_1.Options.DEFAULT : _a, execOnlyIfTemp = _b.execOnlyIfTemp, openAfterMove = _b.openAfterMove, wipeOriginal = _b.wipeOriginal;
        return __awaiter(this, void 0, void 0, function () {
            var sketch, isTemp, sketchDirUri, _c, exists, defaultUri, defaultPath, _d, filePath, canceled, destinationUri, workspaceUri;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0: return [4 /*yield*/, this.sketchServiceClient.currentSketch()];
                    case 1:
                        sketch = _e.sent();
                        if (!sketch) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.sketchService.isTemp(sketch)];
                    case 2:
                        isTemp = _e.sent();
                        if (!isTemp && !!execOnlyIfTemp) {
                            return [2 /*return*/, false];
                        }
                        _c = contribution_1.URI.bind;
                        return [4 /*yield*/, this.configService.getConfiguration()];
                    case 3:
                        sketchDirUri = new (_c.apply(contribution_1.URI, [void 0, (_e.sent()).sketchDirUri]))();
                        return [4 /*yield*/, this.fileSystem.exists(sketchDirUri.resolve(sketch.name).toString())];
                    case 4:
                        exists = _e.sent();
                        defaultUri = exists
                            ? sketchDirUri.resolve(sketchDirUri.resolve(sketch.name + "_copy_" + dateFormat(new Date(), 'yyyymmddHHMMss')).toString())
                            : sketchDirUri.resolve(sketch.name);
                        return [4 /*yield*/, this.fileSystem.getFsPath(defaultUri.toString())];
                    case 5:
                        defaultPath = _e.sent();
                        return [4 /*yield*/, electron_1.remote.dialog.showSaveDialog({ title: 'Save sketch folder as...', defaultPath: defaultPath })];
                    case 6:
                        _d = _e.sent(), filePath = _d.filePath, canceled = _d.canceled;
                        if (!filePath || canceled) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.fileSystemExt.getUri(filePath)];
                    case 7:
                        destinationUri = _e.sent();
                        if (!destinationUri) {
                            return [2 /*return*/, false];
                        }
                        return [4 /*yield*/, this.sketchService.copy(sketch, { destinationUri: destinationUri })];
                    case 8:
                        workspaceUri = _e.sent();
                        if (!(workspaceUri && openAfterMove)) return [3 /*break*/, 11];
                        if (!wipeOriginal) return [3 /*break*/, 10];
                        return [4 /*yield*/, this.fileSystem.delete(sketch.uri)];
                    case 9:
                        _e.sent();
                        _e.label = 10;
                    case 10:
                        this.workspaceService.open(new contribution_1.URI(workspaceUri), { preserveWindow: true });
                        _e.label = 11;
                    case 11: return [2 /*return*/, !!workspaceUri];
                }
            });
        });
    };
    var SaveAsSketch_1;
    SaveAsSketch = SaveAsSketch_1 = __decorate([
        inversify_1.injectable()
    ], SaveAsSketch);
    return SaveAsSketch;
}(contribution_1.SketchContribution));
exports.SaveAsSketch = SaveAsSketch;
(function (SaveAsSketch) {
    var Commands;
    (function (Commands) {
        Commands.SAVE_AS_SKETCH = {
            id: 'arduino-save-as-sketch'
        };
    })(Commands = SaveAsSketch.Commands || (SaveAsSketch.Commands = {}));
    var Options;
    (function (Options) {
        Options.DEFAULT = {
            execOnlyIfTemp: false,
            openAfterMove: true,
            wipeOriginal: false
        };
    })(Options = SaveAsSketch.Options || (SaveAsSketch.Options = {}));
})(SaveAsSketch = exports.SaveAsSketch || (exports.SaveAsSketch = {}));
exports.SaveAsSketch = SaveAsSketch;
//# sourceMappingURL=save-as-sketch.js.map