"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BoardsServiceImpl = void 0;
var inversify_1 = require("inversify");
var logger_1 = require("@theia/core/lib/common/logger");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var protocol_1 = require("../common/protocol");
var core_pb_1 = require("./cli-protocol/commands/core_pb");
var core_client_provider_1 = require("./core-client-provider");
var board_pb_1 = require("./cli-protocol/commands/board_pb");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var installable_1 = require("../common/protocol/installable");
var upload_pb_1 = require("./cli-protocol/commands/upload_pb");
var BoardsServiceImpl = /** @class */ (function () {
    function BoardsServiceImpl() {
        this.discoveryInitialized = false;
        /**
         * Poor man's serial discovery:
         * Stores the state of the currently discovered and attached boards.
         * This state is updated via periodical polls. If there diff, a change event will be sent out to the frontend.
         */
        this.attachedBoards = [];
        this.availablePorts = [];
        this.started = new promise_util_1.Deferred();
    }
    BoardsServiceImpl.prototype.init = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                this.discoveryTimer = setInterval(function () {
                    _this.discoveryLogger.trace('Discovering attached boards and available ports...');
                    _this.doGetAttachedBoardsAndAvailablePorts()
                        .then(function (_a) {
                        var boards = _a.boards, ports = _a.ports;
                        var update = function (oldBoards, newBoards, oldPorts, newPorts, message) {
                            _this.attachedBoards = newBoards;
                            _this.availablePorts = newPorts;
                            _this.discoveryLogger.info(message + " - Discovered boards: " + JSON.stringify(newBoards) + " and available ports: " + JSON.stringify(newPorts));
                            if (_this.client) {
                                _this.client.notifyAttachedBoardsChanged({
                                    oldState: {
                                        boards: oldBoards,
                                        ports: oldPorts
                                    },
                                    newState: {
                                        boards: newBoards,
                                        ports: newPorts
                                    }
                                });
                            }
                        };
                        var sortedBoards = boards.sort(protocol_1.Board.compare);
                        var sortedPorts = ports.sort(protocol_1.Port.compare);
                        _this.discoveryLogger.trace("Discovery done. Boards: " + JSON.stringify(sortedBoards) + ". Ports: " + sortedPorts);
                        if (!_this.discoveryInitialized) {
                            update([], sortedBoards, [], sortedPorts, 'Initialized attached boards and available ports.');
                            _this.discoveryInitialized = true;
                            _this.started.resolve();
                        }
                        else {
                            Promise.all([
                                _this.getAttachedBoards(),
                                _this.getAvailablePorts()
                            ]).then(function (_a) {
                                var _b = __read(_a, 2), currentBoards = _b[0], currentPorts = _b[1];
                                _this.discoveryLogger.trace("Updating discovered boards... " + JSON.stringify(currentBoards));
                                if (currentBoards.length !== sortedBoards.length || currentPorts.length !== sortedPorts.length) {
                                    update(currentBoards, sortedBoards, currentPorts, sortedPorts, 'Updated discovered boards and available ports.');
                                    return;
                                }
                                // `currentBoards` is already sorted.
                                for (var i = 0; i < sortedBoards.length; i++) {
                                    if (protocol_1.Board.compare(sortedBoards[i], currentBoards[i]) !== 0) {
                                        update(currentBoards, sortedBoards, currentPorts, sortedPorts, 'Updated discovered boards.');
                                        return;
                                    }
                                }
                                for (var i = 0; i < sortedPorts.length; i++) {
                                    if (protocol_1.Port.compare(sortedPorts[i], currentPorts[i]) !== 0) {
                                        update(currentBoards, sortedBoards, currentPorts, sortedPorts, 'Updated discovered boards.');
                                        return;
                                    }
                                }
                                _this.discoveryLogger.trace('No new boards were discovered.');
                            });
                        }
                    })
                        .catch(function (error) {
                        _this.logger.error('Unexpected error when polling boards and ports.', error);
                    });
                }, 1000);
                return [2 /*return*/];
            });
        });
    };
    BoardsServiceImpl.prototype.setClient = function (client) {
        this.client = client;
    };
    BoardsServiceImpl.prototype.dispose = function () {
        this.logger.info('>>> Disposing boards service...');
        if (this.discoveryTimer !== undefined) {
            clearInterval(this.discoveryTimer);
        }
        this.logger.info('<<< Disposed boards service.');
        this.client = undefined;
    };
    BoardsServiceImpl.prototype.getAttachedBoards = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.started.promise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.attachedBoards];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.getAvailablePorts = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.started.promise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.availablePorts];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.doGetAttachedBoardsAndAvailablePorts = function () {
        return __awaiter(this, void 0, void 0, function () {
            var boards, ports, coreClient, client, instance, req, resp, portsList, portsList_1, portsList_1_1, portList, protocol, address, _a, _b, board, name_1, fqbn, port;
            var e_1, _c, e_2, _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        boards = [];
                        ports = [];
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _e.sent();
                        if (!coreClient) {
                            return [2 /*return*/, { boards: boards, ports: ports }];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        req = new board_pb_1.BoardListReq();
                        req.setInstance(instance);
                        return [4 /*yield*/, new Promise(function (resolve) {
                                client.boardList(req, function (err, resp) {
                                    if (err) {
                                        _this.logger.error(err);
                                        resolve(undefined);
                                        return;
                                    }
                                    resolve(resp);
                                });
                            })];
                    case 2:
                        resp = _e.sent();
                        if (!resp) {
                            return [2 /*return*/, { boards: boards, ports: ports }];
                        }
                        portsList = resp.getPortsList();
                        try {
                            // TODO: remove unknown board mocking!
                            // You also have to manually import `DetectedPort`.
                            // const unknownPortList = new DetectedPort();
                            // unknownPortList.setAddress(platform() === 'win32' ? 'COM3' : platform() === 'darwin' ? '/dev/cu.usbmodem94401' : '/dev/ttyACM0');
                            // unknownPortList.setProtocol('serial');
                            // unknownPortList.setProtocolLabel('Serial Port (USB)');
                            // portsList.push(unknownPortList);
                            for (portsList_1 = __values(portsList), portsList_1_1 = portsList_1.next(); !portsList_1_1.done; portsList_1_1 = portsList_1.next()) {
                                portList = portsList_1_1.value;
                                protocol = protocol_1.Port.Protocol.toProtocol(portList.getProtocol());
                                address = portList.getAddress();
                                // Available ports can exist with unknown attached boards.
                                // The `BoardListResp` looks like this for a known attached board:
                                // [
                                //     {
                                //         'address': 'COM10',
                                //         'protocol': 'serial',
                                //         'protocol_label': 'Serial Port (USB)',
                                //         'boards': [
                                //             {
                                //                 'name': 'Arduino MKR1000',
                                //                 'FQBN': 'arduino:samd:mkr1000'
                                //             }
                                //         ]
                                //     }
                                // ]
                                // And the `BoardListResp` looks like this for an unknown board:
                                // [
                                //     {
                                //         'address': 'COM9',
                                //         'protocol': 'serial',
                                //         'protocol_label': 'Serial Port (USB)',
                                //     }
                                // ]
                                ports.push({ protocol: protocol, address: address });
                                try {
                                    for (_a = (e_2 = void 0, __values(portList.getBoardsList())), _b = _a.next(); !_b.done; _b = _a.next()) {
                                        board = _b.value;
                                        name_1 = board.getName() || 'unknown';
                                        fqbn = board.getFqbn();
                                        port = { address: address, protocol: protocol };
                                        boards.push({ name: name_1, fqbn: fqbn, port: port });
                                    }
                                }
                                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                                finally {
                                    try {
                                        if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                                    }
                                    finally { if (e_2) throw e_2.error; }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (portsList_1_1 && !portsList_1_1.done && (_c = portsList_1.return)) _c.call(portsList_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        // TODO: remove mock board!
                        // boards.push(...[
                        //     <AttachedSerialBoard>{ name: 'Arduino/Genuino Uno', fqbn: 'arduino:avr:uno', port: '/dev/cu.usbmodem14201' },
                        //     <AttachedSerialBoard>{ name: 'Arduino/Genuino Uno', fqbn: 'arduino:avr:uno', port: '/dev/cu.usbmodem142xx' },
                        // ]);
                        return [2 /*return*/, { boards: boards, ports: ports }];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.getBoardDetails = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var coreClient, client, instance, fqbn, detailsReq, detailsResp, requiredTools, configOptions, listReq, listResp, programmers;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _a.sent();
                        if (!coreClient) {
                            throw new Error("Cannot acquire core client provider.");
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        fqbn = options.fqbn;
                        detailsReq = new board_pb_1.BoardDetailsReq();
                        detailsReq.setInstance(instance);
                        detailsReq.setFqbn(fqbn);
                        return [4 /*yield*/, new Promise(function (resolve, reject) { return client.boardDetails(detailsReq, function (err, resp) {
                                if (err) {
                                    reject(err);
                                    return;
                                }
                                resolve(resp);
                            }); })];
                    case 2:
                        detailsResp = _a.sent();
                        requiredTools = detailsResp.getToolsdependenciesList().map(function (t) { return ({
                            name: t.getName(),
                            packager: t.getPackager(),
                            version: t.getVersion()
                        }); });
                        configOptions = detailsResp.getConfigOptionsList().map(function (c) { return ({
                            label: c.getOptionLabel(),
                            option: c.getOption(),
                            values: c.getValuesList().map(function (v) { return ({
                                value: v.getValue(),
                                label: v.getValueLabel(),
                                selected: v.getSelected()
                            }); })
                        }); });
                        listReq = new upload_pb_1.ListProgrammersAvailableForUploadReq();
                        listReq.setInstance(instance);
                        listReq.setFqbn(fqbn);
                        return [4 /*yield*/, new Promise(function (resolve, reject) { return client.listProgrammersAvailableForUpload(listReq, function (err, resp) {
                                if (err) {
                                    reject(err);
                                    return;
                                }
                                resolve(resp);
                            }); })];
                    case 3:
                        listResp = _a.sent();
                        programmers = listResp.getProgrammersList().map(function (p) { return ({
                            id: p.getId(),
                            name: p.getName(),
                            platform: p.getPlatform()
                        }); });
                        return [2 /*return*/, {
                                fqbn: fqbn,
                                requiredTools: requiredTools,
                                configOptions: configOptions,
                                programmers: programmers
                            }];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.getBoardPackage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var expectedId, packages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expectedId = options.id;
                        if (!expectedId) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, this.search({ query: expectedId })];
                    case 1:
                        packages = _a.sent();
                        return [2 /*return*/, packages.find(function (_a) {
                                var id = _a.id;
                                return id === expectedId;
                            })];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.getContainerBoardPackage = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var expectedFqbn, packages;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        expectedFqbn = options.fqbn;
                        if (!expectedFqbn) {
                            return [2 /*return*/, undefined];
                        }
                        return [4 /*yield*/, this.search({})];
                    case 1:
                        packages = _a.sent();
                        return [2 /*return*/, packages.find(function (_a) {
                                var boards = _a.boards;
                                return boards.some(function (_a) {
                                    var fqbn = _a.fqbn;
                                    return fqbn === expectedFqbn;
                                });
                            })];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.allBoards = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var results;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.search(options)];
                    case 1:
                        results = _a.sent();
                        return [2 /*return*/, results.map(function (item) { return item.boards.map(function (board) { return (__assign(__assign({}, board), { packageName: item.name })); }); })
                                .reduce(function (acc, curr) { return acc.concat(curr); }, [])];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.search = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var coreClient, client, instance, installedPlatformsReq, installedPlatformsResp, installedPlatforms, req, resp, packages, toPackage, groupedById, _a, _b, platform, id, installedAwareVersionComparator, _c, _d, id, _e, _f, id, _g, _h, platform, id_1, pkg;
            var e_3, _j, e_4, _k, e_5, _l, e_6, _m;
            return __generator(this, function (_o) {
                switch (_o.label) {
                    case 0: return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _o.sent();
                        if (!coreClient) {
                            return [2 /*return*/, []];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        installedPlatformsReq = new core_pb_1.PlatformListReq();
                        installedPlatformsReq.setInstance(instance);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                return client.platformList(installedPlatformsReq, function (err, resp) { return (!!err ? reject : resolve)(!!err ? err : resp); });
                            })];
                    case 2:
                        installedPlatformsResp = _o.sent();
                        installedPlatforms = installedPlatformsResp.getInstalledPlatformList();
                        req = new core_pb_1.PlatformSearchReq();
                        req.setSearchArgs(options.query || '');
                        req.setAllVersions(true);
                        req.setInstance(instance);
                        return [4 /*yield*/, new Promise(function (resolve, reject) { return client.platformSearch(req, function (err, resp) { return (!!err ? reject : resolve)(!!err ? err : resp); }); })];
                    case 3:
                        resp = _o.sent();
                        packages = new Map();
                        toPackage = function (platform) {
                            var installedVersion;
                            var matchingPlatform = installedPlatforms.find(function (ip) { return ip.getId() === platform.getId(); });
                            if (!!matchingPlatform) {
                                installedVersion = matchingPlatform.getInstalled();
                            }
                            return {
                                id: platform.getId(),
                                name: platform.getName(),
                                author: platform.getMaintainer(),
                                availableVersions: [platform.getLatest()],
                                description: platform.getBoardsList().map(function (b) { return b.getName(); }).join(', '),
                                installable: true,
                                summary: 'Boards included in this package:',
                                installedVersion: installedVersion,
                                boards: platform.getBoardsList().map(function (b) { return ({ name: b.getName(), fqbn: b.getFqbn() }); }),
                                moreInfoLink: platform.getWebsite()
                            };
                        };
                        groupedById = new Map();
                        try {
                            for (_a = __values(resp.getSearchOutputList()), _b = _a.next(); !_b.done; _b = _a.next()) {
                                platform = _b.value;
                                id = platform.getId();
                                if (groupedById.has(id)) {
                                    groupedById.get(id).push(platform);
                                }
                                else {
                                    groupedById.set(id, [platform]);
                                }
                            }
                        }
                        catch (e_3_1) { e_3 = { error: e_3_1 }; }
                        finally {
                            try {
                                if (_b && !_b.done && (_j = _a.return)) _j.call(_a);
                            }
                            finally { if (e_3) throw e_3.error; }
                        }
                        installedAwareVersionComparator = function (left, right) {
                            // XXX: we cannot rely on `platform.getInstalled()`, it is always an empty string.
                            var leftInstalled = !!installedPlatforms.find(function (ip) { return ip.getId() === left.getId() && ip.getInstalled() === left.getLatest(); });
                            var rightInstalled = !!installedPlatforms.find(function (ip) { return ip.getId() === right.getId() && ip.getInstalled() === right.getLatest(); });
                            if (leftInstalled && !rightInstalled) {
                                return -1;
                            }
                            if (!leftInstalled && rightInstalled) {
                                return 1;
                            }
                            return installable_1.Installable.Version.COMPARATOR(left.getLatest(), right.getLatest()); // Higher version comes first.
                        };
                        try {
                            for (_c = __values(groupedById.keys()), _d = _c.next(); !_d.done; _d = _c.next()) {
                                id = _d.value;
                                groupedById.get(id).sort(installedAwareVersionComparator);
                            }
                        }
                        catch (e_4_1) { e_4 = { error: e_4_1 }; }
                        finally {
                            try {
                                if (_d && !_d.done && (_k = _c.return)) _k.call(_c);
                            }
                            finally { if (e_4) throw e_4.error; }
                        }
                        try {
                            for (_e = __values(groupedById.keys()), _f = _e.next(); !_f.done; _f = _e.next()) {
                                id = _f.value;
                                try {
                                    for (_g = (e_6 = void 0, __values(groupedById.get(id))), _h = _g.next(); !_h.done; _h = _g.next()) {
                                        platform = _h.value;
                                        id_1 = platform.getId();
                                        pkg = packages.get(id_1);
                                        if (pkg) {
                                            pkg.availableVersions.push(platform.getLatest());
                                            pkg.availableVersions.sort(installable_1.Installable.Version.COMPARATOR);
                                        }
                                        else {
                                            packages.set(id_1, toPackage(platform));
                                        }
                                    }
                                }
                                catch (e_6_1) { e_6 = { error: e_6_1 }; }
                                finally {
                                    try {
                                        if (_h && !_h.done && (_m = _g.return)) _m.call(_g);
                                    }
                                    finally { if (e_6) throw e_6.error; }
                                }
                            }
                        }
                        catch (e_5_1) { e_5 = { error: e_5_1 }; }
                        finally {
                            try {
                                if (_f && !_f.done && (_l = _e.return)) _l.call(_e);
                            }
                            finally { if (e_5) throw e_5.error; }
                        }
                        return [2 /*return*/, __spread(packages.values())];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.install = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var pkg, version, coreClient, client, instance, _a, platform, architecture, req, resp, packages, updatedPackage;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pkg = options.item;
                        version = !!options.version ? options.version : pkg.availableVersions[0];
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _b.sent();
                        if (!coreClient) {
                            return [2 /*return*/];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        _a = __read(pkg.id.split(':'), 2), platform = _a[0], architecture = _a[1];
                        req = new core_pb_1.PlatformInstallReq();
                        req.setInstance(instance);
                        req.setArchitecture(architecture);
                        req.setPlatformPackage(platform);
                        req.setVersion(version);
                        console.info('Starting board installation', pkg);
                        resp = client.platformInstall(req);
                        resp.on('data', function (r) {
                            var prog = r.getProgress();
                            if (prog && prog.getFile()) {
                                _this.toolOutputService.append({ tool: 'board download', chunk: "downloading " + prog.getFile() + "\n" });
                            }
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                resp.on('end', resolve);
                                resp.on('error', reject);
                            })];
                    case 2:
                        _b.sent();
                        if (!this.client) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.search({})];
                    case 3:
                        packages = _b.sent();
                        updatedPackage = packages.find(function (_a) {
                            var id = _a.id;
                            return id === pkg.id;
                        }) || pkg;
                        this.client.notifyBoardInstalled({ pkg: updatedPackage });
                        _b.label = 4;
                    case 4:
                        console.info('Board installation done', pkg);
                        return [2 /*return*/];
                }
            });
        });
    };
    BoardsServiceImpl.prototype.uninstall = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var pkg, coreClient, client, instance, _a, platform, architecture, req, logged, resp;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        pkg = options.item;
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _b.sent();
                        if (!coreClient) {
                            return [2 /*return*/];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        _a = __read(pkg.id.split(':'), 2), platform = _a[0], architecture = _a[1];
                        req = new core_pb_1.PlatformUninstallReq();
                        req.setInstance(instance);
                        req.setArchitecture(architecture);
                        req.setPlatformPackage(platform);
                        console.info('Starting board uninstallation', pkg);
                        logged = false;
                        resp = client.platformUninstall(req);
                        resp.on('data', function (_) {
                            if (!logged) {
                                _this.toolOutputService.append({ tool: 'board uninstall', chunk: "uninstalling " + pkg.id + "\n" });
                                logged = true;
                            }
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                resp.on('end', resolve);
                                resp.on('error', reject);
                            })];
                    case 2:
                        _b.sent();
                        if (this.client) {
                            // Here, unlike at `install` we send out the argument `pkg`. Otherwise, we would not know about the board FQBN.
                            this.client.notifyBoardUninstalled({ pkg: pkg });
                        }
                        console.info('Board uninstallation done', pkg);
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], BoardsServiceImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        inversify_1.named('discovery'),
        __metadata("design:type", Object)
    ], BoardsServiceImpl.prototype, "discoveryLogger", void 0);
    __decorate([
        inversify_1.inject(core_client_provider_1.CoreClientProvider),
        __metadata("design:type", core_client_provider_1.CoreClientProvider)
    ], BoardsServiceImpl.prototype, "coreClientProvider", void 0);
    __decorate([
        inversify_1.inject(tool_output_service_1.ToolOutputServiceServer),
        __metadata("design:type", Object)
    ], BoardsServiceImpl.prototype, "toolOutputService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", Promise)
    ], BoardsServiceImpl.prototype, "init", null);
    BoardsServiceImpl = __decorate([
        inversify_1.injectable()
    ], BoardsServiceImpl);
    return BoardsServiceImpl;
}());
exports.BoardsServiceImpl = BoardsServiceImpl;
//# sourceMappingURL=boards-service-impl.js.map