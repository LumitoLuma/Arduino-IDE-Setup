"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var filesystem_1 = require("@theia/filesystem/lib/common/filesystem");
var compile_pb_1 = require("./cli-protocol/commands/compile_pb");
var boards_service_1 = require("../common/protocol/boards-service");
var core_client_provider_1 = require("./core-client-provider");
var path = require("path");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var upload_pb_1 = require("./cli-protocol/commands/upload_pb");
var CoreServiceImpl = /** @class */ (function () {
    function CoreServiceImpl() {
    }
    CoreServiceImpl.prototype.init = function () {
        var _this = this;
        this.coreClientProvider.onIndexUpdated(function () {
            if (_this.client) {
                _this.client.notifyIndexUpdated();
            }
        });
    };
    CoreServiceImpl.prototype.compile = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var sketchUri, fqbn, sketchFilePath, sketchpath, coreClient, client, instance, compilerReq, result, e_1;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        console.log('compile', options);
                        sketchUri = options.sketchUri, fqbn = options.fqbn;
                        return [4 /*yield*/, this.fileSystem.getFsPath(sketchUri)];
                    case 1:
                        sketchFilePath = _a.sent();
                        if (!sketchFilePath) {
                            throw new Error("Cannot resolve filesystem path for URI: " + sketchUri + ".");
                        }
                        sketchpath = path.dirname(sketchFilePath);
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 2:
                        coreClient = _a.sent();
                        if (!coreClient) {
                            return [2 /*return*/];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        if (!fqbn) {
                            throw new Error('The selected board has no FQBN.');
                        }
                        compilerReq = new compile_pb_1.CompileReq();
                        compilerReq.setInstance(instance);
                        compilerReq.setSketchpath(sketchpath);
                        compilerReq.setFqbn(fqbn);
                        compilerReq.setOptimizefordebug(options.optimizeForDebug);
                        compilerReq.setPreprocess(false);
                        compilerReq.setVerbose(true);
                        compilerReq.setQuiet(false);
                        result = client.compile(compilerReq);
                        _a.label = 3;
                    case 3:
                        _a.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                result.on('data', function (cr) {
                                    _this.toolOutputService.publishNewOutput("compile", Buffer.from(cr.getOutStream_asU8()).toString());
                                    _this.toolOutputService.publishNewOutput("compile error", Buffer.from(cr.getErrStream_asU8()).toString());
                                });
                                result.on('error', function (error) { return reject(error); });
                                result.on('end', function () { return resolve(); });
                            })];
                    case 4:
                        _a.sent();
                        this.toolOutputService.publishNewOutput("compile", "Compilation complete\n");
                        return [3 /*break*/, 6];
                    case 5:
                        e_1 = _a.sent();
                        this.toolOutputService.publishNewOutput("compile error", "Compilation error: " + e_1 + "\n");
                        throw e_1;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    CoreServiceImpl.prototype.upload = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var sketchUri, fqbn, sketchFilePath, sketchpath, coreClient, client, instance, req, result, e_2;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.compile(options)];
                    case 1:
                        _a.sent();
                        console.log('upload', options);
                        sketchUri = options.sketchUri, fqbn = options.fqbn;
                        return [4 /*yield*/, this.fileSystem.getFsPath(sketchUri)];
                    case 2:
                        sketchFilePath = _a.sent();
                        if (!sketchFilePath) {
                            throw new Error("Cannot resolve filesystem path for URI: " + sketchUri + ".");
                        }
                        sketchpath = path.dirname(sketchFilePath);
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 3:
                        coreClient = _a.sent();
                        if (!coreClient) {
                            return [2 /*return*/];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        if (!fqbn) {
                            throw new Error('The selected board has no FQBN.');
                        }
                        req = new upload_pb_1.UploadReq();
                        req.setInstance(instance);
                        req.setSketchPath(sketchpath);
                        req.setFqbn(fqbn);
                        req.setPort(options.port);
                        result = client.upload(req);
                        _a.label = 4;
                    case 4:
                        _a.trys.push([4, 6, , 7]);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                result.on('data', function (cr) {
                                    _this.toolOutputService.publishNewOutput("upload", Buffer.from(cr.getOutStream_asU8()).toString());
                                    _this.toolOutputService.publishNewOutput("upload error", Buffer.from(cr.getErrStream_asU8()).toString());
                                });
                                result.on('error', function (error) { return reject(error); });
                                result.on('end', function () { return resolve(); });
                            })];
                    case 5:
                        _a.sent();
                        this.toolOutputService.publishNewOutput("upload", "Upload complete\n");
                        return [3 /*break*/, 7];
                    case 6:
                        e_2 = _a.sent();
                        this.toolOutputService.publishNewOutput("upload error", "Upload error: " + e_2 + "\n");
                        throw e_2;
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    CoreServiceImpl.prototype.setClient = function (client) {
        this.client = client;
    };
    CoreServiceImpl.prototype.dispose = function () {
        this.client = undefined;
    };
    __decorate([
        inversify_1.inject(core_client_provider_1.CoreClientProvider),
        __metadata("design:type", core_client_provider_1.CoreClientProvider)
    ], CoreServiceImpl.prototype, "coreClientProvider", void 0);
    __decorate([
        inversify_1.inject(filesystem_1.FileSystem),
        __metadata("design:type", Object)
    ], CoreServiceImpl.prototype, "fileSystem", void 0);
    __decorate([
        inversify_1.inject(boards_service_1.BoardsService),
        __metadata("design:type", Object)
    ], CoreServiceImpl.prototype, "boardsService", void 0);
    __decorate([
        inversify_1.inject(tool_output_service_1.ToolOutputServiceServer),
        __metadata("design:type", Object)
    ], CoreServiceImpl.prototype, "toolOutputService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], CoreServiceImpl.prototype, "init", null);
    CoreServiceImpl = __decorate([
        inversify_1.injectable()
    ], CoreServiceImpl);
    return CoreServiceImpl;
}());
exports.CoreServiceImpl = CoreServiceImpl;
//# sourceMappingURL=core-service-impl.js.map