"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var util_1 = require("util");
var inversify_1 = require("inversify");
var struct_pb_1 = require("google-protobuf/google/protobuf/struct_pb");
var logger_1 = require("@theia/core/lib/common/logger");
var monitor_service_1 = require("../../common/protocol/monitor-service");
var monitor_pb_1 = require("../cli-protocol/monitor/monitor_pb");
var monitor_client_provider_1 = require("./monitor-client-provider");
var boards_service_1 = require("../../common/protocol/boards-service");
var ErrorWithCode;
(function (ErrorWithCode) {
    function toMonitorError(error, config) {
        var message = error.message;
        var code = undefined;
        if (is(error)) {
            // TODO: const `mapping`. Use regex for the `message`.
            var mapping = new Map();
            mapping.set('1 CANCELLED: Cancelled on client', monitor_service_1.MonitorError.ErrorCodes.CLIENT_CANCEL);
            mapping.set('2 UNKNOWN: device not configured', monitor_service_1.MonitorError.ErrorCodes.DEVICE_NOT_CONFIGURED);
            mapping.set('2 UNKNOWN: error opening serial monitor: Serial port busy', monitor_service_1.MonitorError.ErrorCodes.DEVICE_BUSY);
            code = mapping.get(message);
        }
        return {
            message: message,
            code: code,
            config: config
        };
    }
    ErrorWithCode.toMonitorError = toMonitorError;
    function is(error) {
        return typeof error.code === 'number';
    }
})(ErrorWithCode || (ErrorWithCode = {}));
var MonitorServiceImpl = /** @class */ (function () {
    function MonitorServiceImpl() {
    }
    MonitorServiceImpl.prototype.setClient = function (client) {
        this.client = client;
    };
    MonitorServiceImpl.prototype.dispose = function () {
        this.logger.info('>>> Disposing monitor service...');
        if (this.connection) {
            this.disconnect();
        }
        this.logger.info('<<< Disposed monitor service.');
        this.client = undefined;
    };
    MonitorServiceImpl.prototype.connect = function (config) {
        return __awaiter(this, void 0, void 0, function () {
            var client, duplex, type, port, req, monitorConfig;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.logger.info(">>> Creating serial monitor connection for " + boards_service_1.Board.toString(config.board) + " on port " + boards_service_1.Port.toString(config.port) + "...");
                        if (this.connection) {
                            return [2 /*return*/, monitor_service_1.Status.ALREADY_CONNECTED];
                        }
                        return [4 /*yield*/, this.monitorClientProvider.client()];
                    case 1:
                        client = _a.sent();
                        if (!client) {
                            return [2 /*return*/, monitor_service_1.Status.NOT_CONNECTED];
                        }
                        duplex = client.streamingOpen();
                        this.connection = { duplex: duplex, config: config };
                        duplex.on('error', (function (error) {
                            var monitorError = ErrorWithCode.toMonitorError(error, config);
                            _this.disconnect(monitorError).then(function () {
                                if (_this.client) {
                                    _this.client.notifyError(monitorError);
                                }
                                if (monitorError.code === undefined) {
                                    // Log the original, unexpected error.
                                    _this.logger.error(error);
                                }
                            });
                        }).bind(this));
                        duplex.on('data', (function (resp) {
                            if (_this.client) {
                                var raw = resp.getData();
                                var data = typeof raw === 'string' ? raw : new util_1.TextDecoder('utf8').decode(raw);
                                _this.client.notifyRead({ data: data });
                            }
                        }).bind(this));
                        type = config.type, port = config.port;
                        req = new monitor_pb_1.StreamingOpenReq();
                        monitorConfig = new monitor_pb_1.MonitorConfig();
                        monitorConfig.setType(this.mapType(type));
                        monitorConfig.setTarget(port.address);
                        if (config.baudRate !== undefined) {
                            monitorConfig.setAdditionalconfig(struct_pb_1.Struct.fromJavaScript({ 'BaudRate': config.baudRate }));
                        }
                        req.setMonitorconfig(monitorConfig);
                        return [2 /*return*/, new Promise(function (resolve) {
                                if (_this.connection) {
                                    _this.connection.duplex.write(req, function () {
                                        _this.logger.info("<<< Serial monitor connection created for " + boards_service_1.Board.toString(config.board, { useFqbn: false }) + " on port " + boards_service_1.Port.toString(config.port) + ".");
                                        resolve(monitor_service_1.Status.OK);
                                    });
                                    return;
                                }
                                _this.disconnect().then(function () { return resolve(monitor_service_1.Status.NOT_CONNECTED); });
                            })];
                }
            });
        });
    };
    MonitorServiceImpl.prototype.disconnect = function (reason) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, duplex, config;
            return __generator(this, function (_b) {
                if (!this.connection && reason && reason.code === monitor_service_1.MonitorError.ErrorCodes.CLIENT_CANCEL) {
                    return [2 /*return*/, monitor_service_1.Status.OK];
                }
                this.logger.info(">>> Disposing monitor connection...");
                if (!this.connection) {
                    this.logger.warn("<<< Not connected. Nothing to dispose.");
                    return [2 /*return*/, monitor_service_1.Status.NOT_CONNECTED];
                }
                _a = this.connection, duplex = _a.duplex, config = _a.config;
                duplex.cancel();
                this.logger.info("<<< Disposed monitor connection for " + boards_service_1.Board.toString(config.board, { useFqbn: false }) + " on port " + boards_service_1.Port.toString(config.port) + ".");
                this.connection = undefined;
                return [2 /*return*/, monitor_service_1.Status.OK];
            });
        });
    };
    MonitorServiceImpl.prototype.send = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var req;
            var _this = this;
            return __generator(this, function (_a) {
                if (!this.connection) {
                    return [2 /*return*/, monitor_service_1.Status.NOT_CONNECTED];
                }
                req = new monitor_pb_1.StreamingOpenReq();
                req.setData(new util_1.TextEncoder().encode(data));
                return [2 /*return*/, new Promise(function (resolve) {
                        if (_this.connection) {
                            _this.connection.duplex.write(req, function () {
                                resolve(monitor_service_1.Status.OK);
                            });
                            return;
                        }
                        _this.disconnect().then(function () { return resolve(monitor_service_1.Status.NOT_CONNECTED); });
                    })];
            });
        });
    };
    MonitorServiceImpl.prototype.mapType = function (type) {
        switch (type) {
            case monitor_service_1.MonitorConfig.ConnectionType.SERIAL: return monitor_pb_1.MonitorConfig.TargetType.SERIAL;
            default: return monitor_pb_1.MonitorConfig.TargetType.SERIAL;
        }
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        inversify_1.named('monitor-service'),
        __metadata("design:type", Object)
    ], MonitorServiceImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(monitor_client_provider_1.MonitorClientProvider),
        __metadata("design:type", monitor_client_provider_1.MonitorClientProvider)
    ], MonitorServiceImpl.prototype, "monitorClientProvider", void 0);
    MonitorServiceImpl = __decorate([
        inversify_1.injectable()
    ], MonitorServiceImpl);
    return MonitorServiceImpl;
}());
exports.MonitorServiceImpl = MonitorServiceImpl;
//# sourceMappingURL=monitor-service-impl.js.map