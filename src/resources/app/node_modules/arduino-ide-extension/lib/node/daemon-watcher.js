"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var psTree = require("ps-tree");
var kill = require('tree-kill');
var _a = __read(process.argv.slice(2).map(function (id) { return Number.parseInt(id, 10); }), 2), theiaPid = _a[0], daemonPid = _a[1];
setInterval(function () {
    try {
        // Throws an exception if the Theia process doesn't exist anymore.
        process.kill(theiaPid, 0);
    }
    catch (_a) {
        psTree(daemonPid, function (_, children) {
            var e_1, _a;
            try {
                for (var children_1 = __values(children), children_1_1 = children_1.next(); !children_1_1.done; children_1_1 = children_1.next()) {
                    var PID = children_1_1.value.PID;
                    kill(PID);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (children_1_1 && !children_1_1.done && (_a = children_1.return)) _a.call(children_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
            kill(daemonPid, function () { return process.exit(); });
        });
    }
}, 1000);
//# sourceMappingURL=daemon-watcher.js.map