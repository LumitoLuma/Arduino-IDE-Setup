"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ToolOutputServiceServerImpl = void 0;
var inversify_1 = require("inversify");
var ToolOutputServiceServerImpl = /** @class */ (function () {
    function ToolOutputServiceServerImpl() {
        this.clients = [];
    }
    ToolOutputServiceServerImpl.prototype.append = function (message) {
        var e_1, _a;
        if (!message.chunk) {
            return;
        }
        try {
            for (var _b = __values(this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var client = _c.value;
                client.onMessageReceived(message);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ToolOutputServiceServerImpl.prototype.setClient = function (client) {
        if (!client) {
            return;
        }
        this.clients.push(client);
    };
    ToolOutputServiceServerImpl.prototype.disposeClient = function (client) {
        var index = this.clients.indexOf(client);
        if (index === -1) {
            console.warn("Could not dispose tools output client. It was not registered.");
            return;
        }
        this.clients.splice(index, 1);
    };
    ToolOutputServiceServerImpl.prototype.dispose = function () {
        var e_2, _a;
        try {
            for (var _b = __values(this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var client = _c.value;
                this.disposeClient(client);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
        this.clients.length = 0;
    };
    ToolOutputServiceServerImpl = __decorate([
        inversify_1.injectable()
    ], ToolOutputServiceServerImpl);
    return ToolOutputServiceServerImpl;
}());
exports.ToolOutputServiceServerImpl = ToolOutputServiceServerImpl;
//# sourceMappingURL=tool-output-service-impl.js.map