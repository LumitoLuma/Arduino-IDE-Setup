"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
var fs = require("fs");
var os = require("os");
var path_1 = require("path");
var inversify_1 = require("inversify");
var arduino_daemon_impl_1 = require("./arduino-daemon-impl");
var logger_1 = require("@theia/core/lib/common/logger");
var backend_application_1 = require("@theia/core/lib/node/backend-application");
var node_1 = require("@theia/languages/lib/node");
var arduino_language_server_contribution_1 = require("./language/arduino-language-server-contribution");
var library_service_1 = require("../common/protocol/library-service");
var boards_service_1 = require("../common/protocol/boards-service");
var library_service_impl_1 = require("./library-service-impl");
var boards_service_impl_1 = require("./boards-service-impl");
var core_service_impl_1 = require("./core-service-impl");
var core_service_1 = require("../common/protocol/core-service");
var connection_container_module_1 = require("@theia/core/lib/node/messaging/connection-container-module");
var core_client_provider_1 = require("./core-client-provider");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var core_1 = require("@theia/core");
var tool_output_service_impl_1 = require("./tool-output-service-impl");
var default_workspace_server_ext_1 = require("./default-workspace-server-ext");
var common_1 = require("@theia/workspace/lib/common");
var sketches_service_impl_1 = require("./sketches-service-impl");
var sketches_service_1 = require("../common/protocol/sketches-service");
var config_service_1 = require("../common/protocol/config-service");
var arduino_daemon_1 = require("../common/protocol/arduino-daemon");
var monitor_service_impl_1 = require("./monitor/monitor-service-impl");
var monitor_service_1 = require("../common/protocol/monitor-service");
var monitor_client_provider_1 = require("./monitor/monitor-client-provider");
var config_service_impl_1 = require("./config-service-impl");
var arduino_plugin_reader_1 = require("./arduino-plugin-reader");
var plugin_reader_1 = require("@theia/plugin-ext/lib/hosted/node/plugin-reader");
var config_file_validator_1 = require("./config-file-validator");
var env_variables_1 = require("@theia/core/lib/common/env-variables");
var arduino_env_variables_server_1 = require("./arduino-env-variables-server");
var node_filesystem_ext_1 = require("./node-filesystem-ext");
var filesystem_ext_1 = require("../common/protocol/filesystem-ext");
exports.default = new inversify_1.ContainerModule(function (bind, unbind, isBound, rebind) {
    rebind(env_variables_1.EnvVariablesServer).to(arduino_env_variables_server_1.ArduinoEnvVariablesServer).inSingletonScope();
    bind(config_file_validator_1.ConfigFileValidator).toSelf().inSingletonScope();
    // XXX: The config service must start earlier than the daemon, hence the binding order does matter.
    // Shared config service
    bind(config_service_impl_1.ConfigServiceImpl).toSelf().inSingletonScope();
    bind(config_service_1.ConfigService).toService(config_service_impl_1.ConfigServiceImpl);
    bind(backend_application_1.BackendApplicationContribution).toService(config_service_impl_1.ConfigServiceImpl);
    bind(core_1.ConnectionHandler).toDynamicValue(function (context) {
        return new core_1.JsonRpcConnectionHandler(config_service_1.ConfigServicePath, function (client) {
            var server = context.container.get(config_service_impl_1.ConfigServiceImpl);
            server.setClient(client);
            client.onDidCloseConnection(function () { return server.disposeClient(client); });
            return server;
        });
    }).inSingletonScope();
    // Shared daemon 
    bind(arduino_daemon_impl_1.ArduinoDaemonImpl).toSelf().inSingletonScope();
    bind(arduino_daemon_1.ArduinoDaemon).toService(arduino_daemon_impl_1.ArduinoDaemonImpl);
    bind(backend_application_1.BackendApplicationContribution).toService(arduino_daemon_impl_1.ArduinoDaemonImpl);
    bind(core_1.ConnectionHandler).toDynamicValue(function (context) {
        return new core_1.JsonRpcConnectionHandler(arduino_daemon_1.ArduinoDaemonPath, function (client) { return __awaiter(void 0, void 0, void 0, function () {
            var server;
            return __generator(this, function (_a) {
                server = context.container.get(arduino_daemon_impl_1.ArduinoDaemonImpl);
                server.setClient(client);
                client.onDidCloseConnection(function () { return server.disposeClient(client); });
                return [2 /*return*/, server];
            });
        }); });
    }).inSingletonScope();
    // Language server
    bind(arduino_language_server_contribution_1.ArduinoLanguageServerContribution).toSelf().inSingletonScope();
    bind(node_1.LanguageServerContribution).toService(arduino_language_server_contribution_1.ArduinoLanguageServerContribution);
    // Library service
    var libraryServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(library_service_impl_1.LibraryServiceImpl).toSelf().inSingletonScope();
        bind(library_service_1.LibraryService).toService(library_service_impl_1.LibraryServiceImpl);
        bindBackendService(library_service_1.LibraryServicePath, library_service_1.LibraryService);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(libraryServiceConnectionModule);
    // Sketches service
    var sketchesServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(sketches_service_impl_1.SketchesServiceImpl).toSelf().inSingletonScope();
        bind(sketches_service_1.SketchesService).toService(sketches_service_impl_1.SketchesServiceImpl);
        bindBackendService(sketches_service_1.SketchesServicePath, sketches_service_1.SketchesService);
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(sketchesServiceConnectionModule);
    // Boards service
    var boardsServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        return __awaiter(void 0, void 0, void 0, function () {
            return __generator(this, function (_b) {
                bind(boards_service_impl_1.BoardsServiceImpl).toSelf().inSingletonScope();
                bind(boards_service_1.BoardsService).toService(boards_service_impl_1.BoardsServiceImpl);
                bindBackendService(boards_service_1.BoardsServicePath, boards_service_1.BoardsService, function (service, client) {
                    service.setClient(client);
                    client.onDidCloseConnection(function () { return service.dispose(); });
                    return service;
                });
                return [2 /*return*/];
            });
        });
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(boardsServiceConnectionModule);
    // Shared Arduino core client provider service for the backend.
    bind(core_client_provider_1.CoreClientProvider).toSelf().inSingletonScope();
    // Core service -> `verify` and `upload`. One per Theia connection.
    var connectionConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(core_service_impl_1.CoreServiceImpl).toSelf().inSingletonScope();
        bind(core_service_1.CoreService).toService(core_service_impl_1.CoreServiceImpl);
        bindBackendService(boards_service_1.BoardsServicePath, boards_service_1.BoardsService);
        bindBackendService(core_service_1.CoreServicePath, core_service_1.CoreService, function (service, client) {
            service.setClient(client);
            client.onDidCloseConnection(function () { return service.dispose(); });
            return service;
        });
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(connectionConnectionModule);
    // Tool output service -> feedback from the daemon, compile and flash
    bind(tool_output_service_impl_1.ToolOutputServiceServerImpl).toSelf().inSingletonScope();
    bind(tool_output_service_1.ToolOutputServiceServer).toService(tool_output_service_impl_1.ToolOutputServiceServerImpl);
    bind(core_1.ConnectionHandler).toDynamicValue(function (context) {
        return new core_1.JsonRpcConnectionHandler(tool_output_service_1.ToolOutputService.SERVICE_PATH, function (client) {
            var server = context.container.get(tool_output_service_1.ToolOutputServiceServer);
            server.setClient(client);
            client.onDidCloseConnection(function () { return server.disposeClient(client); });
            return server;
        });
    }).inSingletonScope();
    // Logger for the Arduino daemon
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('daemon');
    }).inSingletonScope().whenTargetNamed('daemon');
    // Logger for the "serial discovery".
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('discovery');
    }).inSingletonScope().whenTargetNamed('discovery');
    // Logger for the CLI config service. From the CLI config (FS path aware), we make a URI-aware app config.
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('config');
    }).inSingletonScope().whenTargetNamed('config');
    // Default workspace server extension to initialize and use a fallback workspace.
    // If nothing was set previously.
    bind(default_workspace_server_ext_1.DefaultWorkspaceServerExt).toSelf().inSingletonScope();
    rebind(common_1.WorkspaceServer).toService(default_workspace_server_ext_1.DefaultWorkspaceServerExt);
    // Shared monitor client provider service for the backend.
    bind(monitor_client_provider_1.MonitorClientProvider).toSelf().inSingletonScope();
    // Connection scoped service for the serial monitor.
    var monitorServiceConnectionModule = connection_container_module_1.ConnectionContainerModule.create(function (_a) {
        var bind = _a.bind, bindBackendService = _a.bindBackendService;
        bind(monitor_service_impl_1.MonitorServiceImpl).toSelf().inSingletonScope();
        bind(monitor_service_1.MonitorService).toService(monitor_service_impl_1.MonitorServiceImpl);
        bindBackendService(monitor_service_1.MonitorServicePath, monitor_service_1.MonitorService, function (service, client) {
            service.setClient(client);
            client.onDidCloseConnection(function () { return service.dispose(); });
            return service;
        });
    });
    bind(connection_container_module_1.ConnectionContainerModule).toConstantValue(monitorServiceConnectionModule);
    // Logger for the monitor service.
    bind(logger_1.ILogger).toDynamicValue(function (ctx) {
        var parentLogger = ctx.container.get(logger_1.ILogger);
        return parentLogger.child('monitor-service');
    }).inSingletonScope().whenTargetNamed('monitor-service');
    // Set up cpp extension
    if (!process.env.CPP_CLANGD_COMMAND) {
        var segments = ['..', '..', 'build'];
        if (os.platform() === 'win32') {
            segments.push('clangd.exe');
        }
        else {
            segments.push('bin');
            segments.push('clangd');
        }
        var clangdCommand = path_1.join.apply(void 0, __spread([__dirname], segments));
        if (fs.existsSync(clangdCommand)) {
            process.env.CPP_CLANGD_COMMAND = clangdCommand;
        }
    }
    bind(arduino_plugin_reader_1.ArduinoHostedPluginReader).toSelf().inSingletonScope();
    rebind(plugin_reader_1.HostedPluginReader).toService(arduino_plugin_reader_1.ArduinoHostedPluginReader);
    // File-system extension for mapping paths to URIs
    bind(node_filesystem_ext_1.NodeFileSystemExt).toSelf().inSingletonScope();
    bind(filesystem_ext_1.FileSystemExt).toDynamicValue(function (context) { return context.container.get(node_filesystem_ext_1.NodeFileSystemExt); });
    bind(core_1.ConnectionHandler).toDynamicValue(function (context) { return new core_1.JsonRpcConnectionHandler(filesystem_ext_1.FileSystemExtPath, function () { return context.container.get(filesystem_ext_1.FileSystemExt); }); }).inSingletonScope();
});
//# sourceMappingURL=arduino-ide-backend-module.js.map