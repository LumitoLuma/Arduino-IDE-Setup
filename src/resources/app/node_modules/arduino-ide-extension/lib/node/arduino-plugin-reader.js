"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ArduinoHostedPluginReader = void 0;
var inversify_1 = require("inversify");
var plugin_reader_1 = require("@theia/plugin-ext/lib/hosted/node/plugin-reader");
var cli_config_1 = require("./cli-config");
var config_service_impl_1 = require("./config-service-impl");
var ArduinoHostedPluginReader = /** @class */ (function (_super) {
    __extends(ArduinoHostedPluginReader, _super);
    function ArduinoHostedPluginReader() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    ArduinoHostedPluginReader.prototype.onStart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        _a = this;
                        return [4 /*yield*/, this.configService.getConfigurationFileSchemaUri()];
                    case 1:
                        _a.cliConfigSchemaUri = _b.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ArduinoHostedPluginReader.prototype.readContribution = function (plugin) {
        var e_1, _a, _b, e_2, _c;
        var scanner = this.scanner.getScanner(plugin);
        var contribution = scanner.getContribution(plugin);
        if (!contribution) {
            return contribution;
        }
        if (plugin.name === 'vscode-yaml' && plugin.publisher === 'redhat' && contribution.configuration) {
            // Use the schema for the Arduino CLI.
            var configuration = contribution.configuration;
            try {
                for (var configuration_1 = __values(configuration), configuration_1_1 = configuration_1.next(); !configuration_1_1.done; configuration_1_1 = configuration_1.next()) {
                    var config = configuration_1_1.value;
                    if (typeof config.properties['yaml.schemas'] === 'undefined') {
                        config.properties['yaml.schemas'] = {};
                    }
                    config.properties['yaml.schemas'].default = (_b = {},
                        _b[this.cliConfigSchemaUri] = [cli_config_1.CLI_CONFIG],
                        _b);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (configuration_1_1 && !configuration_1_1.done && (_a = configuration_1.return)) _a.call(configuration_1);
                }
                finally { if (e_1) throw e_1.error; }
            }
        }
        else if (plugin.name === 'cpp' && plugin.publisher === 'vscode' && contribution.languages) {
            try {
                // Do not associate `.ino` files with the VS Code built-in extension for C++.
                // https://github.com/eclipse-theia/theia/issues/7533#issuecomment-611055328
                for (var _d = __values(contribution.languages), _e = _d.next(); !_e.done; _e = _d.next()) {
                    var language = _e.value;
                    if (language.extensions) {
                        language.extensions = language.extensions.filter(function (ext) { return ext !== '.ino'; });
                    }
                }
            }
            catch (e_2_1) { e_2 = { error: e_2_1 }; }
            finally {
                try {
                    if (_e && !_e.done && (_c = _d.return)) _c.call(_d);
                }
                finally { if (e_2) throw e_2.error; }
            }
        }
        return contribution;
    };
    __decorate([
        inversify_1.inject(config_service_impl_1.ConfigServiceImpl),
        __metadata("design:type", config_service_impl_1.ConfigServiceImpl)
    ], ArduinoHostedPluginReader.prototype, "configService", void 0);
    ArduinoHostedPluginReader = __decorate([
        inversify_1.injectable()
    ], ArduinoHostedPluginReader);
    return ArduinoHostedPluginReader;
}(plugin_reader_1.HostedPluginReader));
exports.ArduinoHostedPluginReader = ArduinoHostedPluginReader;
//# sourceMappingURL=arduino-plugin-reader.js.map