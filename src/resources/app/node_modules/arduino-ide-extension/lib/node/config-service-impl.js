"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConfigServiceImpl = void 0;
var path = require("path");
var yaml = require("js-yaml");
var grpc = require("@grpc/grpc-js");
var deepmerge = require("deepmerge");
var inversify_1 = require("inversify");
var uri_1 = require("@theia/core/lib/common/uri");
var logger_1 = require("@theia/core/lib/common/logger");
var file_uri_1 = require("@theia/core/lib/node/file-uri");
var event_1 = require("@theia/core/lib/common/event");
var fs = require("./fs-extra");
var exec_util_1 = require("./exec-util");
var settings_pb_1 = require("./cli-protocol/settings/settings_pb");
var serviceGrpcPb = require("./cli-protocol/settings/settings_grpc_pb");
var config_file_validator_1 = require("./config-file-validator");
var arduino_daemon_impl_1 = require("./arduino-daemon-impl");
var cli_config_1 = require("./cli-config");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var env_variables_1 = require("@theia/core/lib/common/env-variables");
var debounce = require('lodash.debounce');
var ConfigServiceImpl = /** @class */ (function () {
    function ConfigServiceImpl() {
        this.updating = false;
        this.clients = [];
        this.ready = new promise_util_1.Deferred();
        this.configChangeEmitter = new event_1.Emitter();
    }
    ConfigServiceImpl.prototype.onStart = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, config;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.ensureCliConfigExists()];
                    case 1:
                        _b.sent();
                        return [4 /*yield*/, this.watchCliConfig()];
                    case 2:
                        _b.sent();
                        _a = this;
                        return [4 /*yield*/, this.loadCliConfig()];
                    case 3:
                        _a.cliConfig = _b.sent();
                        if (!this.cliConfig) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.mapCliConfigToAppConfig(this.cliConfig)];
                    case 4:
                        config = _b.sent();
                        if (config) {
                            this.config = config;
                            this.ready.resolve();
                        }
                        return [3 /*break*/, 6];
                    case 5:
                        this.fireInvalidConfig();
                        _b.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.getCliConfigFileUri = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configDirUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.envVariablesServer.getConfigDirUri()];
                    case 1:
                        configDirUri = _a.sent();
                        return [2 /*return*/, new uri_1.default(configDirUri).resolve(cli_config_1.CLI_CONFIG).toString()];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.getConfigurationFileSchemaUri = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, file_uri_1.FileUri.create(cli_config_1.CLI_CONFIG_SCHEMA_PATH).toString()];
            });
        });
    };
    ConfigServiceImpl.prototype.getConfiguration = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.ready.promise];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this.config];
                }
            });
        });
    };
    Object.defineProperty(ConfigServiceImpl.prototype, "cliConfiguration", {
        get: function () {
            return this.cliConfig;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(ConfigServiceImpl.prototype, "onConfigChange", {
        get: function () {
            return this.configChangeEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    ConfigServiceImpl.prototype.getVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.daemon.getVersion()];
            });
        });
    };
    ConfigServiceImpl.prototype.isInDataDir = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getConfiguration().then(function (_a) {
                        var dataDirUri = _a.dataDirUri;
                        return new uri_1.default(dataDirUri).isEqualOrParent(new uri_1.default(uri));
                    })];
            });
        });
    };
    ConfigServiceImpl.prototype.isInSketchDir = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.getConfiguration().then(function (_a) {
                        var sketchDirUri = _a.sketchDirUri;
                        return new uri_1.default(sketchDirUri).isEqualOrParent(new uri_1.default(uri));
                    })];
            });
        });
    };
    ConfigServiceImpl.prototype.setClient = function (client) {
        if (client) {
            this.clients.push(client);
        }
    };
    ConfigServiceImpl.prototype.dispose = function () {
        this.clients.length = 0;
    };
    ConfigServiceImpl.prototype.disposeClient = function (client) {
        var index = this.clients.indexOf(client);
        if (index === -1) {
            this.logger.warn('Could not dispose client. It was not registered or was already disposed.');
        }
        else {
            this.clients.splice(index, 1);
        }
    };
    ConfigServiceImpl.prototype.loadCliConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliConfigFileUri, cliConfigPath, content, model, fallbackModel, error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCliConfigFileUri()];
                    case 1:
                        cliConfigFileUri = _a.sent();
                        cliConfigPath = file_uri_1.FileUri.fsPath(cliConfigFileUri);
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 5, , 6]);
                        return [4 /*yield*/, fs.readFile(cliConfigPath, { encoding: 'utf8' })];
                    case 3:
                        content = _a.sent();
                        model = yaml.safeLoad(content) || {};
                        return [4 /*yield*/, this.getFallbackCliConfig()];
                    case 4:
                        fallbackModel = _a.sent();
                        return [2 /*return*/, deepmerge(fallbackModel, model)];
                    case 5:
                        error_1 = _a.sent();
                        this.logger.error("Error occurred when loading CLI config from " + cliConfigPath + ".", error_1);
                        return [3 /*break*/, 6];
                    case 6: return [2 /*return*/, undefined];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.getFallbackCliConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliPath, rawYaml, model;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.daemon.getExecPath()];
                    case 1:
                        cliPath = _a.sent();
                        return [4 /*yield*/, exec_util_1.spawnCommand("\"" + cliPath + "\"", ['config', 'dump'])];
                    case 2:
                        rawYaml = _a.sent();
                        model = yaml.safeLoad(rawYaml.trim());
                        return [2 /*return*/, model];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.ensureCliConfigExists = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliConfigFileUri, cliConfigPath, exists;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCliConfigFileUri()];
                    case 1:
                        cliConfigFileUri = _a.sent();
                        cliConfigPath = file_uri_1.FileUri.fsPath(cliConfigFileUri);
                        return [4 /*yield*/, fs.exists(cliConfigPath)];
                    case 2:
                        exists = _a.sent();
                        if (!!exists) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.initCliConfigTo(path.dirname(cliConfigPath))];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, fs.exists(cliConfigPath)];
                    case 4:
                        exists = _a.sent();
                        if (!exists) {
                            throw new Error("Could not initialize the default CLI configuration file at " + cliConfigPath + ".");
                        }
                        _a.label = 5;
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.initCliConfigTo = function (fsPathToDir) {
        return __awaiter(this, void 0, void 0, function () {
            var cliPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.daemon.getExecPath()];
                    case 1:
                        cliPath = _a.sent();
                        return [4 /*yield*/, exec_util_1.spawnCommand("\"" + cliPath + "\"", ['config', 'init', '--dest-dir', "\"" + fsPathToDir + "\""])];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.mapCliConfigToAppConfig = function (cliConfig) {
        return __awaiter(this, void 0, void 0, function () {
            var directories, data, user, downloads, additionalUrls;
            return __generator(this, function (_a) {
                directories = cliConfig.directories;
                data = directories.data, user = directories.user, downloads = directories.downloads;
                additionalUrls = [];
                if (cliConfig.board_manager && cliConfig.board_manager.additional_urls) {
                    additionalUrls.push.apply(additionalUrls, __spread(Array.from(new Set(cliConfig.board_manager.additional_urls))));
                }
                return [2 /*return*/, {
                        dataDirUri: file_uri_1.FileUri.create(data).toString(),
                        sketchDirUri: file_uri_1.FileUri.create(user).toString(),
                        downloadsDirUri: file_uri_1.FileUri.create(downloads).toString(),
                        additionalUrls: additionalUrls,
                    }];
            });
        });
    };
    ConfigServiceImpl.prototype.watchCliConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configDirUri, cliConfigPath, listener;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCliConfigFileUri()];
                    case 1:
                        configDirUri = _a.sent();
                        cliConfigPath = file_uri_1.FileUri.fsPath(configDirUri);
                        listener = debounce(function () { return __awaiter(_this, void 0, void 0, function () {
                            var cliConfig, valid, shouldUpdate, canUpdateSettings, config_1, update, err_1;
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0:
                                        if (this.updating) {
                                            return [2 /*return*/];
                                        }
                                        else {
                                            this.updating = true;
                                        }
                                        return [4 /*yield*/, this.loadCliConfig()];
                                    case 1:
                                        cliConfig = _a.sent();
                                        // Could not parse the YAML content.
                                        if (!cliConfig) {
                                            this.updating = false;
                                            this.fireInvalidConfig();
                                            return [2 /*return*/];
                                        }
                                        return [4 /*yield*/, this.validator.validate(cliConfig)];
                                    case 2:
                                        valid = _a.sent();
                                        if (!valid) {
                                            this.updating = false;
                                            this.fireInvalidConfig();
                                            return [2 /*return*/];
                                        }
                                        shouldUpdate = !this.cliConfig || !cli_config_1.DefaultCliConfig.sameAs(this.cliConfig, cliConfig);
                                        if (!shouldUpdate) {
                                            this.fireConfigChanged(this.config);
                                            this.updating = false;
                                            return [2 /*return*/];
                                        }
                                        canUpdateSettings = this.cliConfig && this.cliConfig.daemon.port === cliConfig.daemon.port;
                                        _a.label = 3;
                                    case 3:
                                        _a.trys.push([3, 5, , 6]);
                                        return [4 /*yield*/, this.mapCliConfigToAppConfig(cliConfig)];
                                    case 4:
                                        config_1 = _a.sent();
                                        update = new Promise(function (resolve) {
                                            if (canUpdateSettings) {
                                                return _this.updateDaemon(cliConfig.daemon.port, cliConfig).then(resolve);
                                            }
                                            return _this.daemon.stopDaemon()
                                                .then(function () { return _this.daemon.startDaemon(); })
                                                .then(resolve);
                                        });
                                        update.then(function () {
                                            var e_1, _a;
                                            _this.cliConfig = cliConfig;
                                            _this.config = config_1;
                                            _this.configChangeEmitter.fire(_this.config);
                                            try {
                                                for (var _b = __values(_this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                                                    var client = _c.value;
                                                    client.notifyConfigChanged(_this.config);
                                                }
                                            }
                                            catch (e_1_1) { e_1 = { error: e_1_1 }; }
                                            finally {
                                                try {
                                                    if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
                                                }
                                                finally { if (e_1) throw e_1.error; }
                                            }
                                        }).finally(function () { return _this.updating = false; });
                                        return [3 /*break*/, 6];
                                    case 5:
                                        err_1 = _a.sent();
                                        this.logger.error('Failed to update the daemon with the current CLI configuration.', err_1);
                                        return [3 /*break*/, 6];
                                    case 6: return [2 /*return*/];
                                }
                            });
                        }); }, 200);
                        fs.watchFile(cliConfigPath, listener);
                        this.logger.info("Started watching the Arduino CLI configuration: '" + cliConfigPath + "'.");
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.fireConfigChanged = function (config) {
        var e_2, _a;
        try {
            for (var _b = __values(this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var client = _c.value;
                client.notifyConfigChanged(config);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ConfigServiceImpl.prototype.fireInvalidConfig = function () {
        var e_3, _a;
        try {
            for (var _b = __values(this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var client = _c.value;
                client.notifyInvalidConfig();
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
    };
    ConfigServiceImpl.prototype.unwatchCliConfig = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliConfigFileUri, cliConfigPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getCliConfigFileUri()];
                    case 1:
                        cliConfigFileUri = _a.sent();
                        cliConfigPath = file_uri_1.FileUri.fsPath(cliConfigFileUri);
                        fs.unwatchFile(cliConfigPath);
                        this.logger.info("Stopped watching the Arduino CLI configuration: '" + cliConfigPath + "'.");
                        return [2 /*return*/];
                }
            });
        });
    };
    ConfigServiceImpl.prototype.updateDaemon = function (port, config) {
        return __awaiter(this, void 0, void 0, function () {
            var SettingsClient, client, data;
            return __generator(this, function (_a) {
                SettingsClient = grpc.makeClientConstructor(serviceGrpcPb['cc.arduino.cli.settings.Settings'], 'SettingsService');
                client = new SettingsClient("localhost:" + port, grpc.credentials.createInsecure());
                data = new settings_pb_1.RawData();
                data.setJsondata(JSON.stringify(config, null, 2));
                return [2 /*return*/, new Promise(function (resolve, reject) {
                        client.merge(data, function (error) {
                            if (error) {
                                reject(error);
                                return;
                            }
                            client.close();
                            resolve();
                        });
                    })];
            });
        });
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        inversify_1.named('config'),
        __metadata("design:type", Object)
    ], ConfigServiceImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(env_variables_1.EnvVariablesServer),
        __metadata("design:type", Object)
    ], ConfigServiceImpl.prototype, "envVariablesServer", void 0);
    __decorate([
        inversify_1.inject(config_file_validator_1.ConfigFileValidator),
        __metadata("design:type", config_file_validator_1.ConfigFileValidator)
    ], ConfigServiceImpl.prototype, "validator", void 0);
    __decorate([
        inversify_1.inject(arduino_daemon_impl_1.ArduinoDaemonImpl),
        __metadata("design:type", arduino_daemon_impl_1.ArduinoDaemonImpl)
    ], ConfigServiceImpl.prototype, "daemon", void 0);
    ConfigServiceImpl = __decorate([
        inversify_1.injectable()
    ], ConfigServiceImpl);
    return ConfigServiceImpl;
}());
exports.ConfigServiceImpl = ConfigServiceImpl;
//# sourceMappingURL=config-service-impl.js.map