"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var path_1 = require("path");
var inversify_1 = require("inversify");
var child_process_1 = require("child_process");
var file_uri_1 = require("@theia/core/lib/node/file-uri");
var logger_1 = require("@theia/core/lib/common/logger");
var promise_util_1 = require("@theia/core/lib/common/promise-util");
var disposable_1 = require("@theia/core/lib/common/disposable");
var event_1 = require("@theia/core/lib/common/event");
var environment_1 = require("@theia/application-package/lib/environment");
var env_variables_1 = require("@theia/core/lib/common/env-variables");
var protocol_1 = require("../common/protocol");
var daemon_log_1 = require("./daemon-log");
var cli_config_1 = require("./cli-config");
var exec_util_1 = require("./exec-util");
var ArduinoDaemonImpl = /** @class */ (function () {
    function ArduinoDaemonImpl() {
        this.clients = [];
        this.toDispose = new disposable_1.DisposableCollection();
        this.onDaemonStartedEmitter = new event_1.Emitter();
        this.onDaemonStoppedEmitter = new event_1.Emitter();
        this._running = false;
        this._ready = new promise_util_1.Deferred();
    }
    // Backend application lifecycle.
    ArduinoDaemonImpl.prototype.onStart = function () {
        this.startDaemon();
    };
    ArduinoDaemonImpl.prototype.onStop = function () {
        this.dispose();
    };
    // JSON-RPC proxy
    ArduinoDaemonImpl.prototype.setClient = function (client) {
        if (client) {
            if (this._running) {
                client.notifyStarted();
            }
            else {
                client.notifyStopped();
            }
            this.clients.push(client);
        }
    };
    ArduinoDaemonImpl.prototype.dispose = function () {
        this.toDispose.dispose();
        this.clients.length = 0;
    };
    ArduinoDaemonImpl.prototype.disposeClient = function (client) {
        var index = this.clients.indexOf(client);
        if (index === -1) {
            this.logger.warn('Could not dispose client. It was not registered or was already disposed.');
        }
        else {
            this.clients.splice(index, 1);
        }
    };
    // Daemon API
    ArduinoDaemonImpl.prototype.isRunning = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.resolve(this._running)];
            });
        });
    };
    ArduinoDaemonImpl.prototype.startDaemon = function () {
        return __awaiter(this, void 0, void 0, function () {
            var cliPath, daemon_1, err_1, i;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 3, , 7]);
                        this.toDispose.dispose(); // This will `kill` the previously started daemon process, if any.
                        return [4 /*yield*/, this.getExecPath()];
                    case 1:
                        cliPath = _a.sent();
                        this.onData("Starting daemon from " + cliPath + "...");
                        return [4 /*yield*/, this.spawnDaemonProcess()];
                    case 2:
                        daemon_1 = _a.sent();
                        // Watchdog process for terminating the daemon process when the backend app terminates.
                        child_process_1.spawn(process.execPath, [path_1.join(__dirname, 'daemon-watcher.js'), String(process.pid), String(daemon_1.pid)], {
                            env: environment_1.environment.electron.runAsNodeEnv(),
                            detached: true,
                            stdio: 'ignore',
                            windowsHide: true
                        }).unref();
                        this.toDispose.pushAll([
                            disposable_1.Disposable.create(function () { return daemon_1.kill(); }),
                            disposable_1.Disposable.create(function () { return _this.fireDaemonStopped(); }),
                        ]);
                        this.fireDaemonStarted();
                        this.onData('Daemon is running.');
                        return [3 /*break*/, 7];
                    case 3:
                        err_1 = _a.sent();
                        this.onData('Failed to start the daemon.');
                        this.onError(err_1);
                        i = 5;
                        _a.label = 4;
                    case 4:
                        if (!i) return [3 /*break*/, 6];
                        this.onData("Restarting daemon in " + i + " seconds...");
                        return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, 1000); })];
                    case 5:
                        _a.sent();
                        i--;
                        return [3 /*break*/, 4];
                    case 6:
                        this.onData('Restarting daemon now...');
                        return [2 /*return*/, this.startDaemon()];
                    case 7: return [2 /*return*/];
                }
            });
        });
    };
    ArduinoDaemonImpl.prototype.stopDaemon = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                this.toDispose.dispose();
                return [2 /*return*/];
            });
        });
    };
    Object.defineProperty(ArduinoDaemonImpl.prototype, "onDaemonStarted", {
        get: function () {
            return this.onDaemonStartedEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArduinoDaemonImpl.prototype, "onDaemonStopped", {
        get: function () {
            return this.onDaemonStoppedEmitter.event;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ArduinoDaemonImpl.prototype, "ready", {
        get: function () {
            return this._ready.promise;
        },
        enumerable: true,
        configurable: true
    });
    ArduinoDaemonImpl.prototype.getExecPath = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (this._execPath) {
                            return [2 /*return*/, this._execPath];
                        }
                        _a = this;
                        return [4 /*yield*/, exec_util_1.getExecPath('arduino-cli', this.onError.bind(this), 'version')];
                    case 1:
                        _a._execPath = _b.sent();
                        return [2 /*return*/, this._execPath];
                }
            });
        });
    };
    ArduinoDaemonImpl.prototype.getVersion = function () {
        return __awaiter(this, void 0, void 0, function () {
            var execPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getExecPath()];
                    case 1:
                        execPath = _a.sent();
                        return [2 /*return*/, exec_util_1.spawnCommand("\"" + execPath + "\"", ['version'], this.onError.bind(this))];
                }
            });
        });
    };
    ArduinoDaemonImpl.prototype.getSpawnArgs = function () {
        return __awaiter(this, void 0, void 0, function () {
            var configDirUri, cliConfigPath;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.envVariablesServer.getConfigDirUri()];
                    case 1:
                        configDirUri = _a.sent();
                        cliConfigPath = path_1.join(file_uri_1.FileUri.fsPath(configDirUri), cli_config_1.CLI_CONFIG);
                        return [2 /*return*/, ['daemon', '--config-file', "\"" + cliConfigPath + "\"", '-v', '--log-format', 'json']];
                }
            });
        });
    };
    ArduinoDaemonImpl.prototype.spawnDaemonProcess = function () {
        return __awaiter(this, void 0, void 0, function () {
            var _a, cliPath, args, ready, options, daemon, grpcServerIsReady;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, Promise.all([this.getExecPath(), this.getSpawnArgs()])];
                    case 1:
                        _a = __read.apply(void 0, [_b.sent(), 2]), cliPath = _a[0], args = _a[1];
                        ready = new promise_util_1.Deferred();
                        options = { shell: true };
                        daemon = child_process_1.spawn("\"" + cliPath + "\"", args, options);
                        grpcServerIsReady = false;
                        daemon.stdout.on('data', function (data) {
                            var message = data.toString();
                            _this.onData(message);
                            if (!grpcServerIsReady) {
                                var error = DaemonError.parse(message);
                                if (error) {
                                    ready.reject(error);
                                }
                                if (message.includes('Daemon is listening on TCP port')) {
                                    grpcServerIsReady = true;
                                    ready.resolve(daemon);
                                }
                            }
                        });
                        daemon.stderr.on('data', function (data) {
                            var message = data.toString();
                            _this.onData(data.toString());
                            var error = DaemonError.parse(message);
                            ready.reject(error ? error : new Error(data.toString().trim()));
                        });
                        daemon.on('exit', function (code, signal) {
                            if (code === 0 || signal === 'SIGINT' || signal === 'SIGKILL') {
                                _this.onData('Daemon has stopped.');
                            }
                            else {
                                _this.onData("Daemon exited with " + (typeof code === 'undefined' ? "signal '" + signal + "'" : "exit code: " + code) + ".", { useOutput: false });
                            }
                        });
                        daemon.on('error', function (error) {
                            _this.onError(error);
                            ready.reject(error);
                        });
                        return [2 /*return*/, ready.promise];
                }
            });
        });
    };
    ArduinoDaemonImpl.prototype.fireDaemonStarted = function () {
        var e_1, _a;
        this._running = true;
        this._ready.resolve();
        this.onDaemonStartedEmitter.fire();
        try {
            for (var _b = __values(this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var client = _c.value;
                client.notifyStarted();
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ArduinoDaemonImpl.prototype.fireDaemonStopped = function () {
        var e_2, _a;
        if (!this._running) {
            return;
        }
        this._running = false;
        this._ready.reject(); // Reject all pending.
        this._ready = new promise_util_1.Deferred();
        this.onDaemonStoppedEmitter.fire();
        try {
            for (var _b = __values(this.clients), _c = _b.next(); !_c.done; _c = _b.next()) {
                var client = _c.value;
                client.notifyStopped();
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ArduinoDaemonImpl.prototype.onData = function (message, options) {
        if (options === void 0) { options = { useOutput: true }; }
        if (options.useOutput) {
            this.toolOutputService.publishNewOutput('daemon', daemon_log_1.DaemonLog.toPrettyString(message));
        }
        daemon_log_1.DaemonLog.log(this.logger, message);
    };
    ArduinoDaemonImpl.prototype.onError = function (error) {
        this.logger.error(error);
    };
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        inversify_1.named('daemon'),
        __metadata("design:type", Object)
    ], ArduinoDaemonImpl.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(protocol_1.ToolOutputServiceServer),
        __metadata("design:type", Object)
    ], ArduinoDaemonImpl.prototype, "toolOutputService", void 0);
    __decorate([
        inversify_1.inject(env_variables_1.EnvVariablesServer),
        __metadata("design:type", Object)
    ], ArduinoDaemonImpl.prototype, "envVariablesServer", void 0);
    ArduinoDaemonImpl = __decorate([
        inversify_1.injectable()
    ], ArduinoDaemonImpl);
    return ArduinoDaemonImpl;
}());
exports.ArduinoDaemonImpl = ArduinoDaemonImpl;
var DaemonError = /** @class */ (function (_super) {
    __extends(DaemonError, _super);
    function DaemonError(message, code, details) {
        var _this = _super.call(this, message) || this;
        _this.code = code;
        _this.details = details;
        Object.setPrototypeOf(_this, DaemonError.prototype);
        return _this;
    }
    return DaemonError;
}(Error));
exports.DaemonError = DaemonError;
(function (DaemonError) {
    DaemonError.ADDRESS_IN_USE = 0;
    DaemonError.UNKNOWN_ADDRESS = 2;
    DaemonError.INVALID_PORT = 4;
    DaemonError.UNKNOWN = 8;
    function parse(log) {
        var raw = log.toLocaleLowerCase();
        if (raw.includes('failed to listen')) {
            if (raw.includes('address already in use') || (raw.includes('bind')) && raw.includes('only one usage of each socket address')) {
                return new DaemonError('Failed to listen on TCP port. Address already in use.', DaemonError.ADDRESS_IN_USE);
            }
            if (raw.includes('is unknown name') || (raw.includes('tcp/') && (raw.includes('is an invalid port')))) {
                return new DaemonError('Failed to listen on TCP port. Unknown address.', DaemonError.UNKNOWN_ADDRESS);
            }
            if (raw.includes('is an invalid port')) {
                return new DaemonError('Failed to listen on TCP port. Invalid port.', DaemonError.INVALID_PORT);
            }
        }
        // Based on the CLI logging: `failed to serve`, and  any other FATAL errors.
        // https://github.com/arduino/arduino-cli/blob/11abbee8a9f027d087d4230f266a87217677d423/cli/daemon/daemon.go#L89-L94
        if (raw.includes('failed to serve') && (raw.includes('"fatal"') || raw.includes('fata'))) {
            return new DaemonError('Unexpected CLI start error.', DaemonError.UNKNOWN, log);
        }
        return undefined;
    }
    DaemonError.parse = parse;
})(DaemonError = exports.DaemonError || (exports.DaemonError = {}));
exports.DaemonError = DaemonError;
//# sourceMappingURL=arduino-daemon-impl.js.map