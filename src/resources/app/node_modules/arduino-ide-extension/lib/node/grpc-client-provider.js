"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var logger_1 = require("@theia/core/lib/common/logger");
var config_service_impl_1 = require("./config-service-impl");
var arduino_daemon_impl_1 = require("./arduino-daemon-impl");
var GrpcClientProvider = /** @class */ (function () {
    function GrpcClientProvider() {
    }
    GrpcClientProvider.prototype.init = function () {
        var _this = this;
        var updateClient = function () {
            var cliConfig = _this.configService.cliConfiguration;
            _this.reconcileClient(cliConfig ? cliConfig.daemon.port : undefined);
        };
        this.configService.onConfigChange(updateClient);
        this.daemon.ready.then(updateClient);
        this.daemon.onDaemonStopped(function () {
            if (_this._client) {
                _this.close(_this._client);
            }
            _this._client = undefined;
            _this._port = undefined;
        });
    };
    GrpcClientProvider.prototype.client = function () {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.daemon.ready];
                    case 1:
                        _a.sent();
                        return [2 /*return*/, this._client];
                    case 2:
                        error_1 = _a.sent();
                        return [2 /*return*/, undefined];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    GrpcClientProvider.prototype.reconcileClient = function (port) {
        return __awaiter(this, void 0, void 0, function () {
            var client, error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (this._port === port) {
                            return [2 /*return*/]; // Nothing to do.
                        }
                        this._port = port;
                        if (this._client) {
                            this.close(this._client);
                            this._client = undefined;
                        }
                        if (!this._port) return [3 /*break*/, 4];
                        _a.label = 1;
                    case 1:
                        _a.trys.push([1, 3, , 4]);
                        return [4 /*yield*/, this.createClient(this._port)];
                    case 2:
                        client = _a.sent();
                        this._client = client;
                        return [3 /*break*/, 4];
                    case 3:
                        error_2 = _a.sent();
                        this.logger.error('Could create client for gRPC.', error_2);
                        return [3 /*break*/, 4];
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    Object.defineProperty(GrpcClientProvider.prototype, "channelOptions", {
        get: function () {
            return {
                'grpc.max_send_message_length': 512 * 1024 * 1024,
                'grpc.max_receive_message_length': 512 * 1024 * 1024
            };
        },
        enumerable: true,
        configurable: true
    });
    __decorate([
        inversify_1.inject(logger_1.ILogger),
        __metadata("design:type", Object)
    ], GrpcClientProvider.prototype, "logger", void 0);
    __decorate([
        inversify_1.inject(arduino_daemon_impl_1.ArduinoDaemonImpl),
        __metadata("design:type", arduino_daemon_impl_1.ArduinoDaemonImpl)
    ], GrpcClientProvider.prototype, "daemon", void 0);
    __decorate([
        inversify_1.inject(config_service_impl_1.ConfigServiceImpl),
        __metadata("design:type", config_service_impl_1.ConfigServiceImpl)
    ], GrpcClientProvider.prototype, "configService", void 0);
    __decorate([
        inversify_1.postConstruct(),
        __metadata("design:type", Function),
        __metadata("design:paramtypes", []),
        __metadata("design:returntype", void 0)
    ], GrpcClientProvider.prototype, "init", null);
    GrpcClientProvider = __decorate([
        inversify_1.injectable()
    ], GrpcClientProvider);
    return GrpcClientProvider;
}());
exports.GrpcClientProvider = GrpcClientProvider;
//# sourceMappingURL=grpc-client-provider.js.map