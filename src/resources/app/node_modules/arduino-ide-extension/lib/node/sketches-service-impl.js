"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function (o) {
    var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
    if (m) return m.call(o);
    return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
};
Object.defineProperty(exports, "__esModule", { value: true });
var inversify_1 = require("inversify");
var path = require("path");
var fs = require("./fs-extra");
var node_1 = require("@theia/core/lib/node");
var config_service_1 = require("../common/protocol/config-service");
exports.ALLOWED_FILE_EXTENSIONS = ['.c', '.cpp', '.h', '.hh', '.hpp', '.s', '.pde', '.ino'];
// TODO: `fs`: use async API 
var SketchesServiceImpl = /** @class */ (function () {
    function SketchesServiceImpl() {
    }
    SketchesServiceImpl.prototype.getSketches = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var sketches, fsPath, sketchDirUri, fileNames, fileNames_1, fileNames_1_1, fileName, filePath, stat, e_1_1;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        sketches = [];
                        if (!!uri) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.configService.getConfiguration()];
                    case 1:
                        sketchDirUri = (_b.sent()).sketchDirUri;
                        fsPath = node_1.FileUri.fsPath(sketchDirUri);
                        if (!!fs.existsSync(fsPath)) return [3 /*break*/, 3];
                        return [4 /*yield*/, fs.mkdirp(fsPath)];
                    case 2:
                        _b.sent();
                        _b.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        fsPath = node_1.FileUri.fsPath(uri);
                        _b.label = 5;
                    case 5:
                        if (!fs.existsSync(fsPath)) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, fs.readdir(fsPath)];
                    case 6:
                        fileNames = _b.sent();
                        _b.label = 7;
                    case 7:
                        _b.trys.push([7, 13, 14, 15]);
                        fileNames_1 = __values(fileNames), fileNames_1_1 = fileNames_1.next();
                        _b.label = 8;
                    case 8:
                        if (!!fileNames_1_1.done) return [3 /*break*/, 12];
                        fileName = fileNames_1_1.value;
                        filePath = path.join(fsPath, fileName);
                        return [4 /*yield*/, this.isSketchFolder(node_1.FileUri.create(filePath).toString())];
                    case 9:
                        if (!_b.sent()) return [3 /*break*/, 11];
                        return [4 /*yield*/, fs.stat(filePath)];
                    case 10:
                        stat = _b.sent();
                        sketches.push({
                            mtimeMs: stat.mtimeMs,
                            name: fileName,
                            uri: node_1.FileUri.create(filePath).toString()
                        });
                        _b.label = 11;
                    case 11:
                        fileNames_1_1 = fileNames_1.next();
                        return [3 /*break*/, 8];
                    case 12: return [3 /*break*/, 15];
                    case 13:
                        e_1_1 = _b.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 15];
                    case 14:
                        try {
                            if (fileNames_1_1 && !fileNames_1_1.done && (_a = fileNames_1.return)) _a.call(fileNames_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 15: return [2 /*return*/, sketches.sort(function (left, right) { return right.mtimeMs - left.mtimeMs; })];
                }
            });
        });
    };
    /**
     * Return all allowed files.
     * File extensions: 'c', 'cpp', 'h', 'hh', 'hpp', 's', 'pde', 'ino'
     */
    SketchesServiceImpl.prototype.getSketchFiles = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var uris, fsPath, fileNames, fileNames_2, fileNames_2_1, fileName, filePath, sketchDir;
            var e_2, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        uris = [];
                        fsPath = node_1.FileUri.fsPath(uri);
                        if (!fs.lstatSync(fsPath).isDirectory()) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.isSketchFolder(uri)];
                    case 1:
                        if (!_b.sent()) return [3 /*break*/, 3];
                        return [4 /*yield*/, fs.readdir(fsPath)];
                    case 2:
                        fileNames = _b.sent();
                        try {
                            for (fileNames_2 = __values(fileNames), fileNames_2_1 = fileNames_2.next(); !fileNames_2_1.done; fileNames_2_1 = fileNames_2.next()) {
                                fileName = fileNames_2_1.value;
                                filePath = path.join(fsPath, fileName);
                                if (exports.ALLOWED_FILE_EXTENSIONS.indexOf(path.extname(filePath)) !== -1
                                    && fs.existsSync(filePath)
                                    && fs.lstatSync(filePath).isFile()) {
                                    uris.push(node_1.FileUri.create(filePath).toString());
                                }
                            }
                        }
                        catch (e_2_1) { e_2 = { error: e_2_1 }; }
                        finally {
                            try {
                                if (fileNames_2_1 && !fileNames_2_1.done && (_a = fileNames_2.return)) _a.call(fileNames_2);
                            }
                            finally { if (e_2) throw e_2.error; }
                        }
                        _b.label = 3;
                    case 3: return [2 /*return*/, uris];
                    case 4:
                        sketchDir = path.dirname(fsPath);
                        return [2 /*return*/, this.getSketchFiles(node_1.FileUri.create(sketchDir).toString())];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.createNewSketch = function (parentUri) {
        return __awaiter(this, void 0, void 0, function () {
            var monthNames, today, uri, _a, parent, sketchBaseName, sketchName, i, sketchNameCandidate, sketchDir, sketchFile;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        monthNames = ['january', 'february', 'march', 'april', 'may', 'june',
                            'july', 'august', 'september', 'october', 'november', 'december'
                        ];
                        today = new Date();
                        if (!!!parentUri) return [3 /*break*/, 1];
                        _a = parentUri;
                        return [3 /*break*/, 3];
                    case 1: return [4 /*yield*/, this.configService.getConfiguration()];
                    case 2:
                        _a = (_b.sent()).sketchDirUri;
                        _b.label = 3;
                    case 3:
                        uri = _a;
                        parent = node_1.FileUri.fsPath(uri);
                        sketchBaseName = "sketch_" + monthNames[today.getMonth()] + today.getDate();
                        for (i = 97; i < 97 + 26; i++) {
                            sketchNameCandidate = "" + sketchBaseName + String.fromCharCode(i);
                            if (fs.existsSync(path.join(parent, sketchNameCandidate))) {
                                continue;
                            }
                            sketchName = sketchNameCandidate;
                            break;
                        }
                        if (!sketchName) {
                            throw new Error('Cannot create a unique sketch name');
                        }
                        sketchDir = path.join(parent, sketchName);
                        sketchFile = path.join(sketchDir, sketchName + ".ino");
                        return [4 /*yield*/, fs.mkdirp(sketchDir)];
                    case 4:
                        _b.sent();
                        return [4 /*yield*/, fs.writeFile(sketchFile, "\nvoid setup() {\n// put your setup code here, to run once:\n\n}\n\nvoid loop() {\n// put your main code here, to run repeatedly:\n\n}\n", { encoding: 'utf8' })];
                    case 5:
                        _b.sent();
                        return [2 /*return*/, {
                                name: sketchName,
                                uri: node_1.FileUri.create(sketchDir).toString()
                            }];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.isSketchFolder = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var fsPath, basename, files, i;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        fsPath = node_1.FileUri.fsPath(uri);
                        if (!(fs.existsSync(fsPath) && fs.lstatSync(fsPath).isDirectory())) return [3 /*break*/, 2];
                        basename = path.basename(fsPath);
                        return [4 /*yield*/, fs.readdir(fsPath)];
                    case 1:
                        files = _a.sent();
                        for (i = 0; i < files.length; i++) {
                            if (files[i] === basename + '.ino') {
                                return [2 /*return*/, true];
                            }
                        }
                        _a.label = 2;
                    case 2: return [2 /*return*/, false];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(config_service_1.ConfigService),
        __metadata("design:type", Object)
    ], SketchesServiceImpl.prototype, "configService", void 0);
    SketchesServiceImpl = __decorate([
        inversify_1.injectable()
    ], SketchesServiceImpl);
    return SketchesServiceImpl;
}());
exports.SketchesServiceImpl = SketchesServiceImpl;
//# sourceMappingURL=sketches-service-impl.js.map