"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SketchesServiceImpl = void 0;
var inversify_1 = require("inversify");
var os = require("os");
var temp = require("temp");
var path = require("path");
var ncp_1 = require("ncp");
var fs = require("./fs-extra");
var uri_1 = require("@theia/core/lib/common/uri");
var os_1 = require("@theia/core/lib/common/os");
var node_1 = require("@theia/core/lib/node");
var config_service_1 = require("../common/protocol/config-service");
var sketches_service_1 = require("../common/protocol/sketches-service");
var utils_1 = require("../common/utils");
// As currently implemented on Linux,
// the maximum number of symbolic links that will be followed while resolving a pathname is 40
var MAX_FILESYSTEM_DEPTH = 40;
var WIN32_DRIVE_REGEXP = /^[a-zA-Z]:\\/;
// TODO: `fs`: use async API 
var SketchesServiceImpl = /** @class */ (function () {
    function SketchesServiceImpl() {
        this.temp = temp.track();
    }
    SketchesServiceImpl.prototype.onStop = function () {
        this.temp.cleanupSync();
    };
    SketchesServiceImpl.prototype.getSketches = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var sketches, fsPath, sketchDirUri, fileNames, fileNames_1, fileNames_1_1, fileName, filePath, stat, sketch, _a, e_1_1;
            var e_1, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        sketches = [];
                        if (!!uri) return [3 /*break*/, 4];
                        return [4 /*yield*/, this.configService.getConfiguration()];
                    case 1:
                        sketchDirUri = (_c.sent()).sketchDirUri;
                        fsPath = node_1.FileUri.fsPath(sketchDirUri);
                        if (!!fs.existsSync(fsPath)) return [3 /*break*/, 3];
                        return [4 /*yield*/, fs.mkdirp(fsPath)];
                    case 2:
                        _c.sent();
                        _c.label = 3;
                    case 3: return [3 /*break*/, 5];
                    case 4:
                        fsPath = node_1.FileUri.fsPath(uri);
                        _c.label = 5;
                    case 5:
                        if (!fs.existsSync(fsPath)) {
                            return [2 /*return*/, []];
                        }
                        return [4 /*yield*/, fs.readdir(fsPath)];
                    case 6:
                        fileNames = _c.sent();
                        _c.label = 7;
                    case 7:
                        _c.trys.push([7, 16, 17, 18]);
                        fileNames_1 = __values(fileNames), fileNames_1_1 = fileNames_1.next();
                        _c.label = 8;
                    case 8:
                        if (!!fileNames_1_1.done) return [3 /*break*/, 15];
                        fileName = fileNames_1_1.value;
                        filePath = path.join(fsPath, fileName);
                        return [4 /*yield*/, this.isSketchFolder(node_1.FileUri.create(filePath).toString())];
                    case 9:
                        if (!_c.sent()) return [3 /*break*/, 14];
                        _c.label = 10;
                    case 10:
                        _c.trys.push([10, 13, , 14]);
                        return [4 /*yield*/, fs.stat(filePath)];
                    case 11:
                        stat = _c.sent();
                        return [4 /*yield*/, this.loadSketch(node_1.FileUri.create(filePath).toString())];
                    case 12:
                        sketch = _c.sent();
                        sketches.push(__assign(__assign({}, sketch), { mtimeMs: stat.mtimeMs }));
                        return [3 /*break*/, 14];
                    case 13:
                        _a = _c.sent();
                        console.warn("Could not load sketch from " + filePath + ".");
                        return [3 /*break*/, 14];
                    case 14:
                        fileNames_1_1 = fileNames_1.next();
                        return [3 /*break*/, 8];
                    case 15: return [3 /*break*/, 18];
                    case 16:
                        e_1_1 = _c.sent();
                        e_1 = { error: e_1_1 };
                        return [3 /*break*/, 18];
                    case 17:
                        try {
                            if (fileNames_1_1 && !fileNames_1_1.done && (_b = fileNames_1.return)) _b.call(fileNames_1);
                        }
                        finally { if (e_1) throw e_1.error; }
                        return [7 /*endfinally*/];
                    case 18: return [2 /*return*/, sketches.sort(function (left, right) { return right.mtimeMs - left.mtimeMs; })];
                }
            });
        });
    };
    /**
     * This is the TS implementation of `SketchLoad` from the CLI.
     * See: https://github.com/arduino/arduino-cli/issues/837
     * Based on: https://github.com/arduino/arduino-cli/blob/eef3705c4afcba4317ec38b803d9ffce5dd59a28/arduino/builder/sketch.go#L100-L215
     */
    SketchesServiceImpl.prototype.loadSketch = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var sketchPath, exists, stat, sketchFolder, mainSketchFile, _a, _b, extension, candidateSketchFile, candidateExists, e_2_1, _c, mainSketchFileStat, files, rootVisited, err;
            var e_2, _d;
            var _this = this;
            return __generator(this, function (_e) {
                switch (_e.label) {
                    case 0:
                        sketchPath = node_1.FileUri.fsPath(uri);
                        return [4 /*yield*/, fs.exists(sketchPath)];
                    case 1:
                        exists = _e.sent();
                        if (!exists) {
                            throw new Error(uri + " does not exist.");
                        }
                        return [4 /*yield*/, fs.lstat(sketchPath)];
                    case 2:
                        stat = _e.sent();
                        if (!stat.isDirectory()) return [3 /*break*/, 16];
                        sketchFolder = sketchPath;
                        _e.label = 3;
                    case 3:
                        _e.trys.push([3, 8, 9, 10]);
                        _a = __values(sketches_service_1.Sketch.Extensions.MAIN), _b = _a.next();
                        _e.label = 4;
                    case 4:
                        if (!!_b.done) return [3 /*break*/, 7];
                        extension = _b.value;
                        candidateSketchFile = path.join(sketchPath, "" + path.basename(sketchPath) + extension);
                        return [4 /*yield*/, fs.exists(candidateSketchFile)];
                    case 5:
                        candidateExists = _e.sent();
                        if (candidateExists) {
                            if (!mainSketchFile) {
                                mainSketchFile = candidateSketchFile;
                            }
                            else {
                                throw new Error("Multiple main sketch files found (" + path.basename(mainSketchFile) + ", " + path.basename(candidateSketchFile) + ")");
                            }
                        }
                        _e.label = 6;
                    case 6:
                        _b = _a.next();
                        return [3 /*break*/, 4];
                    case 7: return [3 /*break*/, 10];
                    case 8:
                        e_2_1 = _e.sent();
                        e_2 = { error: e_2_1 };
                        return [3 /*break*/, 10];
                    case 9:
                        try {
                            if (_b && !_b.done && (_d = _a.return)) _d.call(_a);
                        }
                        finally { if (e_2) throw e_2.error; }
                        return [7 /*endfinally*/];
                    case 10:
                        // Check main file was found.
                        if (!mainSketchFile) {
                            throw new Error("Unable to find a sketch file in directory " + sketchFolder);
                        }
                        _e.label = 11;
                    case 11:
                        _e.trys.push([11, 13, , 14]);
                        return [4 /*yield*/, fs.access(mainSketchFile, fs.constants.R_OK)];
                    case 12:
                        _e.sent();
                        return [3 /*break*/, 14];
                    case 13:
                        _c = _e.sent();
                        throw new Error('Unable to open the main sketch file.');
                    case 14: return [4 /*yield*/, fs.lstat(mainSketchFile)];
                    case 15:
                        mainSketchFileStat = _e.sent();
                        if (mainSketchFileStat.isDirectory()) {
                            throw new Error("Sketch must not be a directory.");
                        }
                        return [3 /*break*/, 17];
                    case 16:
                        sketchFolder = path.dirname(sketchPath);
                        mainSketchFile = sketchPath;
                        _e.label = 17;
                    case 17:
                        files = [];
                        rootVisited = false;
                        return [4 /*yield*/, this.simpleLocalWalk(sketchFolder, MAX_FILESYSTEM_DEPTH, function (fsPath, info, error) { return __awaiter(_this, void 0, void 0, function () {
                                var name, ext, isMain, isAdditional, _a;
                                return __generator(this, function (_b) {
                                    switch (_b.label) {
                                        case 0:
                                            if (error) {
                                                console.log("Error during sketch processing: " + error);
                                                return [2 /*return*/, error];
                                            }
                                            name = path.basename(fsPath);
                                            if (info.isDirectory()) {
                                                if (rootVisited) {
                                                    if (name.startsWith('.') || name === 'CVS' || name === 'RCS') {
                                                        return [2 /*return*/, new SkipDir()];
                                                    }
                                                }
                                                else {
                                                    rootVisited = true;
                                                }
                                                return [2 /*return*/, undefined];
                                            }
                                            if (name.startsWith('.')) {
                                                return [2 /*return*/, undefined];
                                            }
                                            ext = path.extname(fsPath);
                                            isMain = sketches_service_1.Sketch.Extensions.MAIN.indexOf(ext) !== -1;
                                            isAdditional = sketches_service_1.Sketch.Extensions.ADDITIONAL.indexOf(ext) !== -1;
                                            if (!isMain && !isAdditional) {
                                                return [2 /*return*/, undefined];
                                            }
                                            _b.label = 1;
                                        case 1:
                                            _b.trys.push([1, 3, , 4]);
                                            return [4 /*yield*/, fs.access(fsPath, fs.constants.R_OK)];
                                        case 2:
                                            _b.sent();
                                            files.push(fsPath);
                                            return [3 /*break*/, 4];
                                        case 3:
                                            _a = _b.sent();
                                            return [3 /*break*/, 4];
                                        case 4: return [2 /*return*/, undefined];
                                    }
                                });
                            }); })];
                    case 18:
                        err = _e.sent();
                        if (err) {
                            console.error("There was an error while collecting the sketch files: " + sketchPath);
                            throw err;
                        }
                        return [2 /*return*/, this.newSketch(sketchFolder, mainSketchFile, files)];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.newSketch = function (sketchFolderPath, mainFilePath, allFilesPaths) {
        var e_3, _a, e_4, _b;
        var mainFile;
        var paths = new Set();
        try {
            for (var allFilesPaths_1 = __values(allFilesPaths), allFilesPaths_1_1 = allFilesPaths_1.next(); !allFilesPaths_1_1.done; allFilesPaths_1_1 = allFilesPaths_1.next()) {
                var p = allFilesPaths_1_1.value;
                if (p === mainFilePath) {
                    mainFile = p;
                }
                else {
                    paths.add(p);
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (allFilesPaths_1_1 && !allFilesPaths_1_1.done && (_a = allFilesPaths_1.return)) _a.call(allFilesPaths_1);
            }
            finally { if (e_3) throw e_3.error; }
        }
        if (!mainFile) {
            throw new Error('Could not locate main sketch file.');
        }
        var additionalFiles = [];
        var otherSketchFiles = [];
        try {
            for (var _c = __values(Array.from(paths)), _d = _c.next(); !_d.done; _d = _c.next()) {
                var p = _d.value;
                var ext = path.extname(p);
                if (sketches_service_1.Sketch.Extensions.MAIN.indexOf(ext) !== -1) {
                    if (path.dirname(p) === sketchFolderPath) {
                        otherSketchFiles.push(p);
                    }
                }
                else if (sketches_service_1.Sketch.Extensions.ADDITIONAL.indexOf(ext) !== -1) {
                    // XXX: this is a caveat with the CLI, we do not know the `buildPath`.
                    // https://github.com/arduino/arduino-cli/blob/0483882b4f370c288d5318913657bbaa0325f534/arduino/sketch/sketch.go#L108-L110
                    additionalFiles.push(p);
                }
                else {
                    throw new Error("Unknown sketch file extension '" + ext + "'.");
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_4) throw e_4.error; }
        }
        additionalFiles.sort();
        otherSketchFiles.sort();
        return {
            uri: node_1.FileUri.create(sketchFolderPath).toString(),
            mainFileUri: node_1.FileUri.create(mainFile).toString(),
            name: path.basename(sketchFolderPath),
            additionalFileUris: additionalFiles.map(function (p) { return node_1.FileUri.create(p).toString(); }),
            otherSketchFileUris: otherSketchFiles.map(function (p) { return node_1.FileUri.create(p).toString(); })
        };
    };
    SketchesServiceImpl.prototype.simpleLocalWalk = function (root, maxDepth, walk) {
        return __awaiter(this, void 0, void 0, function () {
            var _a, info, err, files, _b, _c, _d, _e, files_1, files_1_1, file, e_5_1;
            var e_5, _f;
            return __generator(this, function (_g) {
                switch (_g.label) {
                    case 0: return [4 /*yield*/, this.lstat(root)];
                    case 1:
                        _a = _g.sent(), info = _a.info, err = _a.err;
                        if (err) {
                            return [2 /*return*/, walk(root, undefined, err)];
                        }
                        if (!info) {
                            return [2 /*return*/, new Error("Could not stat file: " + root + ".")];
                        }
                        return [4 /*yield*/, walk(root, info, err)];
                    case 2:
                        err = _g.sent();
                        if (err instanceof SkipDir) {
                            return [2 /*return*/, undefined];
                        }
                        if (!info.isDirectory()) return [3 /*break*/, 13];
                        if (maxDepth <= 0) {
                            return [2 /*return*/, walk(root, info, new Error("Filesystem bottom is too deep (directory recursion or filesystem really deep): " + root))];
                        }
                        maxDepth--;
                        files = [];
                        _g.label = 3;
                    case 3:
                        _g.trys.push([3, 5, , 6]);
                        _c = (_b = files.push).apply;
                        _d = [files];
                        return [4 /*yield*/, fs.readdir(root)];
                    case 4:
                        _c.apply(_b, _d.concat([__spread.apply(void 0, [_g.sent()])]));
                        return [3 /*break*/, 6];
                    case 5:
                        _e = _g.sent();
                        return [3 /*break*/, 6];
                    case 6:
                        _g.trys.push([6, 11, 12, 13]);
                        files_1 = __values(files), files_1_1 = files_1.next();
                        _g.label = 7;
                    case 7:
                        if (!!files_1_1.done) return [3 /*break*/, 10];
                        file = files_1_1.value;
                        return [4 /*yield*/, this.simpleLocalWalk(path.join(root, file), maxDepth, walk)];
                    case 8:
                        err = _g.sent();
                        if (err instanceof SkipDir) {
                            return [2 /*return*/, undefined];
                        }
                        _g.label = 9;
                    case 9:
                        files_1_1 = files_1.next();
                        return [3 /*break*/, 7];
                    case 10: return [3 /*break*/, 13];
                    case 11:
                        e_5_1 = _g.sent();
                        e_5 = { error: e_5_1 };
                        return [3 /*break*/, 13];
                    case 12:
                        try {
                            if (files_1_1 && !files_1_1.done && (_f = files_1.return)) _f.call(files_1);
                        }
                        finally { if (e_5) throw e_5.error; }
                        return [7 /*endfinally*/];
                    case 13: return [2 /*return*/, undefined];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.lstat = function (fsPath) {
        return __awaiter(this, void 0, void 0, function () {
            var exists, info, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, fs.exists(fsPath)];
                    case 1:
                        exists = _a.sent();
                        if (!exists) {
                            return [2 /*return*/, { info: undefined, err: new Error(fsPath + " does not exist") }];
                        }
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, fs.lstat(fsPath)];
                    case 3:
                        info = _a.sent();
                        return [2 /*return*/, { info: info, err: undefined }];
                    case 4:
                        err_1 = _a.sent();
                        return [2 /*return*/, { info: undefined, err: err_1 }];
                    case 5: return [2 /*return*/];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.createNewSketch = function () {
        return __awaiter(this, void 0, void 0, function () {
            var monthNames, today, parent, sketchBaseName, config, user, sketchName, i, sketchNameCandidate, sketchDir, sketchFile;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        monthNames = ['jan', 'feb', 'mar', 'apr', 'may', 'jun', 'jul', 'aug', 'sep', 'oct', 'nov', 'dec'];
                        today = new Date();
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                _this.temp.mkdir({ prefix: '.arduinoProIDE-unsaved' }, function (err, dirPath) {
                                    if (err) {
                                        reject(err);
                                        return;
                                    }
                                    resolve(dirPath);
                                });
                            })];
                    case 1:
                        parent = _a.sent();
                        sketchBaseName = "sketch_" + monthNames[today.getMonth()] + today.getDate();
                        return [4 /*yield*/, this.configService.getConfiguration()];
                    case 2:
                        config = _a.sent();
                        user = node_1.FileUri.fsPath(config.sketchDirUri);
                        for (i = 97; i < 97 + 26; i++) {
                            sketchNameCandidate = "" + sketchBaseName + String.fromCharCode(i);
                            // Note: we check the future destination folder (`directories.user`) for name collision and not the temp folder!
                            if (fs.existsSync(path.join(user, sketchNameCandidate))) {
                                continue;
                            }
                            sketchName = sketchNameCandidate;
                            break;
                        }
                        if (!sketchName) {
                            throw new Error('Cannot create a unique sketch name');
                        }
                        sketchDir = path.join(parent, sketchName);
                        sketchFile = path.join(sketchDir, sketchName + ".ino");
                        return [4 /*yield*/, fs.mkdirp(sketchDir)];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, fs.writeFile(sketchFile, "void setup() {\n  // put your setup code here, to run once:\n\n}\n\nvoid loop() {\n  // put your main code here, to run repeatedly:\n\n}\n", { encoding: 'utf8' })];
                    case 4:
                        _a.sent();
                        return [2 /*return*/, this.loadSketch(node_1.FileUri.create(sketchDir).toString())];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.getSketchFolder = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var currentUri;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!uri) {
                            return [2 /*return*/, undefined];
                        }
                        currentUri = new uri_1.default(uri);
                        _a.label = 1;
                    case 1:
                        if (!(currentUri && !currentUri.path.isRoot)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.isSketchFolder(currentUri.toString())];
                    case 2:
                        if (_a.sent()) {
                            return [2 /*return*/, this.loadSketch(currentUri.toString())];
                        }
                        currentUri = currentUri.parent;
                        return [3 /*break*/, 1];
                    case 3: return [2 /*return*/, undefined];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.isSketchFolder = function (uri) {
        return __awaiter(this, void 0, void 0, function () {
            var fsPath, basename, files, i, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        fsPath = node_1.FileUri.fsPath(uri);
                        if (!(fs.existsSync(fsPath) && fs.lstatSync(fsPath).isDirectory())) return [3 /*break*/, 7];
                        basename = path.basename(fsPath);
                        return [4 /*yield*/, fs.readdir(fsPath)];
                    case 1:
                        files = _b.sent();
                        i = 0;
                        _b.label = 2;
                    case 2:
                        if (!(i < files.length)) return [3 /*break*/, 7];
                        if (!(files[i] === basename + '.ino')) return [3 /*break*/, 6];
                        _b.label = 3;
                    case 3:
                        _b.trys.push([3, 5, , 6]);
                        return [4 /*yield*/, this.loadSketch(fsPath)];
                    case 4:
                        _b.sent();
                        return [2 /*return*/, true];
                    case 5:
                        _a = _b.sent();
                        return [3 /*break*/, 6];
                    case 6:
                        i++;
                        return [3 /*break*/, 2];
                    case 7: return [2 /*return*/, false];
                }
            });
        });
    };
    SketchesServiceImpl.prototype.isTemp = function (sketch) {
        return __awaiter(this, void 0, void 0, function () {
            var sketchPath, temp;
            return __generator(this, function (_a) {
                sketchPath = node_1.FileUri.fsPath(sketch.uri);
                temp = os.tmpdir();
                // Note: VS Code URI normalizes the drive letter. `C:` will be converted into `c:`.
                // https://github.com/Microsoft/vscode/issues/68325#issuecomment-462239992
                if (os_1.isWindows) {
                    if (WIN32_DRIVE_REGEXP.exec(sketchPath)) {
                        sketchPath = utils_1.firstToLowerCase(sketchPath);
                    }
                    if (WIN32_DRIVE_REGEXP.exec(temp)) {
                        temp = utils_1.firstToLowerCase(temp);
                    }
                }
                return [2 /*return*/, sketchPath.indexOf('.arduinoProIDE-unsaved') !== -1 && sketchPath.startsWith(temp)];
            });
        });
    };
    SketchesServiceImpl.prototype.copy = function (sketch, _a) {
        var destinationUri = _a.destinationUri;
        return __awaiter(this, void 0, void 0, function () {
            var source, exists, destination;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        source = node_1.FileUri.fsPath(sketch.uri);
                        return [4 /*yield*/, fs.exists(source)];
                    case 1:
                        exists = _b.sent();
                        if (!exists) {
                            throw new Error("Sketch does not exist: " + sketch);
                        }
                        destination = node_1.FileUri.fsPath(destinationUri);
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                ncp_1.ncp.ncp(source, destination, function (error) { return __awaiter(_this, void 0, void 0, function () {
                                    var newName, e_6;
                                    return __generator(this, function (_a) {
                                        switch (_a.label) {
                                            case 0:
                                                if (error) {
                                                    reject(error);
                                                    return [2 /*return*/];
                                                }
                                                newName = path.basename(destination);
                                                _a.label = 1;
                                            case 1:
                                                _a.trys.push([1, 4, , 5]);
                                                return [4 /*yield*/, fs.rename(path.join(destination, new uri_1.default(sketch.mainFileUri).path.base), path.join(destination, newName + ".ino"))];
                                            case 2:
                                                _a.sent();
                                                return [4 /*yield*/, this.loadSketch(destinationUri)];
                                            case 3:
                                                _a.sent(); // Sanity check.
                                                resolve();
                                                return [3 /*break*/, 5];
                                            case 4:
                                                e_6 = _a.sent();
                                                reject(e_6);
                                                return [3 /*break*/, 5];
                                            case 5: return [2 /*return*/];
                                        }
                                    });
                                }); });
                            })];
                    case 2:
                        _b.sent();
                        return [2 /*return*/, node_1.FileUri.create(destination).toString()];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(config_service_1.ConfigService),
        __metadata("design:type", Object)
    ], SketchesServiceImpl.prototype, "configService", void 0);
    SketchesServiceImpl = __decorate([
        inversify_1.injectable()
    ], SketchesServiceImpl);
    return SketchesServiceImpl;
}());
exports.SketchesServiceImpl = SketchesServiceImpl;
var SkipDir = /** @class */ (function (_super) {
    __extends(SkipDir, _super);
    function SkipDir() {
        var _this = _super.call(this, 'skip this directory') || this;
        Object.setPrototypeOf(_this, SkipDir.prototype);
        return _this;
    }
    return SkipDir;
}(Error));
//# sourceMappingURL=sketches-service-impl.js.map