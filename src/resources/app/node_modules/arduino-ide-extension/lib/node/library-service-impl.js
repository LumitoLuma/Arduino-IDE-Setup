"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.LibraryServiceImpl = void 0;
var inversify_1 = require("inversify");
var core_client_provider_1 = require("./core-client-provider");
var lib_pb_1 = require("./cli-protocol/commands/lib_pb");
var tool_output_service_1 = require("../common/protocol/tool-output-service");
var installable_1 = require("../common/protocol/installable");
var LibraryServiceImpl = /** @class */ (function () {
    function LibraryServiceImpl() {
    }
    LibraryServiceImpl.prototype.search = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var coreClient, client, instance, listReq, installedLibsResp, installedLibs, installedLibsIdx, installedLibs_1, installedLibs_1_1, installedLib, lib, req, resp, items;
            var e_1, _a;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0: return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _b.sent();
                        if (!coreClient) {
                            return [2 /*return*/, []];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        listReq = new lib_pb_1.LibraryListReq();
                        listReq.setInstance(instance);
                        return [4 /*yield*/, new Promise(function (resolve, reject) { return client.libraryList(listReq, function (err, resp) { return !!err ? reject(err) : resolve(resp); }); })];
                    case 2:
                        installedLibsResp = _b.sent();
                        installedLibs = installedLibsResp.getInstalledLibraryList();
                        installedLibsIdx = new Map();
                        try {
                            for (installedLibs_1 = __values(installedLibs), installedLibs_1_1 = installedLibs_1.next(); !installedLibs_1_1.done; installedLibs_1_1 = installedLibs_1.next()) {
                                installedLib = installedLibs_1_1.value;
                                if (installedLib.hasLibrary()) {
                                    lib = installedLib.getLibrary();
                                    if (lib) {
                                        installedLibsIdx.set(lib.getRealName(), installedLib);
                                    }
                                }
                            }
                        }
                        catch (e_1_1) { e_1 = { error: e_1_1 }; }
                        finally {
                            try {
                                if (installedLibs_1_1 && !installedLibs_1_1.done && (_a = installedLibs_1.return)) _a.call(installedLibs_1);
                            }
                            finally { if (e_1) throw e_1.error; }
                        }
                        req = new lib_pb_1.LibrarySearchReq();
                        req.setQuery(options.query || '');
                        req.setInstance(instance);
                        return [4 /*yield*/, new Promise(function (resolve, reject) { return client.librarySearch(req, function (err, resp) { return !!err ? reject(err) : resolve(resp); }); })];
                    case 3:
                        resp = _b.sent();
                        items = resp.getLibrariesList()
                            .filter(function (item) { return !!item.getLatest(); })
                            .slice(0, 50)
                            .map(function (item) {
                            // TODO: This seems to contain only the latest item instead of all of the items.
                            var availableVersions = item.getReleasesMap().getEntryList().map(function (_a) {
                                var _b = __read(_a, 2), key = _b[0], _ = _b[1];
                                return key;
                            }).sort(installable_1.Installable.Version.COMPARATOR);
                            var installedVersion;
                            var installed = installedLibsIdx.get(item.getName());
                            if (installed) {
                                installedVersion = installed.getLibrary().getVersion();
                            }
                            return toLibrary({
                                name: item.getName(),
                                installable: true,
                                installedVersion: installedVersion,
                            }, item.getLatest(), availableVersions);
                        });
                        return [2 /*return*/, items];
                }
            });
        });
    };
    LibraryServiceImpl.prototype.install = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var library, version, coreClient, client, instance, req, resp;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        library = options.item;
                        version = !!options.version ? options.version : library.availableVersions[0];
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _a.sent();
                        if (!coreClient) {
                            return [2 /*return*/];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        req = new lib_pb_1.LibraryInstallReq();
                        req.setInstance(instance);
                        req.setName(library.name);
                        req.setVersion(version);
                        resp = client.libraryInstall(req);
                        resp.on('data', function (r) {
                            var prog = r.getProgress();
                            if (prog) {
                                _this.toolOutputService.append({ tool: 'library', chunk: "downloading " + prog.getFile() + ": " + prog.getCompleted() + "%\n" });
                            }
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                resp.on('end', resolve);
                                resp.on('error', reject);
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    LibraryServiceImpl.prototype.uninstall = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var library, coreClient, client, instance, req, logged, resp;
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        library = options.item;
                        return [4 /*yield*/, this.coreClientProvider.client()];
                    case 1:
                        coreClient = _a.sent();
                        if (!coreClient) {
                            return [2 /*return*/];
                        }
                        client = coreClient.client, instance = coreClient.instance;
                        req = new lib_pb_1.LibraryUninstallReq();
                        req.setInstance(instance);
                        req.setName(library.name);
                        req.setVersion(library.installedVersion);
                        logged = false;
                        resp = client.libraryUninstall(req);
                        resp.on('data', function (_) {
                            if (!logged) {
                                _this.toolOutputService.append({ tool: 'library', chunk: "uninstalling " + library.name + ":" + library.installedVersion + "%\n" });
                                logged = true;
                            }
                        });
                        return [4 /*yield*/, new Promise(function (resolve, reject) {
                                resp.on('end', resolve);
                                resp.on('error', reject);
                            })];
                    case 2:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    __decorate([
        inversify_1.inject(core_client_provider_1.CoreClientProvider),
        __metadata("design:type", core_client_provider_1.CoreClientProvider)
    ], LibraryServiceImpl.prototype, "coreClientProvider", void 0);
    __decorate([
        inversify_1.inject(tool_output_service_1.ToolOutputServiceServer),
        __metadata("design:type", Object)
    ], LibraryServiceImpl.prototype, "toolOutputService", void 0);
    LibraryServiceImpl = __decorate([
        inversify_1.injectable()
    ], LibraryServiceImpl);
    return LibraryServiceImpl;
}());
exports.LibraryServiceImpl = LibraryServiceImpl;
function toLibrary(tpl, release, availableVersions) {
    return __assign(__assign({ name: '', installable: false }, tpl), { author: release.getAuthor(), availableVersions: availableVersions, description: release.getSentence(), moreInfoLink: release.getWebsite(), summary: release.getParagraph() });
}
//# sourceMappingURL=library-service-impl.js.map