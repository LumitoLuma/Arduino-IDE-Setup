"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Status;
(function (Status) {
    function isOK(status) {
        return typeof status.message !== 'string';
    }
    Status.isOK = isOK;
    Status.OK = {};
    Status.NOT_CONNECTED = { message: 'Not connected.' };
    Status.ALREADY_CONNECTED = { message: 'Already connected.' };
})(Status = exports.Status || (exports.Status = {}));
exports.MonitorServicePath = '/services/serial-monitor';
exports.MonitorService = Symbol('MonitorService');
var MonitorConfig;
(function (MonitorConfig) {
    var BaudRate;
    (function (BaudRate) {
        BaudRate.DEFAULT = 9600;
    })(BaudRate = MonitorConfig.BaudRate || (MonitorConfig.BaudRate = {}));
    var ConnectionType;
    (function (ConnectionType) {
        ConnectionType[ConnectionType["SERIAL"] = 0] = "SERIAL";
    })(ConnectionType = MonitorConfig.ConnectionType || (MonitorConfig.ConnectionType = {}));
})(MonitorConfig = exports.MonitorConfig || (exports.MonitorConfig = {}));
exports.MonitorServiceClient = Symbol('MonitorServiceClient');
var MonitorError;
(function (MonitorError) {
    var ErrorCodes;
    (function (ErrorCodes) {
        /**
         * The frontend has refreshed the browser, for instance.
         */
        ErrorCodes.CLIENT_CANCEL = 1;
        /**
         * When detaching a physical device when the duplex channel is still opened.
         */
        ErrorCodes.DEVICE_NOT_CONFIGURED = 2;
        /**
         * Another serial monitor was opened on this port. For another electron-instance, Java IDE.
         */
        ErrorCodes.DEVICE_BUSY = 3;
    })(ErrorCodes = MonitorError.ErrorCodes || (MonitorError.ErrorCodes = {}));
})(MonitorError = exports.MonitorError || (exports.MonitorError = {}));
//# sourceMappingURL=monitor-service.js.map