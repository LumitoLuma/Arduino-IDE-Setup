"use strict";
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (this && this.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Sketch = exports.SketchesService = exports.SketchesServicePath = void 0;
exports.SketchesServicePath = '/services/sketches-service';
exports.SketchesService = Symbol('SketchesService');
var Sketch;
(function (Sketch) {
    function is(arg) {
        return !!arg && 'name' in arg && 'uri' in arg && typeof arg.name === 'string' && typeof arg.uri === 'string';
    }
    Sketch.is = is;
    var Extensions;
    (function (Extensions) {
        Extensions.MAIN = ['.ino', '.pde'];
        Extensions.SOURCE = ['.c', '.cpp', '.s'];
        Extensions.ADDITIONAL = ['.h', '.c', '.hpp', '.hh', '.cpp', '.s'];
        Extensions.ALL = Array.from(new Set(__spread(Extensions.MAIN, Extensions.SOURCE, Extensions.ADDITIONAL)));
    })(Extensions = Sketch.Extensions || (Sketch.Extensions = {}));
    function isInSketch(uri, sketch) {
        var mainFileUri = sketch.mainFileUri, otherSketchFileUris = sketch.otherSketchFileUris, additionalFileUris = sketch.additionalFileUris;
        return __spread([mainFileUri], otherSketchFileUris, additionalFileUris).indexOf(uri.toString()) !== -1;
    }
    Sketch.isInSketch = isInSketch;
})(Sketch = exports.Sketch || (exports.Sketch = {}));
//# sourceMappingURL=sketches-service.js.map