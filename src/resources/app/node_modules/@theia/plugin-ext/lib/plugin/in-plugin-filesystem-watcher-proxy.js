"use strict";
/********************************************************************************
 * Copyright (C) 2018 Red Hat, Inc. and others.
 *
 * This program and the accompanying materials are made available under the
 * terms of the Eclipse Public License v. 2.0 which is available at
 * http://www.eclipse.org/legal/epl-2.0.
 *
 * This Source Code may also be made available under the following Secondary
 * Licenses when the conditions for such availability set forth in the Eclipse
 * Public License v. 2.0 are satisfied: GNU General Public License, version 2
 * with the GNU Classpath Exception which is available at
 * https://www.gnu.org/software/classpath/license.html.
 *
 * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0
 ********************************************************************************/
Object.defineProperty(exports, "__esModule", { value: true });
exports.InPluginFileSystemWatcherProxy = void 0;
var event_1 = require("@theia/core/lib/common/event");
/**
 * This class is responsible for file watchers subscription registering and file system events proxying.
 * It contains no logic, only communicates with main side to add / remove subscription and
 * delivers file system events to corresponding subscribers.
 */
var InPluginFileSystemWatcherProxy = /** @class */ (function () {
    function InPluginFileSystemWatcherProxy(proxy) {
        this.proxy = proxy;
        this.subscribers = new Map();
    }
    InPluginFileSystemWatcherProxy.prototype.createFileSystemWatcher = function (globPattern, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents) {
        var _this = this;
        var perSubscriberEventEmitter = new event_1.Emitter();
        var subscriberPrivateData = {
            event: perSubscriberEventEmitter.event
        };
        var fileWatcherSubscriberOptions = { globPattern: globPattern, ignoreCreateEvents: ignoreCreateEvents, ignoreChangeEvents: ignoreChangeEvents, ignoreDeleteEvents: ignoreDeleteEvents };
        // ids are generated by server side to be able handle several subscribers.
        this.proxy.$registerFileSystemWatcher(fileWatcherSubscriberOptions).then(function (id) {
            // this is safe, because actual subscription happens on server side and response is
            // sent right after actual subscription, so no events are possible in between.
            _this.subscribers.set(id, perSubscriberEventEmitter);
            subscriberPrivateData.unsubscribe = function () { return _this.proxy.$unregisterFileSystemWatcher(id); };
        });
        return new FileSystemWatcher(subscriberPrivateData, ignoreCreateEvents, ignoreChangeEvents, ignoreDeleteEvents);
    };
    InPluginFileSystemWatcherProxy.prototype.onFileSystemEvent = function (id, uri, type) {
        var perSubscriberEventEmitter = this.subscribers.get(id);
        if (perSubscriberEventEmitter) {
            perSubscriberEventEmitter.fire({ uri: uri, type: type });
        }
        else {
            // shouldn't happen
            // if it happens then a message was lost, unsubscribe to make state consistent
            this.proxy.$unregisterFileSystemWatcher(id);
        }
    };
    return InPluginFileSystemWatcherProxy;
}());
exports.InPluginFileSystemWatcherProxy = InPluginFileSystemWatcherProxy;
var FileSystemWatcher = /** @class */ (function () {
    function FileSystemWatcher(subscriberData, isIgnoreCreateEvents, isIgnoreChangeEvents, isIgnoreDeleteEvents) {
        var _this = this;
        if (isIgnoreCreateEvents === void 0) { isIgnoreCreateEvents = false; }
        if (isIgnoreChangeEvents === void 0) { isIgnoreChangeEvents = false; }
        if (isIgnoreDeleteEvents === void 0) { isIgnoreDeleteEvents = false; }
        this.isIgnoreCreateEvents = isIgnoreCreateEvents;
        this.isIgnoreChangeEvents = isIgnoreChangeEvents;
        this.isIgnoreDeleteEvents = isIgnoreDeleteEvents;
        this.onDidCreateEmitter = new event_1.Emitter();
        this.onDidChangeEmitter = new event_1.Emitter();
        this.onDidDeleteEmitter = new event_1.Emitter();
        this.subscriberData = subscriberData;
        subscriberData.event(function (event) {
            // Here ignore event flags are not analyzed because all the logic is
            // moved to server side to avoid unneeded data transfer via network.
            // The flags are present just to be read only accessible for user.
            switch (event.type) {
                case 'updated':
                    _this.onDidChangeEmitter.fire(event.uri);
                    break;
                case 'created':
                    _this.onDidCreateEmitter.fire(event.uri);
                    break;
                case 'deleted':
                    _this.onDidDeleteEmitter.fire(event.uri);
                    break;
            }
        });
    }
    Object.defineProperty(FileSystemWatcher.prototype, "ignoreCreateEvents", {
        get: function () {
            return this.isIgnoreCreateEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileSystemWatcher.prototype, "ignoreChangeEvents", {
        get: function () {
            return this.isIgnoreChangeEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileSystemWatcher.prototype, "ignoreDeleteEvents", {
        get: function () {
            return this.isIgnoreDeleteEvents;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileSystemWatcher.prototype, "onDidCreate", {
        get: function () {
            return this.onDidCreateEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileSystemWatcher.prototype, "onDidChange", {
        get: function () {
            return this.onDidChangeEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FileSystemWatcher.prototype, "onDidDelete", {
        get: function () {
            return this.onDidDeleteEmitter.event;
        },
        enumerable: false,
        configurable: true
    });
    FileSystemWatcher.prototype.dispose = function () {
        this.onDidCreateEmitter.dispose();
        this.onDidChangeEmitter.dispose();
        this.onDidDeleteEmitter.dispose();
        if (this.subscriberData.unsubscribe) {
            this.subscriberData.unsubscribe();
        }
    };
    return FileSystemWatcher;
}());
//# sourceMappingURL=in-plugin-filesystem-watcher-proxy.js.map