{"version":3,"sources":["webpack:///./node_modules/@theia/core/src/electron-browser/menu/electron-context-menu-renderer.ts","webpack:///./node_modules/@theia/core/src/electron-browser/menu/electron-menu-module.ts"],"names":[],"mappings":"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","file":"87.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as electron from 'electron';\nimport { inject, injectable } from 'inversify';\nimport { ContextMenuRenderer, RenderContextMenuOptions, ContextMenuAccess, FrontendApplicationContribution, CommonCommands } from '../../browser';\nimport { ElectronMainMenuFactory } from './electron-main-menu-factory';\nimport { ContextMenuContext } from '../../browser/menu/context-menu-context';\nimport { MenuPath, MenuContribution, MenuModelRegistry } from '../../common';\n\nexport class ElectronContextMenuAccess extends ContextMenuAccess {\n    constructor(readonly menu: electron.Menu) {\n        super({\n            dispose: () => menu.closePopup()\n        });\n    }\n}\n\nexport namespace ElectronTextInputContextMenu {\n    export const MENU_PATH: MenuPath = ['electron_text_input'];\n    export const UNDO_REDO_EDIT_GROUP = [...MENU_PATH, '0_undo_redo_group'];\n    export const EDIT_GROUP = [...MENU_PATH, '1_edit_group'];\n    export const SELECT_GROUP = [...MENU_PATH, '2_select_group'];\n}\n\n@injectable()\nexport class ElectronTextInputContextMenuContribution implements FrontendApplicationContribution, MenuContribution {\n\n    @inject(ContextMenuRenderer)\n    protected readonly contextMenuRenderer: ContextMenuRenderer;\n\n    onStart(): void {\n        window.document.addEventListener('contextmenu', event => {\n            if (event.target instanceof HTMLElement) {\n                const target = <HTMLElement>event.target;\n                if (target.nodeName && (target.nodeName.toLowerCase() === 'input' || target.nodeName.toLowerCase() === 'textarea')) {\n                    event.preventDefault();\n                    event.stopPropagation();\n                    this.contextMenuRenderer.render({\n                        anchor: event,\n                        menuPath: ElectronTextInputContextMenu.MENU_PATH,\n                        onHide: () => target.focus()\n                    });\n                }\n            }\n        });\n    }\n\n    registerMenus(registry: MenuModelRegistry): void {\n        registry.registerMenuAction(ElectronTextInputContextMenu.UNDO_REDO_EDIT_GROUP, { commandId: CommonCommands.UNDO.id });\n        registry.registerMenuAction(ElectronTextInputContextMenu.UNDO_REDO_EDIT_GROUP, { commandId: CommonCommands.REDO.id });\n        registry.registerMenuAction(ElectronTextInputContextMenu.EDIT_GROUP, { commandId: CommonCommands.CUT.id });\n        registry.registerMenuAction(ElectronTextInputContextMenu.EDIT_GROUP, { commandId: CommonCommands.COPY.id });\n        registry.registerMenuAction(ElectronTextInputContextMenu.EDIT_GROUP, { commandId: CommonCommands.PASTE.id });\n        registry.registerMenuAction(ElectronTextInputContextMenu.SELECT_GROUP, { commandId: CommonCommands.SELECT_ALL.id });\n    }\n\n}\n\n@injectable()\nexport class ElectronContextMenuRenderer extends ContextMenuRenderer {\n\n    @inject(ContextMenuContext)\n    protected readonly context: ContextMenuContext;\n\n    constructor(@inject(ElectronMainMenuFactory) private menuFactory: ElectronMainMenuFactory) {\n        super();\n    }\n\n    protected doRender({ menuPath, anchor, args, onHide }: RenderContextMenuOptions): ElectronContextMenuAccess {\n        const menu = this.menuFactory.createContextMenu(menuPath, args);\n        const { x, y } = anchor instanceof MouseEvent ? { x: anchor.clientX, y: anchor.clientY } : anchor!;\n        // x and y values must be Ints or else there is a conversion error\n        menu.popup({ x: Math.round(x), y: Math.round(y) });\n        // native context menu stops the event loop, so there is no keyboard events\n        this.context.resetAltPressed();\n        if (onHide) {\n            menu.once('menu-will-close', () => onHide());\n        }\n        return new ElectronContextMenuAccess(menu);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { CommandContribution, MenuContribution } from '../../common';\nimport { FrontendApplicationContribution, ContextMenuRenderer, KeybindingContribution, KeybindingContext } from '../../browser';\nimport { ElectronMainMenuFactory } from './electron-main-menu-factory';\nimport { ElectronContextMenuRenderer, ElectronTextInputContextMenuContribution } from './electron-context-menu-renderer';\nimport { ElectronMenuContribution } from './electron-menu-contribution';\n\nexport default new ContainerModule(bind => {\n    bind(ElectronMainMenuFactory).toSelf().inSingletonScope();\n    bind(ContextMenuRenderer).to(ElectronContextMenuRenderer).inSingletonScope();\n    bind(KeybindingContext).toConstantValue({\n        id: 'theia.context',\n        isEnabled: true\n    });\n\n    bind(ElectronMenuContribution).toSelf().inSingletonScope();\n    for (const serviceIdentifier of [FrontendApplicationContribution, KeybindingContribution, CommandContribution, MenuContribution]) {\n        bind(serviceIdentifier).toService(ElectronMenuContribution);\n    }\n    bind(FrontendApplicationContribution).to(ElectronTextInputContextMenuContribution).inSingletonScope();\n    bind(MenuContribution).to(ElectronTextInputContextMenuContribution).inSingletonScope();\n});\n"],"sourceRoot":""}