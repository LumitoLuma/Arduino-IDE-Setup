{"version":3,"sources":["webpack:///./node_modules/arduino-ide-extension/src/browser/boards/boards-data-store.ts"],"names":[],"mappings":"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","file":"55.bundle.js","sourcesContent":["import { injectable, inject, named } from 'inversify';\r\nimport { ILogger } from '@theia/core/lib/common/logger';\r\nimport { deepClone } from '@theia/core/lib/common/objects';\r\nimport { MaybePromise } from '@theia/core/lib/common/types';\r\nimport { Event, Emitter } from '@theia/core/lib/common/event';\r\nimport { FrontendApplicationContribution, LocalStorageService } from '@theia/core/lib/browser';\r\nimport { notEmpty } from '../../common/utils';\r\nimport { BoardsServiceClientImpl } from './boards-service-client-impl';\r\nimport { BoardsService, ConfigOption, Installable, BoardDetails, Programmer } from '../../common/protocol';\r\n\r\n@injectable()\r\nexport class BoardsDataStore implements FrontendApplicationContribution {\r\n\r\n    @inject(ILogger)\r\n    @named('store')\r\n    protected readonly logger: ILogger;\r\n\r\n    @inject(BoardsService)\r\n    protected readonly boardsService: BoardsService;\r\n\r\n    @inject(BoardsServiceClientImpl)\r\n    protected readonly boardsServiceClient: BoardsServiceClientImpl;\r\n\r\n    @inject(LocalStorageService)\r\n    protected readonly storageService: LocalStorageService;\r\n\r\n    protected readonly onChangedEmitter = new Emitter<void>();\r\n\r\n    onStart(): void {\r\n        this.boardsServiceClient.onBoardsPackageInstalled(async ({ pkg }) => {\r\n            const { installedVersion: version } = pkg;\r\n            if (!version) {\r\n                return;\r\n            }\r\n            let shouldFireChanged = false;\r\n            for (const fqbn of pkg.boards.map(({ fqbn }) => fqbn).filter(notEmpty).filter(fqbn => !!fqbn)) {\r\n                const key = this.getStorageKey(fqbn, version);\r\n                let data = await this.storageService.getData<ConfigOption[] | undefined>(key);\r\n                if (!data || !data.length) {\r\n                    const details = await this.getBoardDetailsSafe(fqbn);\r\n                    if (details) {\r\n                        data = details.configOptions;\r\n                        if (data.length) {\r\n                            await this.storageService.setData(key, data);\r\n                            shouldFireChanged = true;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (shouldFireChanged) {\r\n                this.fireChanged();\r\n            }\r\n        });\r\n    }\r\n\r\n    get onChanged(): Event<void> {\r\n        return this.onChangedEmitter.event;\r\n    }\r\n\r\n    async appendConfigToFqbn(\r\n        fqbn: string,\r\n        boardsPackageVersion: MaybePromise<Installable.Version | undefined> = this.getBoardsPackageVersion(fqbn)): Promise<string> {\r\n\r\n        const { configOptions } = await this.getData(fqbn, boardsPackageVersion);\r\n        return ConfigOption.decorate(fqbn, configOptions);\r\n    }\r\n\r\n    async getData(\r\n        fqbn: string,\r\n        boardsPackageVersion: MaybePromise<Installable.Version | undefined> = this.getBoardsPackageVersion(fqbn)): Promise<BoardsDataStore.Data> {\r\n\r\n        const version = await boardsPackageVersion;\r\n        if (!version) {\r\n            return BoardsDataStore.Data.EMPTY;\r\n        }\r\n        const key = this.getStorageKey(fqbn, version);\r\n        let data = await this.storageService.getData<BoardsDataStore.Data | undefined>(key, undefined);\r\n        if (data) {\r\n            if (data.programmers !== undefined) { // to be backward compatible. We did not save the `programmers` into the `localStorage`.\r\n                return data;\r\n            }\r\n        }\r\n\r\n        const boardDetails = await this.getBoardDetailsSafe(fqbn);\r\n        if (!boardDetails) {\r\n            return BoardsDataStore.Data.EMPTY;\r\n        }\r\n\r\n        data = { configOptions: boardDetails.configOptions, programmers: boardDetails.programmers };\r\n        await this.storageService.setData(key, data);\r\n        return data;\r\n    }\r\n\r\n    async selectProgrammer(\r\n        { fqbn, selectedProgrammer }: { fqbn: string, selectedProgrammer: Programmer },\r\n        boardsPackageVersion: MaybePromise<Installable.Version | undefined> = this.getBoardsPackageVersion(fqbn)): Promise<boolean> {\r\n\r\n        const data = deepClone(await this.getData(fqbn, boardsPackageVersion));\r\n        const { programmers } = data;\r\n        if (!programmers.find(p => Programmer.equals(selectedProgrammer, p))) {\r\n            return false;\r\n        }\r\n\r\n        const version = await boardsPackageVersion;\r\n        if (!version) {\r\n            return false;\r\n        }\r\n\r\n        await this.setData({ fqbn, data: { ...data, selectedProgrammer }, version });\r\n        this.fireChanged();\r\n        return true;\r\n    }\r\n\r\n    async selectConfigOption(\r\n        { fqbn, option, selectedValue }: { fqbn: string, option: string, selectedValue: string },\r\n        boardsPackageVersion: MaybePromise<Installable.Version | undefined> = this.getBoardsPackageVersion(fqbn)): Promise<boolean> {\r\n\r\n        const data = deepClone(await this.getData(fqbn, boardsPackageVersion));\r\n        const { configOptions } = data;\r\n        const configOption = configOptions.find(c => c.option === option);\r\n        if (!configOption) {\r\n            return false;\r\n        }\r\n        let updated = false;\r\n        for (const value of configOption.values) {\r\n            if (value.value === selectedValue) {\r\n                (value as any).selected = true;\r\n                updated = true;\r\n            } else {\r\n                (value as any).selected = false;\r\n            }\r\n        }\r\n        if (!updated) {\r\n            return false;\r\n        }\r\n        const version = await boardsPackageVersion;\r\n        if (!version) {\r\n            return false;\r\n        }\r\n\r\n        await this.setData({ fqbn, data, version });\r\n        this.fireChanged();\r\n        return true;\r\n    }\r\n\r\n    protected async setData(\r\n        { fqbn, data, version }: { fqbn: string, data: BoardsDataStore.Data, version: Installable.Version }): Promise<void> {\r\n\r\n        const key = this.getStorageKey(fqbn, version);\r\n        return this.storageService.setData(key, data);\r\n    }\r\n\r\n    protected getStorageKey(fqbn: string, version: Installable.Version): string {\r\n        return `.arduinoProIDE-configOptions-${version}-${fqbn}`;\r\n    }\r\n\r\n    protected async getBoardDetailsSafe(fqbn: string): Promise<BoardDetails | undefined> {\r\n        try {\r\n            const details = this.boardsService.getBoardDetails({ fqbn });\r\n            return details;\r\n        } catch (err) {\r\n            if (err instanceof Error && err.message.includes('loading board data') && err.message.includes('is not installed')) {\r\n                this.logger.warn(`The boards package is not installed for board with FQBN: ${fqbn}`);\r\n            } else {\r\n                this.logger.error(`An unexpected error occurred while retrieving the board details for ${fqbn}.`, err);\r\n            }\r\n            return undefined;\r\n        }\r\n    }\r\n\r\n    protected fireChanged(): void {\r\n        this.onChangedEmitter.fire();\r\n    }\r\n\r\n    protected async getBoardsPackageVersion(fqbn: string): Promise<Installable.Version | undefined> {\r\n        if (!fqbn) {\r\n            return undefined;\r\n        }\r\n        const boardsPackage = await this.boardsService.getContainerBoardPackage({ fqbn });\r\n        if (!boardsPackage) {\r\n            return undefined;\r\n        }\r\n        return boardsPackage.installedVersion;\r\n    }\r\n\r\n}\r\n\r\nexport namespace BoardsDataStore {\r\n    export interface Data {\r\n        readonly configOptions: ConfigOption[];\r\n        readonly programmers: Programmer[];\r\n        readonly selectedProgrammer?: Programmer;\r\n    }\r\n    export namespace Data {\r\n        export const EMPTY: Data = {\r\n            configOptions: [],\r\n            programmers: []\r\n        };\r\n    }\r\n}\r\n"],"sourceRoot":""}