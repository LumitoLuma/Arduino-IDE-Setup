{"version":3,"sources":["webpack:///./node_modules/arduino-ide-extension/src/browser/boards/quick-open/boards-quick-open-module.ts","webpack:///./node_modules/arduino-ide-extension/src/browser/boards/quick-open/boards-quick-open-service.ts"],"names":[],"mappings":"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","file":"89.bundle.js","sourcesContent":["import { ContainerModule } from 'inversify';\r\nimport { ILogger } from '@theia/core/lib/common/logger';\r\nimport { CommandContribution } from '@theia/core/lib/common/command';\r\nimport { QuickOpenContribution } from '@theia/core/lib/browser/quick-open';\r\nimport { KeybindingContribution } from '@theia/core/lib/browser/keybinding';\r\nimport { BoardsQuickOpenService } from './boards-quick-open-service';\r\n\r\nexport default new ContainerModule(bind => {\r\n    bind(BoardsQuickOpenService).toSelf().inSingletonScope();\r\n    bind(CommandContribution).toService(BoardsQuickOpenService);\r\n    bind(KeybindingContribution).toService(BoardsQuickOpenService);\r\n    bind(QuickOpenContribution).toService(BoardsQuickOpenService);\r\n    bind(ILogger).toDynamicValue(({ container }) => container.get<ILogger>(ILogger).child('boards-quick-open'))\r\n        .inSingletonScope()\r\n        .whenTargetNamed('boards-quick-open');\r\n});\r\n","import * as fuzzy from 'fuzzy';\r\nimport { inject, injectable, postConstruct, named } from 'inversify';\r\nimport { ILogger } from '@theia/core/lib/common/logger';\r\nimport { CommandContribution, CommandRegistry, Command } from '@theia/core/lib/common/command';\r\nimport { KeybindingContribution, KeybindingRegistry } from '@theia/core/lib/browser/keybinding';\r\nimport { QuickOpenItem, QuickOpenModel, QuickOpenMode, QuickOpenGroupItem } from '@theia/core/lib/common/quick-open-model';\r\nimport {\r\n    QuickOpenService,\r\n    QuickOpenHandler,\r\n    QuickOpenOptions,\r\n    QuickOpenItemOptions,\r\n    QuickOpenContribution,\r\n    QuickOpenActionProvider,\r\n    QuickOpenHandlerRegistry,\r\n    QuickOpenGroupItemOptions\r\n} from '@theia/core/lib/browser/quick-open';\r\nimport { naturalCompare } from '../../../common/utils';\r\nimport { BoardsService, Port, Board, ConfigOption, ConfigValue } from '../../../common/protocol';\r\nimport { CoreServiceClientImpl } from '../../core-service-client-impl';\r\nimport { BoardsDataStore } from '../boards-data-store';\r\nimport { BoardsServiceClientImpl, AvailableBoard } from '../boards-service-client-impl';\r\n\r\n@injectable()\r\nexport class BoardsQuickOpenService implements QuickOpenContribution, QuickOpenModel, QuickOpenHandler, CommandContribution, KeybindingContribution, Command {\r\n\r\n    readonly id = 'arduino-boards-quick-open';\r\n    readonly prefix = '|';\r\n    readonly description = 'Configure Available Boards';\r\n    readonly label: 'Configure Available Boards';\r\n\r\n    @inject(ILogger)\r\n    @named('boards-quick-open')\r\n    protected readonly logger: ILogger;\r\n\r\n    @inject(QuickOpenService)\r\n    protected readonly quickOpenService: QuickOpenService;\r\n\r\n    @inject(BoardsService)\r\n    protected readonly boardsService: BoardsService;\r\n\r\n    @inject(BoardsServiceClientImpl)\r\n    protected readonly boardsServiceClient: BoardsServiceClientImpl;\r\n\r\n    @inject(BoardsDataStore)\r\n    protected readonly boardsDataStore: BoardsDataStore;\r\n\r\n    @inject(CoreServiceClientImpl)\r\n    protected coreServiceClient: CoreServiceClientImpl;\r\n\r\n    protected isOpen: boolean = false;\r\n    protected currentQuery: string = '';\r\n    // Attached boards plus the user's config.\r\n    protected availableBoards: AvailableBoard[] = [];\r\n    // Only for the `selected` one from the `availableBoards`. Note: the `port` of the `selected` is optional.\r\n    protected data: BoardsDataStore.Data = BoardsDataStore.Data.EMPTY;\r\n    protected allBoards: Board.Detailed[] = []\r\n    protected selectedBoard?: (AvailableBoard & { port: Port });\r\n\r\n    // `init` name is used by the `QuickOpenHandler`.\r\n    @postConstruct()\r\n    protected postConstruct(): void {\r\n        this.coreServiceClient.onIndexUpdated(() => this.update(this.availableBoards));\r\n        this.boardsServiceClient.onAvailableBoardsChanged(availableBoards => this.update(availableBoards));\r\n        this.update(this.boardsServiceClient.availableBoards);\r\n    }\r\n\r\n    registerCommands(registry: CommandRegistry): void {\r\n        registry.registerCommand(this, { execute: () => this.open() });\r\n    }\r\n\r\n    registerKeybindings(registry: KeybindingRegistry): void {\r\n        registry.registerKeybinding({ command: this.id, keybinding: 'ctrlCmd+k ctrlCmd+b' });\r\n    }\r\n\r\n    registerQuickOpenHandlers(registry: QuickOpenHandlerRegistry): void {\r\n        registry.registerHandler(this);\r\n    }\r\n\r\n    getModel(): QuickOpenModel {\r\n        return this;\r\n    }\r\n\r\n    getOptions(): QuickOpenOptions {\r\n        let placeholder = '';\r\n        if (!this.selectedBoard) {\r\n            placeholder += 'No board selected.';\r\n        }\r\n        placeholder += 'Type to filter boards';\r\n        if (this.data.configOptions.length) {\r\n            placeholder += ' or use the ↓↑ keys to adjust the board settings...';\r\n        } else {\r\n            placeholder += '...';\r\n        }\r\n        return {\r\n            placeholder,\r\n            fuzzyMatchLabel: true,\r\n            onClose: () => this.isOpen = false\r\n        };\r\n    }\r\n\r\n    open(): void {\r\n        this.isOpen = true;\r\n        this.quickOpenService.open(this, this.getOptions());\r\n    }\r\n\r\n    onType(\r\n        lookFor: string,\r\n        acceptor: (items: QuickOpenItem<QuickOpenItemOptions>[], actionProvider?: QuickOpenActionProvider) => void): void {\r\n\r\n        this.currentQuery = lookFor;\r\n        const fuzzyFilter = this.fuzzyFilter(lookFor);\r\n        const availableBoards = this.availableBoards.filter(AvailableBoard.hasPort).filter(({ name }) => fuzzyFilter(name));\r\n        const toAccept: QuickOpenItem<QuickOpenItemOptions>[] = [];\r\n\r\n        // Show the selected attached in a different group.\r\n        if (this.selectedBoard && fuzzyFilter(this.selectedBoard.name)) {\r\n            toAccept.push(this.toQuickItem(this.selectedBoard, { groupLabel: 'Selected Board' }));\r\n        }\r\n\r\n        // Filter the selected from the attached ones.\r\n        toAccept.push(...availableBoards.filter(board => board !== this.selectedBoard).map((board, i) => {\r\n            let group: QuickOpenGroupItemOptions | undefined = undefined;\r\n            if (i === 0) {\r\n                // If no `selectedBoard`, then this item is the top one, no borders required.\r\n                group = { groupLabel: 'Attached Boards', showBorder: !!this.selectedBoard };\r\n            }\r\n            return this.toQuickItem(board, group);\r\n        }));\r\n\r\n        // Show the config only if the `input` is empty.\r\n        if (!lookFor.trim().length) {\r\n            toAccept.push(...this.data.configOptions.map((config, i) => {\r\n                let group: QuickOpenGroupItemOptions | undefined = undefined;\r\n                if (i === 0) {\r\n                    group = { groupLabel: 'Board Settings', showBorder: true };\r\n                }\r\n                return this.toQuickItem(config, group);\r\n            }));\r\n        } else {\r\n            toAccept.push(...this.allBoards.filter(({ name }) => fuzzyFilter(name)).map((board, i) => {\r\n                let group: QuickOpenGroupItemOptions | undefined = undefined;\r\n                if (i === 0) {\r\n                    group = { groupLabel: 'Boards', showBorder: true };\r\n                }\r\n                return this.toQuickItem(board, group);\r\n            }));\r\n        }\r\n\r\n        acceptor(toAccept);\r\n    }\r\n\r\n    private fuzzyFilter(lookFor: string): (inputString: string) => boolean {\r\n        const shouldFilter = !!lookFor.trim().length;\r\n        return (inputString: string) => shouldFilter ? fuzzy.test(lookFor.toLocaleLowerCase(), inputString.toLocaleLowerCase()) : true;\r\n    }\r\n\r\n    protected async update(availableBoards: AvailableBoard[]): Promise<void> {\r\n        // `selectedBoard` is not an attached board, we need to show the board settings for it (TODO: clarify!)\r\n        const selectedBoard = availableBoards.filter(AvailableBoard.hasPort).find(({ selected }) => selected);\r\n        const [data, boards] = await Promise.all([\r\n            selectedBoard && selectedBoard.fqbn ? this.boardsDataStore.getData(selectedBoard.fqbn) : Promise.resolve(BoardsDataStore.Data.EMPTY),\r\n            this.boardsService.allBoards({})\r\n        ]);\r\n        this.allBoards = Board.decorateBoards(selectedBoard, boards)\r\n            .filter(board => !availableBoards.some(availableBoard => Board.sameAs(availableBoard, board)));\r\n        this.availableBoards = availableBoards;\r\n        this.data = data;\r\n        this.selectedBoard = selectedBoard;\r\n\r\n        if (this.isOpen) {\r\n            // Hack, to update the state without closing and reopening the quick open widget.\r\n            (this.quickOpenService as any).onType(this.currentQuery);\r\n        }\r\n    }\r\n\r\n    protected toQuickItem(item: BoardsQuickOpenService.Item, group?: QuickOpenGroupItemOptions): QuickOpenItem<QuickOpenItemOptions> {\r\n        let options: QuickOpenItemOptions;\r\n        if (AvailableBoard.is(item)) {\r\n            const description = `on ${Port.toString(item.port)}`\r\n            options = {\r\n                label: `${item.name}`,\r\n                description,\r\n                descriptionHighlights: [\r\n                    {\r\n                        start: 0,\r\n                        end: description.length\r\n                    }\r\n                ],\r\n                run: this.toRun(() => this.boardsServiceClient.boardsConfig = ({ selectedBoard: item, selectedPort: item.port }))\r\n            };\r\n        } else if (ConfigOption.is(item)) {\r\n            const selected = item.values.find(({ selected }) => selected);\r\n            const value = selected ? selected.label : 'Not set';\r\n            const label = `${item.label}: ${value}`;\r\n            options = {\r\n                label,\r\n                // Intended to match the value part of a board setting.\r\n                // NOTE: this does not work, as `fuzzyMatchLabel: true` is set. Manual highlighting is ignored, apparently.\r\n                labelHighlights: [\r\n                    {\r\n                        start: label.length - value.length,\r\n                        end: label.length\r\n                    }\r\n                ],\r\n                run: (mode) => {\r\n                    if (mode === QuickOpenMode.OPEN) {\r\n                        this.setConfig(item);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            };\r\n            if (!selected) {\r\n                options.description = 'Not set';\r\n            };\r\n        } else {\r\n            options = {\r\n                label: `${item.name}`,\r\n                description: `${item.missing ? '' : `[installed with '${item.packageName}']`}`,\r\n                run: (mode) => {\r\n                    if (mode === QuickOpenMode.OPEN) {\r\n                        this.selectBoard(item);\r\n                        return false;\r\n                    }\r\n                    return true;\r\n                }\r\n            };\r\n        }\r\n        if (group) {\r\n            return new QuickOpenGroupItem<QuickOpenGroupItemOptions>({ ...options, ...group });\r\n        } else {\r\n            return new QuickOpenItem<QuickOpenItemOptions>(options);\r\n        }\r\n    }\r\n\r\n    protected toRun(run: (() => void)): ((mode: QuickOpenMode) => boolean) {\r\n        return (mode) => {\r\n            if (mode !== QuickOpenMode.OPEN) {\r\n                return false;\r\n            }\r\n            run();\r\n            return true;\r\n        };\r\n    }\r\n\r\n    protected async selectBoard(board: Board): Promise<void> {\r\n        const allPorts = this.availableBoards.filter(AvailableBoard.hasPort).map(({ port }) => port).sort(Port.compare);\r\n        const toItem = (port: Port) => new QuickOpenItem<QuickOpenItemOptions>({\r\n            label: Port.toString(port, { useLabel: true }),\r\n            run: this.toRun(() => {\r\n                this.boardsServiceClient.boardsConfig = {\r\n                    selectedBoard: board,\r\n                    selectedPort: port\r\n                };\r\n            })\r\n        });\r\n        const options = {\r\n            placeholder: `Select a port for '${board.name}'. Press 'Enter' to confirm or 'Escape' to cancel.`,\r\n            fuzzyMatchLabel: true\r\n        }\r\n        this.quickOpenService.open({\r\n            onType: (lookFor, acceptor) => {\r\n                const fuzzyFilter = this.fuzzyFilter(lookFor);\r\n                acceptor(allPorts.filter(({ address }) => fuzzyFilter(address)).map(toItem));\r\n            }\r\n        }, options);\r\n    }\r\n\r\n    protected async setConfig(config: ConfigOption): Promise<void> {\r\n        const toItem = (value: ConfigValue) => new QuickOpenItem<QuickOpenItemOptions>({\r\n            label: value.label,\r\n            iconClass: value.selected ? 'fa fa-check' : '',\r\n            run: this.toRun(() => {\r\n                if (!this.selectedBoard) {\r\n                    this.logger.warn(`Could not alter the boards settings. No board selected. ${JSON.stringify(config)}`);\r\n                    return;\r\n                }\r\n                if (!this.selectedBoard.fqbn) {\r\n                    this.logger.warn(`Could not alter the boards settings. The selected board does not have a FQBN. ${JSON.stringify(this.selectedBoard)}`);\r\n                    return;\r\n                }\r\n                const { fqbn } = this.selectedBoard;\r\n                this.boardsDataStore.selectConfigOption({\r\n                    fqbn,\r\n                    option: config.option,\r\n                    selectedValue: value.value\r\n                });\r\n            })\r\n        });\r\n        const options = {\r\n            placeholder: `Configure '${config.label}'. Press 'Enter' to confirm or 'Escape' to cancel.`,\r\n            fuzzyMatchLabel: true\r\n        }\r\n        this.quickOpenService.open({\r\n            onType: (lookFor, acceptor) => {\r\n                const fuzzyFilter = this.fuzzyFilter(lookFor);\r\n                acceptor(config.values\r\n                    .filter(({ label }) => fuzzyFilter(label))\r\n                    .sort((left, right) => naturalCompare(left.label, right.label))\r\n                    .map(toItem));\r\n            }\r\n        }, options);\r\n    }\r\n\r\n}\r\n\r\nexport namespace BoardsQuickOpenService {\r\n    export type Item = AvailableBoard & { port: Port } | Board.Detailed | ConfigOption;\r\n}\r\n"],"sourceRoot":""}