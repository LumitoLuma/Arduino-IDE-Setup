{"version":3,"sources":["webpack:///./node_modules/@theia/core/src/node/file-uri.ts","webpack:///./node_modules/@theia/filesystem/src/electron-browser/file-dialog/electron-file-dialog-module.ts","webpack:///./node_modules/@theia/filesystem/src/electron-browser/file-dialog/electron-file-dialog-service.ts"],"names":[],"mappings":"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","file":"81.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { URI as Uri } from 'vscode-uri';\nimport URI from '../common/uri';\nimport { isWindows } from '../common/os';\n\nexport namespace FileUri {\n\n    const windowsDriveRegex = /^([^:/?#]+?):$/;\n\n    /**\n     * Creates a new file URI from the filesystem path argument.\n     * @param fsPath the filesystem path.\n     */\n    export function create(fsPath_: string): URI {\n        return new URI(Uri.file(fsPath_));\n    }\n\n    /**\n     * Returns with the platform specific FS path that is represented by the URI argument.\n     *\n     * @param uri the file URI that has to be resolved to a platform specific FS path.\n     */\n    export function fsPath(uri: URI | string): string {\n        if (typeof uri === 'string') {\n            return fsPath(new URI(uri));\n        } else {\n            /*\n             * A uri for the root of a Windows drive, eg file:\\\\\\c%3A, is converted to c:\n             * by the Uri class.  However file:\\\\\\c%3A is unambiguously a uri to the root of\n             * the drive and c: is interpreted as the default directory for the c drive\n             * (by, for example, the readdir function in the fs-extra module).\n             * A backslash must be appended to the drive, eg c:\\, to ensure the correct path.\n             */\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const fsPathFromVsCodeUri = (uri as any).codeUri.fsPath;\n            if (isWindows) {\n                const isWindowsDriveRoot = windowsDriveRegex.exec(fsPathFromVsCodeUri);\n                if (isWindowsDriveRoot) {\n                    return fsPathFromVsCodeUri + '\\\\';\n                }\n            }\n            return fsPathFromVsCodeUri;\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { FileDialogService } from '../../browser/file-dialog/file-dialog-service';\nimport { ElectronFileDialogService } from './electron-file-dialog-service';\n\nexport default new ContainerModule(bind => {\n    bind(ElectronFileDialogService).toSelf().inSingletonScope();\n    bind(FileDialogService).toService(ElectronFileDialogService);\n});\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { remote, FileFilter, OpenDialogOptions, SaveDialogOptions } from 'electron';\nimport URI from '@theia/core/lib/common/uri';\nimport { isOSX } from '@theia/core/lib/common/os';\nimport { MaybeArray } from '@theia/core/lib/common/types';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { FileStat } from '../../common';\nimport { FileAccess } from '../../common/filesystem';\nimport { DefaultFileDialogService, OpenFileDialogProps, SaveFileDialogProps } from '../../browser/file-dialog';\n\n// See https://github.com/electron/electron/blob/v9.0.2/docs/api/dialog.md\n// These properties get extended with newer versions of Electron\ntype DialogProperties = 'openFile' | 'openDirectory' | 'multiSelections' | 'showHiddenFiles' |\n    'createDirectory' | 'promptToCreate' | 'noResolveAliases' | 'treatPackageAsDirectory' | 'dontAddToRecent';\n\n//\n// We are OK to use this here because the electron backend and frontend are on the same host.\n// If required, we can move this single service (and its module) to a dedicated Theia extension,\n// and at packaging time, clients can decide whether they need the native or the browser-based\n// solution.\n//\nimport { FileUri } from '@theia/core/lib/node/file-uri';\n\n@injectable()\nexport class ElectronFileDialogService extends DefaultFileDialogService {\n\n    @inject(MessageService) protected readonly messageService: MessageService;\n\n    async showOpenDialog(props: OpenFileDialogProps & { canSelectMany: true }, folder?: FileStat): Promise<MaybeArray<URI> | undefined>;\n    async showOpenDialog(props: OpenFileDialogProps, folder?: FileStat): Promise<URI | undefined>;\n    async showOpenDialog(props: OpenFileDialogProps, folder?: FileStat): Promise<MaybeArray<URI> | undefined> {\n        const rootNode = await this.getRootNode(folder);\n        if (rootNode) {\n            const { filePaths } = await remote.dialog.showOpenDialog(this.toOpenDialogOptions(rootNode.uri, props));\n            if (filePaths.length === 0) {\n                return undefined;\n            }\n\n            const uris = filePaths.map(path => FileUri.create(path));\n            const canAccess = await this.canReadWrite(uris);\n            const result = canAccess ? uris.length === 1 ? uris[0] : uris : undefined;\n            return result;\n        }\n        return undefined;\n    }\n\n    async showSaveDialog(props: SaveFileDialogProps, folder?: FileStat): Promise<URI | undefined> {\n        const rootNode = await this.getRootNode(folder);\n        if (rootNode) {\n            const { filePath } = await remote.dialog.showSaveDialog(this.toSaveDialogOptions(rootNode.uri, props));\n            if (!filePath) {\n                return undefined;\n            }\n\n            const uri = FileUri.create(filePath);\n            const exists = await this.fileSystem.exists(uri.toString());\n            if (!exists) {\n                return uri;\n            }\n\n            const canAccess = await this.canReadWrite(uri);\n            return canAccess ? uri : undefined;\n        }\n        return undefined;\n    }\n\n    protected async canReadWrite(uris: MaybeArray<URI>): Promise<boolean> {\n        for (const uri of Array.isArray(uris) ? uris : [uris]) {\n            if (!(await this.fileSystem.access(uri.toString(), FileAccess.Constants.R_OK | FileAccess.Constants.W_OK))) {\n                this.messageService.error(`Cannot access resource at ${uri.path}.`);\n                return false;\n            }\n        }\n        return true;\n    }\n\n    protected toDialogOptions(uri: URI, props: SaveFileDialogProps | OpenFileDialogProps, dialogTitle: string): electron.FileDialogProps {\n        const title = props.title || dialogTitle;\n        const defaultPath = FileUri.fsPath(uri);\n        const filters: FileFilter[] = [{ name: 'All Files', extensions: ['*'] }];\n        if (props.filters) {\n            filters.push(...Object.keys(props.filters).map(key => ({ name: key, extensions: props.filters![key] })));\n        }\n        return { title, defaultPath, filters };\n    }\n\n    protected toOpenDialogOptions(uri: URI, props: OpenFileDialogProps): OpenDialogOptions {\n        const properties = electron.dialog.toDialogProperties(props);\n        const buttonLabel = props.openLabel;\n        return { ...this.toDialogOptions(uri, props, 'Open'), properties, buttonLabel };\n    }\n\n    protected toSaveDialogOptions(uri: URI, props: SaveFileDialogProps): SaveDialogOptions {\n        const buttonLabel = props.saveLabel;\n        const defaultPath = props.inputValue;\n        return { ...this.toDialogOptions(uri, props, 'Save'), buttonLabel, defaultPath };\n    }\n\n}\n\nexport namespace electron {\n\n    /**\n     * Common \"super\" interface of the `electron.SaveDialogOptions` and `electron.OpenDialogOptions` types.\n     */\n    export interface FileDialogProps {\n\n        /**\n         * The dialog title.\n         */\n        readonly title?: string;\n\n        /**\n         * The default path, where the dialog opens. Requires an FS path.\n         */\n        readonly defaultPath?: string;\n\n        /**\n         * Resource filter.\n         */\n        readonly filters?: FileFilter[];\n\n    }\n\n    export namespace dialog {\n\n        /**\n         * Converts the Theia specific `OpenFileDialogProps` into an electron specific array.\n         *\n         * Note: On Windows and Linux an open dialog can not be both a file selector and a directory selector,\n         * so if you set properties to ['openFile', 'openDirectory'] on these platforms, a directory selector will be shown.\n         *\n         * See: https://github.com/electron/electron/issues/10252#issuecomment-322012159\n         */\n        export function toDialogProperties(props: OpenFileDialogProps): Array<DialogProperties> {\n            if (!isOSX && props.canSelectFiles !== false && props.canSelectFolders === true) {\n                throw new Error(`Illegal props. Cannot have 'canSelectFiles' and 'canSelectFolders' at the same times. Props was: ${JSON.stringify(props)}.`);\n            }\n            const properties: Array<DialogProperties> = [];\n            if (!isOSX) {\n                if (props.canSelectFiles !== false && props.canSelectFolders !== true) {\n                    properties.push('openFile');\n                }\n                if (props.canSelectFolders === true && props.canSelectFiles === false) {\n                    properties.push('openDirectory');\n                }\n            } else {\n                if (props.canSelectFiles !== false) {\n                    properties.push('openFile');\n                }\n                if (props.canSelectFolders === true) {\n                    properties.push('openDirectory');\n                    properties.push('createDirectory');\n                }\n            }\n            if (props.canSelectMany === true) {\n                properties.push('multiSelections');\n            }\n            return properties;\n        }\n    }\n}\n"],"sourceRoot":""}