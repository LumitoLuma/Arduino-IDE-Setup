{"version":3,"sources":["webpack:///./node_modules/@theia/core/src/electron-browser/menu/electron-main-menu-factory.ts","webpack:///./node_modules/@theia/core/src/electron-browser/menu/electron-menu-contribution.ts"],"names":[],"mappings":"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","file":"51.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport * as electron from 'electron';\nimport { inject, injectable } from 'inversify';\nimport {\n    CommandRegistry, isOSX, ActionMenuNode, CompositeMenuNode,\n    MAIN_MENU_BAR, MenuModelRegistry, MenuPath\n} from '../../common';\nimport { PreferenceService, KeybindingRegistry, Keybinding } from '../../browser';\nimport { ContextKeyService } from '../../browser/context-key-service';\nimport debounce = require('lodash.debounce');\nimport { ContextMenuContext } from '../../browser/menu/context-menu-context';\n\n/**\n * Representation of possible electron menu options.\n */\nexport interface ElectronMenuOptions {\n    /**\n     * Controls whether to render disabled menu items.\n     * Defaults to `true`.\n     */\n    readonly showDisabled?: boolean;\n}\n\n@injectable()\nexport class ElectronMainMenuFactory {\n\n    protected _menu: Electron.Menu | undefined;\n    protected _toggledCommands: Set<string> = new Set();\n\n    @inject(ContextKeyService)\n    protected readonly contextKeyService: ContextKeyService;\n\n    @inject(ContextMenuContext)\n    protected readonly context: ContextMenuContext;\n\n    constructor(\n        @inject(CommandRegistry) protected readonly commandRegistry: CommandRegistry,\n        @inject(PreferenceService) protected readonly preferencesService: PreferenceService,\n        @inject(MenuModelRegistry) protected readonly menuProvider: MenuModelRegistry,\n        @inject(KeybindingRegistry) protected readonly keybindingRegistry: KeybindingRegistry\n    ) {\n        preferencesService.onPreferenceChanged(debounce(() => {\n            if (this._menu) {\n                for (const item of this._toggledCommands) {\n                    this._menu.getMenuItemById(item).checked = this.commandRegistry.isToggled(item);\n                }\n                electron.remote.getCurrentWindow().setMenu(this._menu);\n            }\n        }, 10));\n        keybindingRegistry.onKeybindingsChanged(() => {\n            const createdMenuBar = this.createMenuBar();\n            if (isOSX) {\n                electron.remote.Menu.setApplicationMenu(createdMenuBar);\n            } else {\n                electron.remote.getCurrentWindow().setMenu(createdMenuBar);\n            }\n        });\n    }\n\n    createMenuBar(): Electron.Menu {\n        const menuModel = this.menuProvider.getMenu(MAIN_MENU_BAR);\n        const template = this.fillMenuTemplate([], menuModel);\n        if (isOSX) {\n            template.unshift(this.createOSXMenu());\n        }\n        const menu = electron.remote.Menu.buildFromTemplate(template);\n        this._menu = menu;\n        return menu;\n    }\n\n    createContextMenu(menuPath: MenuPath, args?: any[]): Electron.Menu {\n        const menuModel = this.menuProvider.getMenu(menuPath);\n        const template = this.fillMenuTemplate([], menuModel, args, { showDisabled: false });\n        return electron.remote.Menu.buildFromTemplate(template);\n    }\n\n    protected fillMenuTemplate(items: Electron.MenuItemConstructorOptions[],\n        menuModel: CompositeMenuNode,\n        args: any[] = [],\n        options?: ElectronMenuOptions\n    ): Electron.MenuItemConstructorOptions[] {\n        const showDisabled = (options?.showDisabled === undefined) ? true : options?.showDisabled;\n        for (const menu of menuModel.children) {\n            if (menu instanceof CompositeMenuNode) {\n                if (menu.children.length > 0) {\n                    // do not render empty nodes\n\n                    if (menu.isSubmenu) { // submenu node\n\n                        const submenu = this.fillMenuTemplate([], menu, args, options);\n                        if (submenu.length === 0) {\n                            continue;\n                        }\n\n                        items.push({\n                            label: menu.label,\n                            submenu\n                        });\n\n                    } else { // group node\n\n                        // process children\n                        const submenu = this.fillMenuTemplate([], menu, args, options);\n                        if (submenu.length === 0) {\n                            continue;\n                        }\n\n                        if (items.length > 0) {\n                            // do not put a separator above the first group\n\n                            items.push({\n                                type: 'separator'\n                            });\n                        }\n\n                        // render children\n                        items.push(...submenu);\n                    }\n                }\n            } else if (menu instanceof ActionMenuNode) {\n                const node = menu.altNode && this.context.altPressed ? menu.altNode : menu;\n                const commandId = node.action.commandId;\n\n                // That is only a sanity check at application startup.\n                if (!this.commandRegistry.getCommand(commandId)) {\n                    throw new Error(`Unknown command with ID: ${commandId}.`);\n                }\n\n                if (!this.commandRegistry.isVisible(commandId, ...args)\n                    || (!!node.action.when && !this.contextKeyService.match(node.action.when))) {\n                    continue;\n                }\n\n                // We should omit rendering context-menu items which are disabled.\n                if (!showDisabled && !this.commandRegistry.isEnabled(commandId, ...args)) {\n                    continue;\n                }\n\n                const bindings = this.keybindingRegistry.getKeybindingsForCommand(commandId);\n\n                let accelerator;\n\n                /* Only consider the first keybinding. */\n                if (bindings.length > 0) {\n                    const binding = bindings[0];\n                    accelerator = this.acceleratorFor(binding);\n                }\n\n                items.push({\n                    id: node.id,\n                    label: node.label,\n                    type: this.commandRegistry.getToggledHandler(commandId, ...args) ? 'checkbox' : 'normal',\n                    checked: this.commandRegistry.isToggled(commandId, ...args),\n                    enabled: true, // https://github.com/eclipse-theia/theia/issues/446\n                    visible: true,\n                    click: () => this.execute(commandId, args),\n                    accelerator\n                });\n                if (this.commandRegistry.getToggledHandler(commandId, ...args)) {\n                    this._toggledCommands.add(commandId);\n                }\n            }\n        }\n        return items;\n    }\n\n    /**\n     * Return a user visible representation of a keybinding.\n     */\n    protected acceleratorFor(keybinding: Keybinding): string {\n        const bindingKeySequence = this.keybindingRegistry.resolveKeybinding(keybinding);\n        // FIXME see https://github.com/electron/electron/issues/11740\n        // Key Sequences can't be represented properly in the electron menu.\n        //\n        // We can do what VS Code does, and append the chords as a suffix to the menu label.\n        // https://github.com/eclipse-theia/theia/issues/1199#issuecomment-430909480\n        if (bindingKeySequence.length > 1) {\n            return '';\n        }\n\n        const keyCode = bindingKeySequence[0];\n        return this.keybindingRegistry.acceleratorForKeyCode(keyCode, '+');\n    }\n\n    protected async execute(command: string, args: any[]): Promise<void> {\n        try {\n            // This is workaround for https://github.com/eclipse-theia/theia/issues/446.\n            // Electron menus do not update based on the `isEnabled`, `isVisible` property of the command.\n            // We need to check if we can execute it.\n            if (this.commandRegistry.isEnabled(command, ...args)) {\n                await this.commandRegistry.executeCommand(command, ...args);\n                if (this._menu && this.commandRegistry.isVisible(command, ...args)) {\n                    this._menu.getMenuItemById(command).checked = this.commandRegistry.isToggled(command, ...args);\n                    electron.remote.getCurrentWindow().setMenu(this._menu);\n                }\n            }\n        } catch {\n            // no-op\n        }\n    }\n\n    protected createOSXMenu(): Electron.MenuItemConstructorOptions {\n        return {\n            label: 'Theia',\n            submenu: [\n                {\n                    role: 'about'\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    role: 'services',\n                    submenu: []\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    role: 'hide'\n                },\n                {\n                    role: 'hideOthers'\n                },\n                {\n                    role: 'unhide'\n                },\n                {\n                    type: 'separator'\n                },\n                {\n                    role: 'quit'\n                }\n            ]\n        };\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport * as electron from 'electron';\nimport { inject, injectable } from 'inversify';\nimport {\n    Command, CommandContribution, CommandRegistry,\n    isOSX, isWindows, MenuModelRegistry, MenuContribution, Disposable\n} from '../../common';\nimport { KeybindingContribution, KeybindingRegistry } from '../../browser';\nimport { FrontendApplication, FrontendApplicationContribution, CommonMenus } from '../../browser';\nimport { ElectronMainMenuFactory } from './electron-main-menu-factory';\nimport { FrontendApplicationStateService, FrontendApplicationState } from '../../browser/frontend-application-state';\n\nexport namespace ElectronCommands {\n    export const TOGGLE_DEVELOPER_TOOLS: Command = {\n        id: 'theia.toggleDevTools',\n        label: 'Toggle Developer Tools'\n    };\n    export const RELOAD: Command = {\n        id: 'view.reload',\n        label: 'Reload Window'\n    };\n    export const ZOOM_IN: Command = {\n        id: 'view.zoomIn',\n        label: 'Zoom In'\n    };\n    export const ZOOM_OUT: Command = {\n        id: 'view.zoomOut',\n        label: 'Zoom Out'\n    };\n    export const RESET_ZOOM: Command = {\n        id: 'view.resetZoom',\n        label: 'Reset Zoom'\n    };\n    export const CLOSE_WINDOW: Command = {\n        id: 'close.window',\n        label: 'Close Window'\n    };\n}\n\nexport namespace ElectronMenus {\n    export const VIEW_WINDOW = [...CommonMenus.VIEW, 'window'];\n    export const VIEW_ZOOM = [...CommonMenus.VIEW, 'zoom'];\n}\n\nexport namespace ElectronMenus {\n    export const HELP_TOGGLE = [...CommonMenus.HELP, 'z_toggle'];\n}\n\nexport namespace ElectronMenus {\n    export const FILE_CLOSE = [...CommonMenus.FILE_CLOSE, 'window-close'];\n}\n\n@injectable()\nexport class ElectronMenuContribution implements FrontendApplicationContribution, CommandContribution, MenuContribution, KeybindingContribution {\n\n    @inject(FrontendApplicationStateService)\n    protected readonly stateService: FrontendApplicationStateService;\n\n    constructor(\n        @inject(ElectronMainMenuFactory) protected readonly factory: ElectronMainMenuFactory\n    ) { }\n\n    onStart(app: FrontendApplication): void {\n        this.hideTopPanel(app);\n        this.setMenu();\n        if (isOSX) {\n            // OSX: Recreate the menus when changing windows.\n            // OSX only has one menu bar for all windows, so we need to swap\n            // between them as the user switches windows.\n            electron.remote.getCurrentWindow().on('focus', () => this.setMenu());\n        }\n        // Make sure the application menu is complete, once the frontend application is ready.\n        // https://github.com/theia-ide/theia/issues/5100\n        let onStateChange: Disposable | undefined = undefined;\n        const stateServiceListener = (state: FrontendApplicationState) => {\n            if (state === 'ready') {\n                this.setMenu();\n            }\n            if (state === 'closing_window') {\n                if (!!onStateChange) {\n                    onStateChange.dispose();\n                }\n            }\n        };\n        onStateChange = this.stateService.onStateChanged(stateServiceListener);\n    }\n\n    /**\n     * Makes the `theia-top-panel` hidden as it is unused for the electron-based application.\n     * The `theia-top-panel` is used as the container of the main, application menu-bar for the\n     * browser. Electron has it's own.\n     * By default, this method is called on application `onStart`.\n     */\n    protected hideTopPanel(app: FrontendApplication): void {\n        const itr = app.shell.children();\n        let child = itr.next();\n        while (child) {\n            // Top panel for the menu contribution is not required for Electron.\n            if (child.id === 'theia-top-panel') {\n                child.setHidden(true);\n                child = undefined;\n            } else {\n                child = itr.next();\n            }\n        }\n    }\n\n    private setMenu(menu: electron.Menu = this.factory.createMenuBar(), electronWindow: electron.BrowserWindow = electron.remote.getCurrentWindow()): void {\n        if (isOSX) {\n            electron.remote.Menu.setApplicationMenu(menu);\n        } else {\n            // Unix/Windows: Set the per-window menus\n            electronWindow.setMenu(menu);\n        }\n    }\n\n    registerCommands(registry: CommandRegistry): void {\n\n        const currentWindow = electron.remote.getCurrentWindow();\n\n        registry.registerCommand(ElectronCommands.TOGGLE_DEVELOPER_TOOLS, {\n            execute: () => {\n                const webContent = electron.remote.getCurrentWebContents();\n                if (!webContent.isDevToolsOpened()) {\n                    webContent.openDevTools();\n                } else {\n                    webContent.closeDevTools();\n                }\n            }\n        });\n\n        registry.registerCommand(ElectronCommands.RELOAD, {\n            execute: () => currentWindow.reload()\n        });\n        registry.registerCommand(ElectronCommands.CLOSE_WINDOW, {\n            execute: () => currentWindow.close()\n        });\n\n        registry.registerCommand(ElectronCommands.ZOOM_IN, {\n            execute: () => {\n                const webContents = currentWindow.webContents;\n                webContents.setZoomLevel(webContents.zoomLevel + 0.5);\n            }\n        });\n        registry.registerCommand(ElectronCommands.ZOOM_OUT, {\n            execute: () => {\n                const webContents = currentWindow.webContents;\n                webContents.setZoomLevel(webContents.zoomLevel - 0.5);\n            }\n        });\n        registry.registerCommand(ElectronCommands.RESET_ZOOM, {\n            execute: () => currentWindow.webContents.setZoomLevel(0)\n        });\n    }\n\n    registerKeybindings(registry: KeybindingRegistry): void {\n        registry.registerKeybindings(\n            {\n                command: ElectronCommands.TOGGLE_DEVELOPER_TOOLS.id,\n                keybinding: 'ctrlcmd+alt+i'\n            },\n            {\n                command: ElectronCommands.RELOAD.id,\n                keybinding: 'ctrlcmd+r'\n            },\n            {\n                command: ElectronCommands.ZOOM_IN.id,\n                keybinding: 'ctrlcmd+='\n            },\n            {\n                command: ElectronCommands.ZOOM_OUT.id,\n                keybinding: 'ctrlcmd+-'\n            },\n            {\n                command: ElectronCommands.RESET_ZOOM.id,\n                keybinding: 'ctrlcmd+0'\n            },\n            {\n                command: ElectronCommands.CLOSE_WINDOW.id,\n                keybinding: (isOSX ? 'cmd+shift+w' : (isWindows ? 'ctrl+w' : /* Linux */ 'ctrl+q'))\n            }\n        );\n    }\n\n    registerMenus(registry: MenuModelRegistry): void {\n        registry.registerMenuAction(ElectronMenus.HELP_TOGGLE, {\n            commandId: ElectronCommands.TOGGLE_DEVELOPER_TOOLS.id\n        });\n\n        registry.registerMenuAction(ElectronMenus.VIEW_WINDOW, {\n            commandId: ElectronCommands.RELOAD.id,\n            order: 'z0'\n        });\n\n        registry.registerMenuAction(ElectronMenus.VIEW_ZOOM, {\n            commandId: ElectronCommands.ZOOM_IN.id,\n            order: 'z1'\n        });\n        registry.registerMenuAction(ElectronMenus.VIEW_ZOOM, {\n            commandId: ElectronCommands.ZOOM_OUT.id,\n            order: 'z2'\n        });\n        registry.registerMenuAction(ElectronMenus.VIEW_ZOOM, {\n            commandId: ElectronCommands.RESET_ZOOM.id,\n            order: 'z3'\n        });\n        registry.registerMenuAction(ElectronMenus.FILE_CLOSE, {\n            commandId: ElectronCommands.CLOSE_WINDOW.id,\n        });\n    }\n\n}\n"],"sourceRoot":""}