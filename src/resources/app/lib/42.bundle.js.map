{"version":3,"sources":["webpack:///./node_modules/@theia/outline-view/src/browser/outline-view-tree.ts","webpack:///./node_modules/@theia/outline-view/src/browser/outline-view-widget.tsx"],"names":[],"mappings":"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","file":"42.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { CompositeTreeNode, TreeModelImpl, TreeExpansionService, ExpandableTreeNode } from '@theia/core/lib/browser';\n\n@injectable()\nexport class OutlineViewTreeModel extends TreeModelImpl {\n\n    @inject(TreeExpansionService) protected readonly expansionService: TreeExpansionService;\n\n    /**\n     * Handle the expansion of the tree node.\n     * - The method is a no-op in order to preserve focus on the editor\n     * after attempting to perform a `collapse-all`.\n     * @param node the expandable tree node.\n     */\n    protected handleExpansion(node: Readonly<ExpandableTreeNode>): void {\n        // no-op\n    }\n\n    async collapseAll(raw?: Readonly<CompositeTreeNode>): Promise<boolean> {\n        const node = raw || this.selectedNodes[0];\n        if (CompositeTreeNode.is(node)) {\n            return this.expansionService.collapseAll(node);\n        }\n        return false;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017-2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport {\n    TreeWidget,\n    TreeNode,\n    NodeProps,\n    SelectableTreeNode,\n    TreeProps,\n    ContextMenuRenderer,\n    TreeModel,\n    ExpandableTreeNode\n} from '@theia/core/lib/browser';\nimport { OutlineViewTreeModel } from './outline-view-tree';\nimport { Message } from '@phosphor/messaging';\nimport { Emitter } from '@theia/core';\nimport { CompositeTreeNode } from '@theia/core/lib/browser';\nimport * as React from 'react';\n\n/**\n * Representation of an outline symbol information node.\n */\nexport interface OutlineSymbolInformationNode extends CompositeTreeNode, SelectableTreeNode, ExpandableTreeNode {\n    /**\n     * The `iconClass` for the given tree node.\n     */\n    iconClass: string;\n}\n\n/**\n * Collection of outline symbol information node functions.\n */\nexport namespace OutlineSymbolInformationNode {\n    /**\n     * Determine if the given tree node is an `OutlineSymbolInformationNode`.\n     * - The tree node is an `OutlineSymbolInformationNode` if:\n     *  - The node exists.\n     *  - The node is selectable.\n     *  - The node contains a defined `iconClass` property.\n     * @param node the tree node.\n     *\n     * @returns `true` if the given node is an `OutlineSymbolInformationNode`.\n     */\n    export function is(node: TreeNode): node is OutlineSymbolInformationNode {\n        return !!node && SelectableTreeNode.is(node) && 'iconClass' in node;\n    }\n}\n\nexport type OutlineViewWidgetFactory = () => OutlineViewWidget;\nexport const OutlineViewWidgetFactory = Symbol('OutlineViewWidgetFactory');\n\n@injectable()\nexport class OutlineViewWidget extends TreeWidget {\n\n    readonly onDidChangeOpenStateEmitter = new Emitter<boolean>();\n\n    constructor(\n        @inject(TreeProps) protected readonly treeProps: TreeProps,\n        @inject(OutlineViewTreeModel) model: OutlineViewTreeModel,\n        @inject(ContextMenuRenderer) protected readonly contextMenuRenderer: ContextMenuRenderer\n    ) {\n        super(treeProps, model, contextMenuRenderer);\n\n        this.id = 'outline-view';\n        this.title.label = 'Outline';\n        this.title.caption = 'Outline';\n        this.title.closable = true;\n        this.title.iconClass = 'fa outline-view-tab-icon';\n        this.addClass('theia-outline-view');\n    }\n\n    /**\n     * Set the outline tree with the list of `OutlineSymbolInformationNode`.\n     * @param roots the list of `OutlineSymbolInformationNode`.\n     */\n    public setOutlineTree(roots: OutlineSymbolInformationNode[]): void {\n        // Gather the list of available nodes.\n        const nodes = this.reconcileTreeState(roots);\n        // Update the model root node, appending the outline symbol information nodes as children.\n        this.model.root = {\n            id: 'outline-view-root',\n            name: 'Outline Root',\n            visible: false,\n            children: nodes,\n            parent: undefined\n        } as CompositeTreeNode;\n    }\n\n    /**\n     * Reconcile the outline tree state, gathering all available nodes.\n     * @param nodes the list of `TreeNode`.\n     *\n     * @returns the list of tree nodes.\n     */\n    protected reconcileTreeState(nodes: TreeNode[]): TreeNode[] {\n        nodes.forEach(node => {\n            if (OutlineSymbolInformationNode.is(node)) {\n                const treeNode = this.model.getNode(node.id);\n                if (treeNode && OutlineSymbolInformationNode.is(treeNode)) {\n                    treeNode.expanded = node.expanded;\n                    treeNode.selected = node.selected;\n                }\n                this.reconcileTreeState(Array.from(node.children));\n            }\n        });\n        return nodes;\n    }\n\n    protected onAfterHide(msg: Message): void {\n        super.onAfterHide(msg);\n        this.onDidChangeOpenStateEmitter.fire(false);\n    }\n\n    protected onAfterShow(msg: Message): void {\n        super.onAfterShow(msg);\n        this.onDidChangeOpenStateEmitter.fire(true);\n    }\n\n    renderIcon(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (OutlineSymbolInformationNode.is(node)) {\n            return <div className={'symbol-icon symbol-icon-center ' + node.iconClass}></div>;\n        }\n        return undefined;\n    }\n\n    protected createNodeAttributes(node: TreeNode, props: NodeProps): React.Attributes & React.HTMLAttributes<HTMLElement> {\n        const elementAttrs = super.createNodeAttributes(node, props);\n        return {\n            ...elementAttrs,\n            title: this.getNodeTooltip(node)\n        };\n    }\n\n    /**\n     * Get the tooltip for the given tree node.\n     * - The tooltip is discovered when hovering over a tree node.\n     * - If available, the tooltip is the concatenation of the node name, and it's type.\n     * @param node the tree node.\n     *\n     * @returns the tooltip for the tree node if available, else `undefined`.\n     */\n    protected getNodeTooltip(node: TreeNode): string | undefined {\n        if (OutlineSymbolInformationNode.is(node)) {\n            return node.name + ` (${node.iconClass})`;\n        }\n        return undefined;\n    }\n\n    protected isExpandable(node: TreeNode): node is ExpandableTreeNode {\n        return OutlineSymbolInformationNode.is(node) && node.children.length > 0;\n    }\n\n    protected renderTree(model: TreeModel): React.ReactNode {\n        if (CompositeTreeNode.is(this.model.root) && !this.model.root.children.length) {\n            return <div className='theia-widget-noInfo no-outline'>No outline information available.</div>;\n        }\n        return super.renderTree(model);\n    }\n\n}\n"],"sourceRoot":""}