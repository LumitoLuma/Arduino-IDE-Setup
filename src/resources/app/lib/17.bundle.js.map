{"version":3,"sources":["webpack:///./node_modules/@theia/userstorage/src/browser/user-storage-frontend-module.ts","webpack:///./node_modules/@theia/userstorage/src/browser/user-storage-resource.ts","webpack:///./node_modules/@theia/userstorage/src/browser/user-storage-service-filesystem.ts","webpack:///./node_modules/@theia/userstorage/src/browser/user-storage-service.ts","webpack:///./node_modules/@theia/userstorage/src/browser/user-storage-uri.ts"],"names":[],"mappings":"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","file":"17.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule, interfaces, } from 'inversify';\nimport { ResourceResolver } from '@theia/core/lib/common';\nimport { UserStorageResolver } from './user-storage-resource';\nimport { UserStorageServiceFilesystemImpl } from './user-storage-service-filesystem';\nimport { UserStorageService } from './user-storage-service';\n\nexport function bindUserStorage(bind: interfaces.Bind): void {\n    bind(ResourceResolver).to(UserStorageResolver).inSingletonScope();\n    bind(UserStorageService).to(UserStorageServiceFilesystemImpl).inSingletonScope();\n}\n\nexport default new ContainerModule(bind => {\n    bindUserStorage(bind);\n});\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { Resource, ResourceResolver, Emitter, Event, MaybePromise, DisposableCollection } from '@theia/core/lib/common';\nimport { UserStorageService } from './user-storage-service';\nimport { UserStorageUri } from './user-storage-uri';\n\nexport class UserStorageResource implements Resource {\n\n    protected readonly onDidChangeContentsEmitter = new Emitter<void>();\n    protected readonly toDispose = new DisposableCollection();\n    constructor(\n        public uri: URI,\n        protected readonly service: UserStorageService\n    ) {\n        this.toDispose.push(this.service.onUserStorageChanged(e => {\n            for (const changedUri of e.uris) {\n                if (changedUri.toString() === this.uri.toString()) {\n                    this.onDidChangeContentsEmitter.fire(undefined);\n                }\n            }\n        }));\n\n        this.toDispose.push(this.onDidChangeContentsEmitter);\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    readContents(options?: { encoding?: string }): Promise<string> {\n        return this.service.readContents(this.uri);\n    }\n\n    saveContents(content: string): Promise<void> {\n        return this.service.saveContents(this.uri, content);\n    }\n\n    get onDidChangeContents(): Event<void> {\n        return this.onDidChangeContentsEmitter.event;\n    }\n}\n\n@injectable()\nexport class UserStorageResolver implements ResourceResolver {\n\n    constructor(\n        @inject(UserStorageService) protected readonly service: UserStorageService\n\n    ) { }\n\n    resolve(uri: URI): MaybePromise<UserStorageResource> {\n        if (uri.scheme !== UserStorageUri.SCHEME || !uri.path.isAbsolute) {\n            throw new Error('The given uri is not a user storage uri: ' + uri);\n        }\n        return new UserStorageResource(uri, this.service);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { DisposableCollection, ILogger, Emitter, Event } from '@theia/core/lib/common';\nimport { UserStorageChangeEvent, UserStorageService } from './user-storage-service';\nimport { injectable, inject } from 'inversify';\nimport { FileSystemWatcher, FileChangeEvent } from '@theia/filesystem/lib/browser/filesystem-watcher';\nimport { EnvVariablesServer } from '@theia/core/lib/common/env-variables';\nimport { FileSystem } from '@theia/filesystem/lib/common';\nimport URI from '@theia/core/lib/common/uri';\nimport { UserStorageUri } from './user-storage-uri';\n\n@injectable()\nexport class UserStorageServiceFilesystemImpl implements UserStorageService {\n\n    protected readonly toDispose = new DisposableCollection();\n    protected readonly onUserStorageChangedEmitter = new Emitter<UserStorageChangeEvent>();\n    protected readonly userStorageFolder: Promise<URI | undefined>;\n\n    constructor(\n        @inject(FileSystem) protected readonly fileSystem: FileSystem,\n        @inject(FileSystemWatcher) protected readonly watcher: FileSystemWatcher,\n        @inject(ILogger) protected readonly logger: ILogger,\n        @inject(EnvVariablesServer) protected readonly envServer: EnvVariablesServer\n\n    ) {\n        this.userStorageFolder = this.envServer.getConfigDirUri().then(configDirUri => {\n            const userDataFolderUri = new URI(configDirUri);\n            watcher.watchFileChanges(userDataFolderUri).then(disposable =>\n                this.toDispose.push(disposable)\n            );\n            this.toDispose.push(this.watcher.onFilesChanged(changes => this.onDidFilesChanged(changes)));\n            return userDataFolderUri;\n        });\n\n        this.toDispose.push(this.onUserStorageChangedEmitter);\n\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    protected onDidFilesChanged(event: FileChangeEvent): void {\n        const uris: URI[] = [];\n        this.userStorageFolder.then(folder => {\n            if (folder) {\n                for (const change of event) {\n                    const userStorageUri = UserStorageServiceFilesystemImpl.toUserStorageUri(folder, change.uri);\n                    if (userStorageUri) {\n                        uris.push(userStorageUri);\n                    }\n                }\n                if (uris.length > 0) {\n                    this.onUserStorageChangedEmitter.fire({ uris });\n                }\n            }\n        });\n    }\n\n    async readContents(uri: URI): Promise<string> {\n        const folderUri = await this.userStorageFolder;\n        if (folderUri) {\n            const filesystemUri = UserStorageServiceFilesystemImpl.toFilesystemURI(folderUri, uri);\n            const exists = await this.fileSystem.exists(filesystemUri.toString());\n\n            if (exists) {\n                return this.fileSystem.resolveContent(filesystemUri.toString()).then(({ stat, content }) => content);\n            }\n        }\n        return '';\n    }\n\n    async saveContents(uri: URI, content: string): Promise<void> {\n        const folderUri = await this.userStorageFolder;\n        if (!folderUri) {\n            return;\n        }\n        const filesystemUri = UserStorageServiceFilesystemImpl.toFilesystemURI(folderUri, uri);\n\n        const fileStat = await this.fileSystem.getFileStat(filesystemUri.toString());\n        if (fileStat) {\n            this.fileSystem.setContent(fileStat, content).then(() => Promise.resolve());\n        } else {\n            this.fileSystem.createFile(filesystemUri.toString(), { content });\n        }\n    }\n\n    get onUserStorageChanged(): Event<UserStorageChangeEvent> {\n        return this.onUserStorageChangedEmitter.event;\n    }\n\n    /**\n     * Creates a new user storage URI from the filesystem URI.\n     * @param userStorageFolderUri User storage folder URI\n     * @param fsPath The filesystem URI\n     */\n    public static toUserStorageUri(userStorageFolderUri: URI, rawUri: URI): URI | undefined {\n        const relativePath = userStorageFolderUri.relative(rawUri);\n        if (relativePath) {\n            return rawUri.withScheme(UserStorageUri.SCHEME).withPath('/' + relativePath);\n        }\n        return undefined;\n    }\n\n    /**\n     * Returns the associated filesystem URI relative to the user storage folder passed as argument.\n     * @param userStorageFolderUri User storage folder URI\n     * @param userStorageUri User storage URI to be converted in filesystem URI\n     */\n    public static toFilesystemURI(userStorageFolderUri: URI, userStorageUri: URI): URI {\n        return userStorageFolderUri.resolve(userStorageUri.path).normalizePath();\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { Event, Disposable } from '@theia/core/lib/common';\nimport URI from '@theia/core/lib/common/uri';\n\nexport const UserStorageService = Symbol('UserStorageService');\n\nexport interface UserStorageService extends Disposable {\n    readContents(uri: URI): Promise<string>;\n\n    saveContents(uri: URI, content: string): Promise<void>;\n\n    onUserStorageChanged: Event<UserStorageChangeEvent>;\n}\n\nexport interface UserStorageChangeEvent {\n    uris: URI[];\n}\n","/********************************************************************************\n * Copyright (C) 2017 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport namespace UserStorageUri {\n\n    export const SCHEME = 'user_storage';\n}\n"],"sourceRoot":""}