{"version":3,"sources":["webpack:///./node_modules/@theia/process/src/common/shell-command-builder.ts","webpack:///./node_modules/@theia/process/src/common/shell-quoting.ts"],"names":[],"mappings":"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","file":"25.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2020 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\nimport { injectable } from 'inversify';\nimport { createShellCommandLine, BashQuotingFunctions, PowershellQuotingFunctions, CmdQuotingFunctions, ShellQuoting, ShellQuotedString } from '../common/shell-quoting';\n\nexport interface ProcessInfo {\n    executable: string\n    arguments: string[]\n}\n\nexport interface CommandLineOptions {\n    cwd: string\n    args: string[]\n    env?: {\n        [key: string]: string | null\n    }\n}\n\n/**\n * Create command lines ready to be sent to a shell's stdin for evaluation.\n */\n@injectable()\nexport class ShellCommandBuilder {\n\n    /**\n     * Constructs a command line to run in a shell. The shell could be\n     * re-used/long-lived, this means we cannot spawn a new process with a nice\n     * and fresh environment, we need to encode environment modifications into\n     * the returned command.\n     *\n     * Inspired by VS Code implementation, see:\n     * https://github.com/microsoft/vscode/blob/f395cac4fff0721a8099126172c01411812bcb4a/src/vs/workbench/contrib/debug/node/terminals.ts#L79\n     *\n     * @param hostProcessInfo the host terminal process infos\n     * @param commandOptions program to execute in the host terminal\n     */\n    buildCommand(hostProcessInfo: ProcessInfo | undefined, commandOptions: CommandLineOptions): string {\n\n        const host = hostProcessInfo && hostProcessInfo.executable;\n        const cwd = commandOptions.cwd;\n\n        const args = commandOptions.args.map(value => ({\n            value, quoting: ShellQuoting.Strong,\n        } as ShellQuotedString));\n\n        const env: Array<[string, string | null]> = [];\n        if (commandOptions.env) {\n            for (const key of Object.keys(commandOptions.env)) {\n                env.push([key, commandOptions.env[key]]);\n            }\n        }\n        if (host) {\n            if (/(bash|wsl)(.exe)?$/.test(host)) {\n                return this.buildForBash(args, cwd, env);\n            } else if (/(ps|pwsh|powershell)(.exe)?$/i.test(host)) {\n                return this.buildForPowershell(args, cwd, env);\n            } else if (/cmd(.exe)?$/i.test(host)) {\n                return this.buildForCmd(args, cwd, env);\n            }\n        }\n        return this.buildForDefault(args, cwd, env);\n    }\n\n    protected buildForBash(args: Array<string | ShellQuotedString>, cwd?: string, env?: Array<[string, string | null]>): string {\n        let command = '';\n        if (cwd) {\n            command += `cd ${BashQuotingFunctions.strong(cwd)} && `;\n        }\n        if (env) {\n            command += 'env';\n            for (const [key, value] of env) {\n                // eslint-disable-next-line no-null/no-null\n                if (value === null) {\n                    command += ` -u ${BashQuotingFunctions.strong(key)}`;\n                } else {\n                    command += ` ${BashQuotingFunctions.strong(`${key}=${value}`)}`;\n                }\n            }\n            command += ' ';\n        }\n        command += createShellCommandLine(args, BashQuotingFunctions);\n        return command;\n    }\n\n    protected buildForPowershell(args: Array<string | ShellQuotedString>, cwd?: string, env?: Array<[string, string | null]>): string {\n        let command = '';\n        if (cwd) {\n            command += `cd ${PowershellQuotingFunctions.strong(cwd)}; `;\n        }\n        if (env) {\n            for (const [key, value] of env) {\n                // Powershell requires special quoting when dealing with\n                // environment variable names.\n                const quotedKey = key\n                    .replace(/`/g, '````')\n                    .replace(/\\?/g, '``?');\n                // eslint-disable-next-line no-null/no-null\n                if (value === null) {\n                    command += `Remove-Item \\${env:${quotedKey}}; `;\n                } else {\n                    command += `\\${env:${quotedKey}}=${PowershellQuotingFunctions.strong(value)}; `;\n                }\n            }\n        }\n        command += '& ' + createShellCommandLine(args, PowershellQuotingFunctions);\n        return command;\n    }\n\n    protected buildForCmd(args: Array<string | ShellQuotedString>, cwd?: string, env?: Array<[string, string | null]>): string {\n        let command = '';\n        if (cwd) {\n            command += `cd ${CmdQuotingFunctions.strong(cwd)} && `;\n        }\n        if (env) {\n            command += 'cmd /C \"';\n            for (const [key, value] of env) {\n                // eslint-disable-next-line no-null/no-null\n                if (value === null) {\n                    command += `set ${CmdQuotingFunctions.strong(key)}=\"\" && `;\n                } else {\n                    command += `set ${CmdQuotingFunctions.strong(`${key}=${value}`)} && `;\n                }\n            }\n        }\n        command += createShellCommandLine(args, CmdQuotingFunctions);\n        if (env) {\n            command += '\"';\n        }\n        return command;\n    }\n\n    protected buildForDefault(args: Array<string | ShellQuotedString>, cwd?: string, env?: Array<[string, string | null]>): string {\n        return this.buildForBash(args, cwd, env);\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2020 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n// #region vscode\n\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n\n// See: https://github.com/microsoft/vscode/blob/9ebb7c43bc99fd6e1a295040674d1f8e5831b9be/src/vs/vscode.d.ts#L5326-L5370\n\n/**\n * Defines how an argument should be quoted if it contains\n * spaces or unsupported characters.\n */\nexport const enum ShellQuoting {\n\n    /**\n     * Character escaping should be used. This for example\n     * uses \\ on bash and ` on PowerShell.\n     */\n    Escape = 'escape',\n\n    /**\n     * Strong string quoting should be used. This for example\n     * uses \" for Windows cmd and ' for bash and PowerShell.\n     * Strong quoting treats arguments as literal strings.\n     * Under PowerShell echo 'The value is $(2 * 3)' will\n     * print `The value is $(2 * 3)`\n     */\n    Strong = 'strong',\n\n    /**\n     * Weak string quoting should be used. This for example\n     * uses \" for Windows cmd, bash and PowerShell. Weak quoting\n     * still performs some kind of evaluation inside the quoted\n     * string.  Under PowerShell echo \"The value is $(2 * 3)\"\n     * will print `The value is 6`\n     */\n    Weak = 'weak'\n}\n\n/**\n * A string that will be quoted depending on the used shell.\n */\nexport interface ShellQuotedString {\n    /**\n     * The actual string value.\n     */\n    value: string;\n\n    /**\n     * The quoting style to use.\n     */\n    quoting: ShellQuoting;\n}\n\n// #endregion vscode\n\n/**\n * Functions that provide shell quoting capabilities.\n */\nexport interface ShellQuotingFunctions {\n\n    characters: {\n        /** Characters that require quotes, white space is always implied. */\n        needQuotes?: string\n        /** The character used to escape sequences. */\n        escape?: string\n        /** The character used to quote sequences, preventing variable expansion. */\n        strong?: string\n        /** The character used to quote sequences, allowing variable expansion. */\n        weak?: string\n    }\n\n    /**\n     * Should add escape-characters in front of forbidden characters.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    escape?(this: any, arg: string): string\n\n    /**\n     * Should quote the argument in such a way that variables CANNOT be expanded.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    strong?(this: any, arg: string): string;\n\n    /**\n     * Should quote the argument in such a way that variables CAN be expanded.\n     */\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    weak?(this: any, arg: string): string;\n}\n\n/**\n * Converts a list of args into an escaped shell command.\n *\n * There are two main use cases when handling command/arguments for a shell:\n * 1. User already wrote the escaped commandline, then just use that.\n * 2. User wants a specific process to be invoked with some arguments.\n *\n * The `createShellCommandLine` function is useful for the latter.\n *\n * @param args Standard list of spawn/exec arguments, first item is the command.\n * @param quotingFunctions Collection of functions to process arguments.\n */\nexport function createShellCommandLine(args: Array<string | ShellQuotedString>, quotingFunctions?: ShellQuotingFunctions): string {\n    return args.map(arg => escapeForShell(arg, quotingFunctions)).join(' ');\n}\n\n/**\n * Escape (or quote) a given input.\n *\n * @param arg Input to escape.\n * @param quotingFunctions Collection of functions to process the given `arg`.\n * @param quotingType Override the quoting type specified by the given `arg`.\n */\nexport function escapeForShell(arg: string | ShellQuotedString, quotingFunctions?: ShellQuotingFunctions, quotingType?: ShellQuoting): string {\n    let value: string;\n    let quoting: ShellQuoting | undefined = quotingType;\n    if (typeof arg === 'string') {\n        if (!quoting) {\n            return arg;\n        }\n        value = arg;\n    } else {\n        if (!quoting) {\n            quoting = arg.quoting;\n        }\n        value = arg.value;\n    }\n    if (quotingFunctions && typeof quotingFunctions[quoting] === 'function') {\n        return quotingFunctions[quoting]!(value);\n    }\n    return value;\n}\n\nexport const BashQuotingFunctions: Required<ShellQuotingFunctions> = {\n    characters: {\n        needQuotes: '()',\n        escape: '\\\\',\n        strong: '\\'',\n        weak: '\"',\n    },\n    escape(arg): string {\n        return arg\n            .replace(/[\\s\\\\|(){}<>$&;\"']/g, '\\\\$&');\n    },\n    strong(arg): string {\n        // ('+) becomes ('\"'+\"')\n        return `'${arg\n            .replace(/'+/g, '\\'\"$&\"\\'')}'`;\n    },\n    weak(arg): string {\n        return `\"${arg\n            // Escape escape-characters.\n            .replace(/\\\\\"/g, '\\\\\\\\\"')\n            // Escape user-specified double-quotes.\n            .replace(/\"/g, '\\\\\"')\n            // Escape trailing (\\), we don't want the user to escape our last quote.\n            .replace(/\\\\$/g, '\\\\\\\\')}\"`;\n    },\n};\n\nexport const CmdQuotingFunctions: Required<ShellQuotingFunctions> = {\n    characters: {\n        weak: '\"',\n    },\n    escape(arg): string {\n        return arg\n            // Escape forbidden characters (see: cmd /?).\n            .replace(/[%&<>()@^|]/g, '^$&')\n            // Some characters must be escaped using `\\`.\n            .replace(/[\\\\\"]/g, '\\\\$&')\n            // Double-quote whitespaces, else we cannot escape it.\n            .replace(/\\s+/g, '\"$&\"');\n    },\n    strong(arg): string {\n        return this.weak(arg)\n            // Try to prevent variable expansion.\n            .replace(/%/g, '\"%\"');\n    },\n    weak(arg): string {\n        return `\"${arg\n            // Escape double quotes.\n            .replace(/\\\\\"/g, '\\\\\\\\\"')\n            .replace(/\"/g, '\\\\\"')\n            // Escape forbidden characters (see: cmd /?)\n            .replace(/[&<>()@^|]/g, '^$&')\n            // Escape trailing backslash, we don't want the user to escape our last quote.\n            .replace(/\\\\$/g, '\\\\\\\\')\n            // Escape line returns\n            .replace(/\\r?\\n/g, '^$&')}\"`;\n    },\n};\n\nexport const PowershellQuotingFunctions: Required<ShellQuotingFunctions> = {\n    characters: {\n        needQuotes: '()',\n        escape: '`',\n        strong: '\\'',\n        weak: '\"',\n    },\n    escape(arg): string {\n        return arg.replace(/[`|{}()<>;\"' ]/g, '`$&');\n    },\n    strong(arg): string {\n        // In powershell, one must write ('') for a single quote to be displayed\n        // within a single quoted string.\n        return `'${arg\n            .replace(/'/g, '\\'\\'')}'`;\n    },\n    weak(arg): string {\n        return `\"${arg\n            // Escape escape-characters.\n            .replace(/`\"/g, '``\"')\n            // Escape user-specified backticks.\n            .replace(/\"/g, '`\"')\n            // Escape trailing (`), we don't want the user to escape our last quote.\n            .replace(/`$/g, '``')}\"`;\n    },\n};\n"],"sourceRoot":""}