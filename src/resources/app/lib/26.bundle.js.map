{"version":3,"sources":["webpack:///./node_modules/@theia/preferences/src/browser/user-configs-preference-provider.ts"],"names":[],"mappings":"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","file":"26.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2019 Ericsson and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport URI from '@theia/core/lib/common/uri';\nimport { PreferenceProvider, PreferenceResolveResult } from '@theia/core/lib/browser/preferences/preference-provider';\nimport { PreferenceConfigurations } from '@theia/core/lib/browser/preferences/preference-configurations';\nimport { UserStorageUri } from '@theia/userstorage/lib/browser';\nimport { UserPreferenceProvider, UserPreferenceProviderFactory } from './user-preference-provider';\n\nexport const USER_PREFERENCE_FOLDER = new URI().withScheme(UserStorageUri.SCHEME);\n\n/**\n * Binds together preference section prefs providers for user-level preferences.\n */\n@injectable()\nexport class UserConfigsPreferenceProvider extends PreferenceProvider {\n\n    @inject(UserPreferenceProviderFactory)\n    protected readonly providerFactory: UserPreferenceProviderFactory;\n\n    @inject(PreferenceConfigurations)\n    protected readonly configurations: PreferenceConfigurations;\n\n    protected readonly providers = new Map<string, UserPreferenceProvider>();\n\n    @postConstruct()\n    protected async init(): Promise<void> {\n        this.createProviders();\n\n        const readyPromises: Promise<void>[] = [];\n        for (const provider of this.providers.values()) {\n            readyPromises.push(provider.ready.catch(e => console.error(e)));\n        }\n        Promise.all(readyPromises).then(() => this._ready.resolve());\n    }\n\n    protected createProviders(): void {\n        for (const configName of [...this.configurations.getSectionNames(), this.configurations.getConfigName()]) {\n            const sectionUri = USER_PREFERENCE_FOLDER.withPath('/' + configName + '.json');\n            const sectionKey = sectionUri.toString();\n            if (!this.providers.has(sectionKey)) {\n                const provider = this.createProvider(sectionUri, configName);\n                this.providers.set(sectionKey, provider);\n            }\n        }\n    }\n\n    getConfigUri(resourceUri?: string): URI | undefined {\n        for (const provider of this.providers.values()) {\n            const configUri = provider.getConfigUri(resourceUri);\n            if (this.configurations.isConfigUri(configUri)) {\n                return configUri;\n            }\n        }\n        return undefined;\n    }\n\n    resolve<T>(preferenceName: string, resourceUri?: string): PreferenceResolveResult<T> {\n        const result: PreferenceResolveResult<T> = {};\n        for (const provider of this.providers.values()) {\n            const { value, configUri } = provider.resolve<T>(preferenceName, resourceUri);\n            if (configUri && value !== undefined) {\n                result.configUri = configUri;\n                result.value = PreferenceProvider.merge(result.value as any, value as any) as any;\n            }\n        }\n        return result;\n    }\n\n    getPreferences(resourceUri?: string): { [p: string]: any } {\n        let result = {};\n        for (const provider of this.providers.values()) {\n            const preferences = provider.getPreferences();\n            result = PreferenceProvider.merge(result, preferences) as any;\n        }\n        return result;\n    }\n\n    async setPreference(preferenceName: string, value: any, resourceUri?: string): Promise<boolean> {\n        const sectionName = preferenceName.split('.', 1)[0];\n        const configName = this.configurations.isSectionName(sectionName) ? sectionName : this.configurations.getConfigName();\n\n        const providers = this.providers.values();\n\n        for (const provider of providers) {\n            if (this.configurations.getName(provider.getConfigUri()) === configName) {\n                return provider.setPreference(preferenceName, value, resourceUri);\n            }\n        }\n        return false;\n    }\n\n    protected createProvider(uri: URI, sectionName: string): UserPreferenceProvider {\n        const provider = this.providerFactory(uri, sectionName);\n        this.toDispose.push(provider);\n        this.toDispose.push(provider.onDidPreferencesChanged(change => this.onDidPreferencesChangedEmitter.fire(change)));\n        return provider;\n    }\n}\n"],"sourceRoot":""}