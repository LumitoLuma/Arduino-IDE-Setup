{"version":3,"sources":["webpack:///./node_modules/arduino-ide-extension/src/browser/boards/boards-config.tsx","webpack:///./node_modules/arduino-ide-extension/src/browser/boards/boards-service-client-impl.ts","webpack:///./node_modules/arduino-ide-extension/src/browser/core-service-client-impl.ts","webpack:///./node_modules/arduino-ide-extension/src/browser/theia/monaco/comparers.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/arduino-daemon.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/boards-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/config-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/core-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/filesystem-ext.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/index.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/installable.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/library-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/monitor-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/sketches-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/protocol/tool-output-service.ts","webpack:///./node_modules/arduino-ide-extension/src/common/utils.ts","webpack:///./node_modules/string-natural-compare/natural-compare.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,8EAA+B;AAC/B,sGAAmD;AACnD,qKAA6G;AA8B7G;IAAsC,wBAOpC;IAPF;QAAA,qEA+BC;QAJa,aAAO,GAAG;YAChB,KAAI,CAAC,KAAK,CAAC,OAAO,CAAC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;QACxC,CAAC;;IAEL,CAAC;IAtBG,qBAAM,GAAN;QACU,SAAwC,IAAI,CAAC,KAAK,EAAhD,QAAQ,gBAAE,KAAK,aAAE,OAAO,eAAE,OAAO,aAAe,CAAC;QACzD,IAAM,UAAU,GAAG,CAAC,MAAM,CAAC,CAAC;QAC5B,IAAI,QAAQ,EAAE;YACV,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC/B;QACD,IAAI,OAAO,KAAK,IAAI,EAAE;YAClB,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC;SAC7B;QACD,OAAO,6BAAK,OAAO,EAAE,IAAI,CAAC,OAAO,EAAE,SAAS,EAAE,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,KAAK,EAAE,KAAG,KAAK,IAAG,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAE;YAC3G,6BAAK,SAAS,EAAC,OAAO,IACjB,KAAK,CACJ;YACL,CAAC,OAAO,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,6BAAK,SAAS,EAAC,SAAS,IAAE,OAAO,CAAO;YACxD,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,6BAAK,SAAS,EAAC,eAAe;gBAAC,2BAAG,SAAS,EAAC,aAAa,GAAG,CAAM,CAClF,CAAC;IACX,CAAC;IAML,WAAC;AAAD,CAAC,CA/BqC,KAAK,CAAC,SAAS,GA+BpD;AA/BqB,oBAAI;AAiC1B;IAAkC,gCAAuD;IAIrF,sBAAY,KAAyB;QAArC,YACI,kBAAM,KAAK,CAAC,SAUf;QAbS,eAAS,GAAG,IAAI,2BAAoB,EAAE,CAAC;QAyCvC,kBAAY,GAAG,UAAC,YAA+D;YAA/D,gDAA+D;YACrF,IAAM,KAAK,GAAG,CAAC,OAAO,YAAY,KAAK,QAAQ;gBAC3C,CAAC,CAAC,YAAY;gBACd,CAAC,CAAC,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,WAAW,EAAE,CAC5C,CAAC,IAAI,EAAE,CAAC;YACT,KAAI,CAAC,QAAQ,CAAC,EAAE,KAAK,SAAE,CAAC,CAAC;YACzB,KAAI,CAAC,WAAW,CAAC,EAAE,KAAK,SAAE,CAAC,CAAC,IAAI,CAAC,uBAAa,IAAI,YAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,iBAAE,CAAC,EAAhC,CAAgC,CAAC,CAAC;QACxF,CAAC;QAES,iBAAW,GAAG,UAAC,KAAkB,EAAE,YAAyB;YAA7C,kCAAkB;YAAE,gDAAyB;YAClE,KAAI,CAAC,UAAU,CAAC,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,UAAC,EAAc;oBAAZ,UAAU;gBAChD,gBAAY,GAAK,KAAI,CAAC,KAAK,aAAf,CAAgB;gBAClC,oFAAoF;gBACpF,IAAI,YAAY,CAAC,IAAI,CAAC,cAAI,IAAI,4BAAI,CAAC,MAAM,CAAC,IAAI,EAAE,YAAY,CAAC,EAA/B,CAA+B,CAAC,EAAE;oBAC5D,YAAY,GAAG,SAAS,CAAC;iBAC5B;gBACD,KAAI,CAAC,QAAQ,CAAC,EAAE,UAAU,cAAE,YAAY,gBAAE,EAAE,cAAM,YAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,CAAC,CAAC;YAChF,CAAC,CAAC,CAAC;QACP,CAAC;QAES,iBAAW,GAAG,UAAC,OAAgC;YAAhC,sCAAgC;YACrD,OAAO,KAAI,CAAC,KAAK,CAAC,mBAAmB,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC;QAChE,CAAC;QAMS,gBAAU,GAAG,UAAO,cAAqD;YAArD,kDAAkC,KAAI,CAAC,cAAc;;;;;gCACjE,qBAAM,cAAc;;4BAA5B,KAAK,GAAG,SAAoB;4BAClC,sBAAO,EAAE,UAAU,EAAE,KAAK,CAAC,IAAI,CAAC,qBAAI,CAAC,OAAO,CAAC,EAAE,EAAC;;;;SACnD;QAES,uBAAiB,GAAG;YAC1B,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,EAAE,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,EAAE,CAAC,CAAC;QAC9D,CAAC;QAES,gBAAU,GAAG,UAAC,YAA8B;YAClD,KAAI,CAAC,QAAQ,CAAC,EAAE,YAAY,gBAAE,EAAE,cAAM,YAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,CAAC,CAAC;QACpE,CAAC;QAES,iBAAW,GAAG,UAAC,aAA0D;YAC/E,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,iBAAE,EAAE,cAAM,YAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,CAAC,CAAC;QACrE,CAAC;QAES,kBAAY,GAAG,UAAC,OAA2B;YACjD,KAAI,CAAC,KAAK,CAAC,cAAc,CAAC,OAAO,IAAI,SAAS,CAAC,CAAC;QACpD,CAAC;QAnFW,gBAAY,GAAK,KAAK,CAAC,mBAAmB,aAA9B,CAA+B;QACnD,KAAI,CAAC,KAAK,cACN,aAAa,EAAE,EAAE,EACjB,UAAU,EAAE,EAAE,EACd,YAAY,EAAE,KAAK,EACnB,KAAK,EAAE,EAAE,IACN,YAAY,CAClB;;IACL,CAAC;IAED,wCAAiB,GAAjB;QAAA,iBAeC;QAdG,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC,IAAI,CAAC,eAAK,IAAI,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAvB,CAAuB,CAAC,CAAC;QAC9E,SAA2D,IAAI,CAAC,KAAK,EAAnE,mBAAmB,2BAAE,iBAAiB,yBAAE,YAAY,kBAAe,CAAC;QAC5E,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC;YACnB,mBAAmB,CAAC,uBAAuB,CAAC,eAAK,IAAI,YAAI,CAAC,WAAW,CAAC,KAAK,CAAC,QAAQ,CAAC,KAAK,EAAE,0CAAyB,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,EAA5F,CAA4F,CAAC;YAClJ,mBAAmB,CAAC,qBAAqB,CAAC,UAAC,EAA+B;oBAA7B,aAAa,qBAAE,YAAY;gBACpE,KAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,iBAAE,YAAY,gBAAE,EAAE,cAAM,YAAI,CAAC,iBAAiB,EAAE,EAAxB,CAAwB,CAAC,CAAC;YACnF,CAAC,CAAC;YACF,mBAAmB,CAAC,wBAAwB,CAAC,cAAM,YAAI,CAAC,YAAY,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAnC,CAAmC,CAAC;YACvF,mBAAmB,CAAC,0BAA0B,CAAC,cAAM,YAAI,CAAC,YAAY,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAnC,CAAmC,CAAC;YACzF,iBAAiB,CAAC,cAAc,CAAC,cAAM,YAAI,CAAC,YAAY,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAnC,CAAmC,CAAC;YAC3E,YAAY,CAAC,eAAe,CAAC,cAAM,YAAI,CAAC,YAAY,CAAC,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAnC,CAAmC,CAAC;YACvE,YAAY,CAAC,eAAe,CAAC,cAAM,YAAI,CAAC,QAAQ,CAAC,EAAE,aAAa,EAAE,EAAE,EAAE,CAAC,EAApC,CAAoC,CAAC;SAC3E,CAAC,CAAC;IACP,CAAC;IAED,2CAAoB,GAApB;QACI,IAAI,CAAC,SAAS,CAAC,OAAO,EAAE,CAAC;IAC7B,CAAC;IAES,wCAAiB,GAA3B;QACU,SAAkC,IAAI,CAAC,KAAK,EAA1C,aAAa,qBAAE,YAAY,kBAAe,CAAC;QACnD,IAAI,CAAC,KAAK,CAAC,cAAc,CAAC,EAAE,aAAa,iBAAE,YAAY,gBAAE,CAAC,CAAC;IAC/D,CAAC;IA0BD,sBAAc,wCAAc;aAA5B;YACI,OAAO,IAAI,CAAC,KAAK,CAAC,aAAa,CAAC,iBAAiB,EAAE,CAAC;QACxD,CAAC;;;OAAA;IAuBD,6BAAM,GAAN;QACI,OAAO,6BAAK,SAAS,EAAC,MAAM;YACvB,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC5D,IAAI,CAAC,eAAe,CAAC,OAAO,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAC5F,CAAC;IACX,CAAC;IAES,sCAAe,GAAzB,UAA0B,KAAa,EAAE,eAAsC,EAAE,cAAsC;QACnH,OAAO,6BAAK,SAAS,EAAC,WAAW;YAC7B,6BAAK,SAAS,EAAC,SAAS;gBACpB,6BAAK,SAAS,EAAC,OAAO,IACjB,KAAK,CACJ;gBACL,eAAe,EAAE;gBAClB,6BAAK,SAAS,EAAC,QAAQ,IAClB,CAAC,cAAc,CAAC,CAAC,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CACvC,CACJ,CACJ,CAAC;IACX,CAAC;IAES,mCAAY,GAAtB;;QAAA,iBA8BC;QA7BS,SAAmC,IAAI,CAAC,KAAK,EAA3C,aAAa,qBAAE,aAAa,mBAAe,CAAC;QACpD,mHAAmH;QACnH,2EAA2E;QAC3E,IAAM,cAAc,GAAG,IAAI,GAAG,EAA0B,CAAC;QACzD,IAAM,KAAK,GAAG,UAAC,EAA2C;gBAAzC,IAAI,YAAE,WAAW,mBAAE,IAAI;YAAuB,QAAC,CAAC,IAAI,CAAC,CAAC,CAAI,IAAI,SAAI,WAAW,SAAI,IAAM,CAAC,CAAC,CAAI,IAAI,SAAI,WAAa;QAApE,CAAoE,CAAC;;YACpI,KAAoB,wCAAK,CAAC,cAAc,CAAC,aAAa,EAAE,aAAa,CAAC,6CAAE;gBAAnE,IAAM,KAAK;gBACZ,IAAM,GAAG,GAAG,KAAK,CAAC,KAAK,CAAC,CAAC;gBACzB,IAAI,CAAC,cAAc,CAAC,GAAG,CAAC,GAAG,CAAC,EAAE;oBAC1B,cAAc,CAAC,GAAG,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;iBAClC;aACJ;;;;;;;;;QAED,OAAO,oBAAC,KAAK,CAAC,QAAQ;YAClB,6BAAK,SAAS,EAAC,QAAQ;gBACnB,+BAAO,IAAI,EAAC,QAAQ,EAAC,SAAS,EAAC,aAAa,EAAC,WAAW,EAAC,cAAc,EAAC,QAAQ,EAAE,IAAI,CAAC,YAAY,EAAE,GAAG,EAAE,IAAI,CAAC,YAAY,GAAI;gBAC/H,2BAAG,SAAS,EAAC,cAAc,GAAK,CAC9B;YACN,6BAAK,SAAS,EAAC,aAAa,IACvB,KAAK,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,eAAK,IAAI,2BAAC,IAAI,IACnD,GAAG,EAAK,KAAK,CAAC,IAAI,SAAI,KAAK,CAAC,WAAa,EACzC,IAAI,EAAE,KAAK,EACX,KAAK,EAAE,KAAK,CAAC,IAAI,EACjB,OAAO,EAAE,KAAK,CAAC,OAAO,EACtB,QAAQ,EAAE,KAAK,CAAC,QAAQ,EACxB,OAAO,EAAE,KAAI,CAAC,WAAW,EACzB,OAAO,EAAE,KAAK,CAAC,OAAO,GACxB,EARgD,CAQhD,CAAC,CACD,CACO,CAAC;IACtB,CAAC;IAES,kCAAW,GAArB;QAAA,iBAoBC;QAnBG,IAAM,MAAM,GAAG,IAAI,CAAC,KAAK,CAAC,YAAY,CAAC,CAAC,CAAC,cAAM,WAAI,EAAJ,CAAI,CAAC,CAAC,CAAC,qBAAI,CAAC,WAAW,CAAC;QACvE,IAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,UAAU,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC;QACnD,OAAO,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC;YAClB,CACI,6BAAK,SAAS,EAAC,kBAAkB,0BAE3B,CACT,CAAC,CAAC;YACH,CACI,6BAAK,SAAS,EAAC,YAAY,IACtB,KAAK,CAAC,GAAG,CAAC,cAAI,IAAI,2BAAC,IAAI,IACpB,GAAG,EAAE,qBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EACxB,IAAI,EAAE,IAAI,EACV,KAAK,EAAE,qBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,EAC1B,QAAQ,EAAE,qBAAI,CAAC,MAAM,CAAC,KAAI,CAAC,KAAK,CAAC,YAAY,EAAE,IAAI,CAAC,EACpD,OAAO,EAAE,KAAI,CAAC,UAAU,GAC1B,EANiB,CAMjB,CAAC,CACD,CACT,CAAC;IACV,CAAC;IAES,wCAAiB,GAA3B;QACI,OAAO,6BAAK,SAAS,EAAC,UAAU;YAC5B,+BACI,KAAK,EAAC,wCAAwC;gBAC9C,+BACI,IAAI,EAAC,UAAU,EACf,cAAc,EAAE,IAAI,CAAC,KAAK,CAAC,YAAY,EACvC,QAAQ,EAAE,IAAI,CAAC,iBAAiB,GAClC;gBACF,mDAA2B,CACvB,CACN,CAAC;IACX,CAAC;IAEL,mBAAC;AAAD,CAAC,CArLiC,KAAK,CAAC,SAAS,GAqLhD;AArLY,oCAAY;AAuLzB,WAAiB,YAAY;IAEzB,IAAiB,MAAM,CA0BtB;IA1BD,WAAiB,MAAM;QAEnB,SAAgB,MAAM,CAAC,MAAc,EAAE,KAAqB;YAChD,iBAAa,GAAmB,MAAM,cAAzB,EAAE,YAAY,GAAK,MAAM,aAAX,CAAY;YAC/C,IAAI,sBAAK,CAAC,EAAE,CAAC,KAAK,CAAC,EAAE;gBACjB,OAAO,CAAC,CAAC,aAAa;uBACf,sBAAK,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC;uBAClC,qBAAI,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;aAChD;YACD,OAAO,MAAM,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC;QARe,aAAM,SAQrB;QAED,SAAgB,MAAM,CAAC,IAAY,EAAE,KAAa;YAC9C,OAAO,IAAI,CAAC,aAAa,KAAK,KAAK,CAAC,aAAa;mBAC1C,IAAI,CAAC,YAAY,KAAK,KAAK,CAAC,YAAY,CAAC;QACpD,CAAC;QAHe,aAAM,SAGrB;QAED,SAAgB,QAAQ,CAAC,MAAc,EAAE,OAA8C;YAA9C,sCAAiC,OAAO,EAAE,EAAE,EAAE;YAC3E,iBAAa,GAAyB,MAAM,cAA/B,EAAgB,IAAI,GAAK,MAAM,aAAX,CAAY;YACrD,IAAI,CAAC,aAAa,EAAE;gBAChB,OAAO,OAAO,CAAC,OAAO,CAAC;aAC1B;YACO,QAAI,GAAK,aAAa,KAAlB,CAAmB;YAC/B,OAAO,KAAG,IAAI,IAAG,IAAI,CAAC,CAAC,CAAC,MAAM,GAAG,qBAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAE,CAAC;QAChE,CAAC;QAPe,eAAQ,WAOvB;IAEL,CAAC,EA1BgB,MAAM,GAAN,mBAAM,KAAN,mBAAM,QA0BtB;AAEL,CAAC,EA9BgB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QA8B5B;AArNY,oCAAY;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjEzB,oGAAyD;AACzD,wHAAuD;AACvD,2HAAwD;AACxD,sJAAwE;AACxE,wJAAyE;AAGzE,uIAA+J;AAC/J,6IAA+C;AAC/C,wHAAoD;AACpD,qJAA4D;AAQ5D;IAAA;QAYuB,oCAA+B,GAAG,IAAI,eAAO,EAAuB,CAAC;QACrE,sCAAiC,GAAG,IAAI,eAAO,EAAyB,CAAC;QACzE,mCAA8B,GAAG,IAAI,eAAO,EAA6B,CAAC;QAC1E,iCAA4B,GAAG,IAAI,eAAO,EAAuB,CAAC;QAClE,oCAA+B,GAAG,IAAI,eAAO,EAAoB,CAAC;QAErF;;;;;;WAMG;QACO,4BAAuB,GAAuD,SAAS,CAAC;QACxF,kBAAa,GAAwB,EAAE,CAAC;QACxC,oBAAe,GAAY,EAAE,CAAC,CAAC,6FAA6F;QAC5H,oBAAe,GAAW,EAAE,CAAC;QAC7B,qBAAgB,GAAqB,EAAE,CAAC;QAGlD;;WAEG;QACM,4BAAuB,GAAG,IAAI,CAAC,8BAA8B,CAAC,KAAK,CAAC;QACpE,6BAAwB,GAAG,IAAI,CAAC,+BAA+B,CAAC,KAAK,CAAC;QACtE,+BAA0B,GAAG,IAAI,CAAC,iCAAiC,CAAC,KAAK,CAAC;QACnF;;;;;;WAMG;QACM,0BAAqB,GAAG,IAAI,CAAC,4BAA4B,CAAC,KAAK,CAAC;QAChE,6BAAwB,GAAG,IAAI,CAAC,+BAA+B,CAAC,KAAK,CAAC;IAsSnF,CAAC;IApSS,yCAAO,GAAb;;;gBACI,sBAAO,IAAI,CAAC,SAAS,EAAE,EAAC;;;KAC3B;IAED;;;OAGG;IACG,sCAAI,GAAV,UAAW,aAA4B;;;;;;;wBACnC,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;wBACM,qBAAM,OAAO,CAAC,GAAG,CAAC;gCACvD,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;gCACtC,IAAI,CAAC,aAAa,CAAC,iBAAiB,EAAE;6BACzC,CAAC;;wBAHI,2BAAmC,SAGvC,OAHK,cAAc,UAAE,cAAc;wBAIrC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;wBACtC,IAAI,CAAC,eAAe,GAAG,cAAc,CAAC;wBACtC,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,cAAM,YAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;;;;;KACnE;IAED,6DAA2B,GAA3B,UAA4B,KAAgC;QAA5D,iBAMC;QALG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,+CAA+C,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QACzF,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,CAAC;QAC7C,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAChD,IAAI,CAAC,eAAe,GAAG,KAAK,CAAC,QAAQ,CAAC,KAAK,CAAC;QAC5C,IAAI,CAAC,wBAAwB,EAAE,CAAC,IAAI,CAAC,cAAM,YAAI,CAAC,YAAY,EAAE,EAAnB,CAAmB,CAAC,CAAC;IACpE,CAAC;IAEe,8CAAY,GAA5B;;;;;gBACI,IAAI,IAAI,CAAC,uBAAuB,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,YAAY,CAAC,EAAE;;wBACtE,KAAoB,kBAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAC,EAAS;gCAAP,KAAK;4BAAO,YAAK,KAAK,cAAc,CAAC,KAAK,CAAC,UAAU;wBAAzC,CAAyC,CAAC,6CAAE;4BAAhG,KAAK;4BACZ,IAAI,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;mCAC3D,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;mCAC9D,eAAI,CAAC,MAAM,CAAC,IAAI,CAAC,uBAAuB,CAAC,YAAY,EAAE,KAAK,CAAC,IAAI,CAAC,EAAE;gCAEvE,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC;gCACjD,sBAAO,IAAI,EAAC;6BACf;yBACJ;;;;;;;;;;wBACD,2HAA2H;wBAC3H,kDAAkD;wBAClD,KAAoB,kBAAI,CAAC,eAAe,CAAC,MAAM,CAAC,UAAC,EAAS;gCAAP,KAAK;4BAAO,YAAK,KAAK,cAAc,CAAC,KAAK,CAAC,UAAU;wBAAzC,CAAyC,CAAC,6CAAE;4BAAhG,KAAK;4BACZ,IAAI,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI;mCAC3D,IAAI,CAAC,uBAAuB,CAAC,aAAa,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,EAAE;gCAEnE,IAAI,CAAC,YAAY,yBACV,IAAI,CAAC,uBAAuB,KAC/B,YAAY,EAAE,KAAK,CAAC,IAAI,GAC3B,CAAC;gCACF,sBAAO,IAAI,EAAC;6BACf;yBACJ;;;;;;;;;iBACJ;gBACD,sBAAO,KAAK,EAAC;;;KAChB;IAED,sDAAoB,GAApB,UAAqB,KAA0B;QAC3C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC7D,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QACzC,iBAAa,GAAK,IAAI,CAAC,YAAY,cAAtB,CAAuB;QACtC,SAA2B,KAAK,CAAC,GAAG,EAAlC,gBAAgB,wBAAE,EAAE,QAAc,CAAC;QAC3C,IAAI,aAAa,EAAE;YACf,IAAM,cAAc,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,EAAQ;oBAAN,IAAI;gBAAO,WAAI,KAAK,aAAa,CAAC,IAAI;YAA3B,CAA2B,CAAC,CAAC;YACxF,IAAI,cAAc,IAAI,CAAC,CAAC,aAAa,CAAC,IAAI,IAAI,aAAa,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,CAAC,EAAE;gBACvF,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAiB,EAAE,SAAI,gBAAgB,qEAAgE,aAAa,CAAC,IAAI,uBAAkB,cAAc,CAAC,IAAI,MAAG,CAAC,CAAC;gBACpL,IAAI,CAAC,YAAY,yBACV,IAAI,CAAC,YAAY,KACpB,aAAa,EAAE,cAAc,GAChC,CAAC;aACL;SACJ;IACL,CAAC;IAED,wDAAsB,GAAtB,UAAuB,KAA4B;QAC/C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;QAC/D,IAAI,CAAC,iCAAiC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;QAC3C,iBAAa,GAAK,IAAI,CAAC,YAAY,cAAtB,CAAuB;QAC5C,IAAI,aAAa,IAAI,aAAa,CAAC,IAAI,EAAE;YACrC,IAAM,gBAAgB,GAAG,KAAK,CAAC,GAAG,CAAC,MAAM,CAAC,IAAI,CAAC,UAAC,EAAQ;oBAAN,IAAI;gBAAO,WAAI,KAAK,aAAa,CAAC,IAAI;YAA3B,CAA2B,CAAC,CAAC;YAC1F,IAAI,gBAAgB,IAAI,gBAAgB,CAAC,IAAI,KAAK,aAAa,CAAC,IAAI,EAAE;gBAClE,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,mBAAiB,KAAK,CAAC,GAAG,CAAC,EAAE,wEAAmE,aAAa,CAAC,IAAI,YAAS,CAAC,CAAC;gBAC9I,IAAM,wBAAwB,GAAG;oBAC7B,IAAI,EAAE,aAAa,CAAC,IAAI;oBACxB,UAAU;iBACb,CAAC;gBACF,IAAI,CAAC,YAAY,yBACV,IAAI,CAAC,YAAY,KACpB,aAAa,EAAE,wBAAwB,GAC1C,CAAC;aACL;SACJ;IACL,CAAC;IAED,sBAAI,iDAAY;aA+ChB;YACI,OAAO,IAAI,CAAC,aAAa,CAAC;QAC9B,CAAC;aAjDD,UAAiB,MAA2B;YAA5C,iBAGC;YAFG,IAAI,CAAC,iBAAiB,CAAC,MAAM,CAAC,CAAC;YAC/B,IAAI,CAAC,SAAS,EAAE,CAAC,OAAO,CAAC,cAAM,YAAI,CAAC,wBAAwB,EAAE,CAAC,OAAO,CAAC,cAAM,YAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,KAAI,CAAC,aAAa,CAAC,EAA1D,CAA0D,CAAC,EAAzG,CAAyG,CAAC,CAAC;QAC9I,CAAC;;;OAAA;IAES,mDAAiB,GAA3B,UAA4B,MAA2B;QACnD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,wBAAwB,EAAE,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;QACnE,IAAI,CAAC,aAAa,GAAG,MAAM,CAAC;QAC5B,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,aAAa,CAAC,EAAE;YACtC,IAAI,CAAC,uBAAuB,GAAG,IAAI,CAAC,aAAa,CAAC;SACrD;IACL,CAAC;IAEK,8CAAY,GAAlB,UAAmB,EAAsD;YAApD,KAAK,aAAE,KAAK;;;;;4BACd,qBAAM,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,EAAE,CAAC;;wBAA/C,MAAM,GAAG,SAAsC;wBAC/C,WAAW,GAAG,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM;4BACvC,CAAC,CAAC,CAAC,UAAC,QAAiC,IAAK,YAAK,CAAC,IAAI,CAAC,cAAI,IAAI,WAAI,KAAK,QAAQ,CAAC,WAAW,EAA7B,CAA6B,CAAC,EAAjD,CAAiD,CAAC;4BAC5F,CAAC,CAAC,cAAM,WAAI,EAAJ,CAAI,CAAC;wBACjB,IAAI,CAAC,KAAK,EAAE;4BACR,sBAAO,MAAM,CAAC,MAAM,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,gBAAK,CAAC,OAAO,CAAC,EAAC;yBACzD;wBACK,OAAO,GAAG,CAAC,UAAC,QAAyC,IAAK,QAAC,CAAC,EAAE,KAAK,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,EAAE,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,EAAE,CAAC,CAAC,EAAzF,CAAyF,CAAC,CAAC;wBACrJ,cAAc,GAAG,UAAC,IAAgB,EAAE,KAAiB,EAAE,OAAe;4BACxE,IAAM,WAAW,GAAG,IAAI,CAAC,OAAO,IAAI,EAAE,CAAC;4BACvC,IAAM,YAAY,GAAG,KAAK,CAAC,OAAO,IAAI,EAAE,CAAC;4BACzC,IAAI,WAAW,CAAC,MAAM,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE;gCAC5C,OAAO,CAAC,CAAC,CAAC;6BACb;4BACD,IAAI,CAAC,WAAW,CAAC,MAAM,IAAI,YAAY,CAAC,MAAM,EAAE;gCAC5C,OAAO,CAAC,CAAC;6BACZ;4BACD,IAAI,WAAW,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,MAAM,KAAK,CAAC,EAAE;gCACvD,OAAO,CAAC,CAAC;6BACZ;4BACD,IAAM,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;4BACzD,IAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;4BAC3D,OAAO,2BAAe,CAAC,SAAS,EAAE,UAAU,EAAE,OAAO,CAAC,CAAC;wBAC3D,CAAC;wBACK,eAAe,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;wBAC5C,sBAAO,MAAM;iCACR,MAAM,CAAC,WAAW,CAAC;iCACnB,GAAG,CAAC,OAAO,CAAC;iCACZ,MAAM,CAAC,UAAC,EAAW;oCAAT,OAAO;gCAAO,QAAC,CAAC,OAAO;4BAAT,CAAS,CAAC;iCAClC,IAAI,CAAC,UAAC,IAAI,EAAE,KAAK,IAAK,qBAAc,CAAC,IAAI,EAAE,KAAK,EAAE,eAAe,CAAC,EAA5C,CAA4C,CAAC;iCACnE,GAAG,CAAC,UAAC,EAAS;oCAAP,KAAK;gCAAO,YAAK;4BAAL,CAAK,CAAC,EAAC;;;;KAClC;IAMD;;OAEG;IACH,2CAAS,GAAT,UACI,MAA2D,EAC3D,OAA+C;QAD/C,kCAA0C,IAAI,CAAC,YAAY;QAC3D,sCAAiC,MAAM,EAAE,IAAI,EAAE;QAE/C,IAAI,CAAC,MAAM,EAAE;YACT,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,MAAM,CAAC,aAAa,EAAE;YACvB,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;gBACxC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,qBAAqB,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;aACtE;YACD,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED;;OAEG;IACH,6CAAW,GAAX,UACI,MAA2D,EAC3D,OAA+C;QAD/C,kCAA0C,IAAI,CAAC,YAAY;QAC3D,sCAAiC,MAAM,EAAE,IAAI,EAAE;QAE/C,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,OAAO,CAAC,EAAE;YAClC,OAAO,KAAK,CAAC;SAChB;QAEO,QAAI,GAAK,MAAM,CAAC,aAAa,KAAzB,CAA0B;QACtC,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE;YACtB,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;gBACxC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,mCAAiC,IAAI,OAAI,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;aAC1F;YACD,OAAO,KAAK,CAAC;SAChB;QAED,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,EAAE;YAC5B,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,cAAc,EAAE;gBACxC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,sDAAoD,IAAI,oDAAiD,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;aAC1J;YACD,OAAO,KAAK,CAAC;SAChB;QAED,OAAO,IAAI,CAAC;IAChB,CAAC;IAED,sBAAI,oDAAe;aAAnB;YACI,OAAO,IAAI,CAAC,gBAAgB,CAAC;QACjC,CAAC;;;OAAA;IAEe,0DAAwB,GAAxC;;;;;;;;wBACU,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC;wBACtC,cAAc,GAAG,IAAI,CAAC,eAAe,CAAC;wBAC5C,uEAAuE;wBACvE,IAAI,IAAI,CAAC,YAAY,CAAC,YAAY,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,cAAI,IAAI,sBAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAI,CAAC,YAAY,CAAC,YAAY,CAAC,EAAjD,CAAiD,CAAC,EAAE;4BACnH,IAAI,CAAC,iBAAiB,CAAC,EAAE,aAAa,EAAE,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,YAAY,EAAE,SAAS,EAAE,CAAC,CAAC;4BACpG,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,CAAC,CAAC;yBAC9D;wBACK,YAAY,GAAG,IAAI,CAAC,YAAY,CAAC;wBACjC,sBAAsB,GAAG,IAAI,CAAC,gBAAgB,CAAC;wBAC/C,eAAe,GAAqB,EAAE,CAAC;wBACvC,mBAAmB,GAAG,cAAc,CAAC,MAAM,CAAC,eAAI,CAAC,WAAW,CAAC,CAAC;wBAC9D,oBAAoB,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,EAAQ;gCAAN,IAAI;4BAAO,QAAC,CAAC,IAAI;wBAAN,CAAM,CAAC,CAAC;4CAE9D,SAAS;;;;;wCACZ,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC;wCACxC,KAAK,GAAG,oBAAoB,CAAC,IAAI,CAAC,UAAC,EAAQ;gDAAN,IAAI;4CAAO,sBAAI,CAAC,MAAM,CAAC,SAAS,EAAE,IAAI,CAAC;wCAA5B,CAA4B,CAAC,CAAC;6CAC9E,KAAK,EAAL,wBAAK;wCACL,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,UAAU,CAAC;;4CAId,qBAAM,OAAK,0BAA0B,CAAC,SAAS,CAAC;;wCAApE,iBAAiB,GAAG,SAAgD;wCAC1E,IAAI,iBAAiB,EAAE;4CACnB,KAAK,yBACE,iBAAiB,KACpB,IAAI,EAAE,SAAS,GAClB,CAAC;4CACF,KAAK,GAAG,cAAc,CAAC,KAAK,CAAC,OAAO,CAAC;yCACxC;;;wCAEL,IAAI,CAAC,KAAK,EAAE;4CACR,eAAe,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,IAAI,EAAE,SAAS,EAAE,KAAK,SAAE,CAAC,CAAC;yCACrE;6CAAM;4CACG,QAAQ,GAAG,4BAAY,CAAC,MAAM,CAAC,MAAM,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC;4CACjE,eAAe,CAAC,IAAI,uBAAM,KAAK,KAAE,KAAK,SAAE,QAAQ,YAAE,IAAI,EAAE,SAAS,IAAG,CAAC;yCACxE;;;;;;;;;wBAtBmB,oDAAmB;;;;wBAAhC,SAAS;sDAAT,SAAS;;;;;;;;;;;;;;;;;;;wBAyBpB,IAAI,YAAY,CAAC,aAAa,IAAI,CAAC,eAAe,CAAC,IAAI,CAAC,UAAC,EAAY;gCAAV,QAAQ;4BAAO,eAAQ;wBAAR,CAAQ,CAAC,EAAE;4BACjF,eAAe,CAAC,IAAI,uBACb,YAAY,CAAC,aAAa,KAC7B,IAAI,EAAE,YAAY,CAAC,YAAY,EAC/B,QAAQ,EAAE,IAAI,EACd,KAAK,EAAE,cAAc,CAAC,KAAK,CAAC,UAAU,IACxC,CAAC;yBACN;wBAEK,qBAAqB,GAAG,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,CAAC;wBACvE,UAAU,GAAG,qBAAqB,CAAC,MAAM,KAAK,sBAAsB,CAAC,MAAM,CAAC;wBAChF,KAAS,CAAC,GAAG,CAAC,EAAE,CAAC,UAAU,IAAI,CAAC,GAAG,qBAAqB,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;4BAClE,UAAU,GAAG,cAAc,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC,CAAC,EAAE,sBAAsB,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;yBAClG;wBACD,IAAI,UAAU,EAAE;4BACZ,IAAI,CAAC,gBAAgB,GAAG,qBAAqB,CAAC;4BAC9C,IAAI,CAAC,+BAA+B,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC;yBACpE;;;;;KACJ;IAEe,4DAA0B,GAA1C,UAA2C,IAA+B;;;;gBACtE,IAAI,CAAC,IAAI,EAAE;oBACP,sBAAO,SAAS,EAAC;iBACpB;gBACK,GAAG,GAAG,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;gBACrD,sBAAO,IAAI,CAAC,cAAc,CAAC,OAAO,CAAQ,GAAG,CAAC,EAAC;;;KAClD;IAEe,2CAAS,GAAzB;;;;;;wBAKU,KAAkC,IAAI,CAAC,YAAY,EAAjD,aAAa,qBAAE,YAAY,mBAAuB;6BACtD,cAAa,IAAI,YAAY,GAA7B,wBAA6B;wBACvB,GAAG,GAAG,IAAI,CAAC,6BAA6B,CAAC,YAAY,CAAC,CAAC;wBAC7D,qBAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,EAAE,aAAa,CAAC;;wBAArD,SAAqD,CAAC;;4BAE1D,qBAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAC,4BAA4B,EAAE,IAAI,CAAC,uBAAuB,CAAC;;wBAA7F,SAA6F,CAAC;;;;;KACjG;IAES,+DAA6B,GAAvC,UAAwC,IAAmB;QACvD,yGAAyG;QACzG,OAAO,kCAA+B,OAAO,IAAI,KAAK,QAAQ,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,eAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAE,CAAC;IAClG,CAAC;IAEe,2CAAS,GAAzB;;;;;4BACoC,qBAAM,IAAI,CAAC,cAAc,CAAC,OAAO,CAAyC,4BAA4B,CAAC;;wBAAjI,uBAAuB,GAAG,SAAuG;wBACvI,IAAI,uBAAuB,EAAE;4BACzB,IAAI,CAAC,uBAAuB,GAAG,uBAAuB,CAAC;4BACvD,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAE;gCAChD,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,uBAAuB,CAAC;6BACpD;yBACJ;;;;;KACJ;IA/UD;QADC,kBAAM,CAAC,gBAAO,CAAC;;2DACU;IAI1B;QAFC,oBAAQ,EAAE;QACV,kBAAM,CAAC,gCAAc,CAAC;kCACG,gCAAc;mEAAC;IAGzC;QADC,kBAAM,CAAC,gCAAc,CAAC;;mEACkB;IAVhC,uBAAuB;QADnC,sBAAU,EAAE;OACA,uBAAuB,CAoVnC;IAAD,8BAAC;CAAA;AApVY,0DAAuB;AAkWpC,IAAiB,cAAc,CAyD9B;AAzDD,WAAiB,cAAc;IAE3B,IAAY,KAaX;IAbD,WAAY,KAAK;QACb;;WAEG;QACH,6CAAY;QACZ;;WAEG;QACH,uCAAS;QACT;;WAEG;QACH,6CAAY;IAChB,CAAC,EAbW,KAAK,GAAL,oBAAK,KAAL,oBAAK,QAahB;IAED,SAAgB,EAAE,CAAC,KAAU;QACzB,OAAO,gBAAK,CAAC,EAAE,CAAC,KAAK,CAAC,IAAI,OAAO,IAAI,KAAK,CAAC;IAC/C,CAAC;IAFe,iBAAE,KAEjB;IAED,SAAgB,OAAO,CAAC,KAAqB;QACzC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IACxB,CAAC;IAFe,sBAAO,UAEtB;IAEY,sBAAO,GAAG,UAAC,IAAoB,EAAE,KAAqB;QAC/D,IAAI,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YAClC,OAAO,CAAC,CAAC,CAAC;SACb;QACD,IAAI,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YAClC,OAAO,CAAC,CAAC;SACZ;QACD,IAAI,MAAM,GAAG,sBAAc,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,OAAO,MAAM,CAAC;SACjB;QACD,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE;YACzB,MAAM,GAAG,sBAAc,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YAC/C,IAAI,MAAM,KAAK,CAAC,EAAE;gBACd,OAAO,MAAM,CAAC;aACjB;SACJ;QACD,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE;YACzB,MAAM,GAAG,eAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;YAC7C,IAAI,MAAM,KAAK,CAAC,EAAE;gBACd,OAAO,MAAM,CAAC;aACjB;SACJ;QACD,IAAI,CAAC,CAAC,IAAI,CAAC,QAAQ,IAAI,CAAC,KAAK,CAAC,QAAQ,EAAE;YACpC,OAAO,CAAC,CAAC,CAAC;SACb;QACD,IAAI,CAAC,CAAC,KAAK,CAAC,QAAQ,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE;YACpC,OAAO,CAAC,CAAC;SACZ;QACD,OAAO,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;IACpC,CAAC;AAEL,CAAC,EAzDgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAyD9B;;;;;;;;;;;;;;;;;;;;;;;;;AC7aD,oGAA+C;AAC/C,wHAA8D;AAC9D,2HAAwD;AACxD,sJAAwE;AACxE,wJAA8E;AAI9E;IAAA;QAWuB,0BAAqB,GAAG,IAAI,eAAO,EAAQ,CAAC;IAgBnE,CAAC;IAdG,kDAAkB,GAAlB;QACI,IAAI,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;QACrC,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,CAAC;IACtC,CAAC;IAED,sBAAI,iDAAc;aAAlB;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC,KAAK,CAAC;QAC5C,CAAC;;;OAAA;IAES,oCAAI,GAAd,UAAe,OAAe;QAC1B,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;QACrD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;IAC9B,CAAC;IAtBD;QADC,kBAAM,CAAC,gBAAO,CAAC;;yDACU;IAG1B;QADC,kBAAM,CAAC,gCAAc,CAAC;kCACG,gCAAc;iEAAC;IAGzC;QADC,kBAAM,CAAC,qCAAmB,CAAC;kCACF,qCAAmB;iEAAC;IATrC,qBAAqB;QADjC,sBAAU,EAAE;OACA,qBAAqB,CA2BjC;IAAD,4BAAC;CAAA;AA3BY,sDAAqB;;;;;;;;;;;;;;ACRlC;;;gGAGgG;AAChG,gIAAgI;AAChI,sGAAsG;;;;;;;;;;;;;;;;;;;AAEtG,+GAAsD;AAEtD,IAAM,GAAG,GAAG,CAAC,cAAS,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC;AAQrC,IAAI,WAAsF,CAAC;AAI3F,CAAC;IACG,IAAI,OAAO,mBAAmB,KAAK,UAAU,IAAI,OAAO,kBAAkB,KAAK,UAAU,EAAE;QACvF,IAAM,WAAS,GAAiB,MAAM,CAAC,MAAM,CAAC;YAC1C,UAAU,EAAE,IAAI;YAChB,aAAa,gBAAK,OAAO,EAAE,CAAC,CAAC,CAAC;SACjC,CAAC,CAAC;QACH,WAAW,GAAG,UAAC,MAAM;YACjB,IAAM,MAAM,GAAG,UAAU,CAAC,cAAM,aAAM,CAAC,WAAS,CAAC,EAAjB,CAAiB,CAAC,CAAC;YACnD,IAAI,QAAQ,GAAG,KAAK,CAAC;YACrB,OAAO;gBACH,OAAO;oBACH,IAAI,QAAQ,EAAE;wBACV,OAAO;qBACV;oBACD,QAAQ,GAAG,IAAI,CAAC;oBAChB,YAAY,CAAC,MAAM,CAAC,CAAC;gBACzB,CAAC;aACJ,CAAC;QACN,CAAC,CAAC;KACL;SAAM;QACH,WAAW,GAAG,UAAC,MAAM,EAAE,OAAQ;YAC3B,IAAM,MAAM,GAAW,mBAAmB,CAAC,MAAM,EAAE,OAAO,OAAO,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,OAAO,WAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;YAC1G,IAAI,QAAQ,GAAG,KAAK,CAAC;YACrB,OAAO;gBACH,OAAO;oBACH,IAAI,QAAQ,EAAE;wBACV,OAAO;qBACV;oBACD,QAAQ,GAAG,IAAI,CAAC;oBAChB,kBAAkB,CAAC,MAAM,CAAC,CAAC;gBAC/B,CAAC;aACJ,CAAC;QACN,CAAC,CAAC;KACL;AACL,CAAC,CAAC,EAAE,CAAC;AAEL;;;GAGG;AACH;IASI,mBAAY,QAAiB;QAA7B,iBAWC;QAfO,YAAO,GAAY,KAAK,CAAC;QAK7B,IAAI,CAAC,SAAS,GAAG;YACb,IAAI;gBACA,KAAI,CAAC,MAAM,GAAG,QAAQ,EAAE,CAAC;aAC5B;YAAC,OAAO,GAAG,EAAE;gBACV,KAAI,CAAC,MAAM,GAAG,GAAG,CAAC;aACrB;oBAAS;gBACN,KAAI,CAAC,OAAO,GAAG,IAAI,CAAC;aACvB;QACL,CAAC,CAAC;QACF,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,cAAM,YAAI,CAAC,SAAS,EAAE,EAAhB,CAAgB,CAAC,CAAC;IACvD,CAAC;IAED,2BAAO,GAAP;QACI,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAED,sBAAI,4BAAK;aAAT;YACI,IAAI,CAAC,IAAI,CAAC,OAAO,EAAE;gBACf,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,CAAC;gBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;aACpB;YACD,IAAI,IAAI,CAAC,MAAM,EAAE;gBACb,MAAM,IAAI,CAAC,MAAM,CAAC;aACrB;YACD,OAAO,IAAI,CAAC,MAAO,CAAC;QACxB,CAAC;;;OAAA;IACL,gBAAC;AAAD,CAAC;AAED,0FAA0F;AAC1F,6FAA6F;AAC7F,8DAA8D;AAE9D,oFAAoF;AACpF,IAAM,+BAA+B,GAAuE,IAAI,SAAS,CAAC;IACtH,IAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,MAAM,EAAE,CAAC,CAAC;IACtF,OAAO;QACH,QAAQ,EAAE,QAAQ;QAClB,iBAAiB,EAAE,QAAQ,CAAC,eAAe,EAAE,CAAC,OAAO;KACxD,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,2CAA2C;AAC3C,IAAM,2BAA2B,GAA2C,IAAI,SAAS,CAAC;IACtF,IAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC,CAAC;IACjE,OAAO;QACH,QAAQ,EAAE,QAAQ;KACrB,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,mGAAmG;AACnG,IAAM,yCAAyC,GAA2C,IAAI,SAAS,CAAC;IACpG,IAAM,QAAQ,GAAG,IAAI,IAAI,CAAC,QAAQ,CAAC,SAAS,EAAE,EAAE,OAAO,EAAE,IAAI,EAAE,WAAW,EAAE,QAAQ,EAAE,CAAC,CAAC;IACxF,OAAO;QACH,QAAQ,EAAE,QAAQ;KACrB,CAAC;AACN,CAAC,CAAC,CAAC;AAEH,SAAgB,gBAAgB,CAAC,GAAkB,EAAE,KAAoB,EAAE,aAAqB;IAArB,qDAAqB;IAC5F,IAAM,CAAC,GAAG,GAAG,IAAI,EAAE,CAAC;IACpB,IAAM,CAAC,GAAG,KAAK,IAAI,EAAE,CAAC;IACtB,IAAM,MAAM,GAAG,+BAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;IAE5E,gDAAgD;IAChD,6DAA6D;IAC7D,IAAI,+BAA+B,CAAC,KAAK,CAAC,iBAAiB,IAAI,MAAM,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,EAAE;QACpF,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACzB;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAZD,4CAYC;AAED,wGAAwG;AACxG,SAAgB,uBAAuB,CAAC,GAAkB,EAAE,KAAoB;IACtE,gBAA0B,uBAAuB,CAAC,GAAG,EAAE,IAAI,CAAC,MAA3D,OAAO,UAAE,YAAY,QAAsC,CAAC;IAC7D,gBAA8B,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,MAAjE,SAAS,UAAE,cAAc,QAAwC,CAAC;IACzE,IAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;IACnE,IAAM,8BAA8B,GAAG,yCAAyC,CAAC,KAAK,CAAC,QAAQ,CAAC;IAChG,IAAI,MAAM,CAAC;IAEX,uFAAuF;IACvF,MAAM,GAAG,8BAA8B,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAC7E,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,OAAO,MAAM,CAAC;KACjB;IAED,6GAA6G;IAC7G,MAAM,GAAG,8BAA8B,CAAC,8BAA8B,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IACtG,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,OAAO,MAAM,CAAC;KACjB;IAED,6CAA6C;IAC7C,IAAI,YAAY,KAAK,cAAc,EAAE;QACjC,OAAO,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;KAChE;IAED,OAAO,CAAC,CAAC;AACb,CAAC;AAzBD,0DAyBC;AAED,IAAM,aAAa,GAAG,qBAAqB,CAAC;AAE5C,SAAgB,sBAAsB,CAAC,GAAkB,EAAE,KAAoB,EAAE,aAAqB;IAArB,qDAAqB;IAClG,IAAI,CAAC,aAAa,EAAE;QAChB,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;QAC/B,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;KACxC;IAEK,gBAA0B,uBAAuB,CAAC,GAAG,CAAC,MAArD,OAAO,UAAE,YAAY,QAAgC,CAAC;IACvD,gBAA8B,uBAAuB,CAAC,KAAK,CAAC,MAA3D,SAAS,UAAE,cAAc,QAAkC,CAAC;IAEnE,IAAI,OAAO,KAAK,SAAS,EAAE;QACvB,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvC;IAED,IAAI,YAAY,KAAK,cAAc,EAAE;QACjC,OAAO,CAAC,CAAC;KACZ;IAED,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAClD,CAAC;AAlBD,wDAkBC;AAED,SAAgB,qBAAqB,CAAC,GAAkB,EAAE,KAAoB;IACpE,gBAA0B,uBAAuB,CAAC,GAAG,CAAC,MAArD,OAAO,UAAE,YAAY,QAAgC,CAAC;IACvD,gBAA8B,uBAAuB,CAAC,KAAK,CAAC,MAA3D,SAAS,UAAE,cAAc,QAAkC,CAAC;IAEnE,IAAI,MAAM,GAAG,+BAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;IAElG,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,gDAAgD;QAChD,6DAA6D;QAC7D,IAAI,+BAA+B,CAAC,KAAK,CAAC,iBAAiB,IAAI,YAAY,KAAK,cAAc,EAAE;YAC5F,OAAO,YAAY,GAAG,cAAc,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACjD;QAED,0CAA0C;QAC1C,MAAM,GAAG,+BAA+B,CAAC,KAAK,CAAC,QAAQ,CAAC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;QAEpF,IAAI,+BAA+B,CAAC,KAAK,CAAC,iBAAiB,IAAI,MAAM,KAAK,CAAC,IAAI,OAAO,KAAK,SAAS,EAAE;YAClG,OAAO,OAAO,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;SACvC;KACJ;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAtBD,sDAsBC;AAED,mGAAmG;AACnG,SAAgB,4BAA4B,CAAC,GAAkB,EAAE,KAAoB;IAC3E,gBAA0B,uBAAuB,CAAC,GAAG,EAAE,IAAI,CAAC,MAA3D,OAAO,UAAE,YAAY,QAAsC,CAAC;IAC7D,gBAA8B,uBAAuB,CAAC,KAAK,EAAE,IAAI,CAAC,MAAjE,SAAS,UAAE,cAAc,QAAwC,CAAC;IACzE,IAAM,eAAe,GAAG,2BAA2B,CAAC,KAAK,CAAC,QAAQ,CAAC;IACnE,IAAM,8BAA8B,GAAG,yCAAyC,CAAC,KAAK,CAAC,QAAQ,CAAC;IAChG,IAAI,MAAM,CAAC;IAEX,mGAAmG;IACnG,MAAM,GAAG,8BAA8B,CAAC,8BAA8B,EAAE,YAAY,EAAE,cAAc,CAAC,CAAC;IACtG,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,OAAO,MAAM,CAAC;KACjB;IAED,iBAAiB;IACjB,MAAM,GAAG,8BAA8B,CAAC,eAAe,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;IAC7E,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,OAAO,MAAM,CAAC;KACjB;IAED,yCAAyC;IACzC,IAAI,YAAY,KAAK,cAAc,EAAE;QACjC,OAAO,eAAe,CAAC,OAAO,CAAC,YAAY,EAAE,cAAc,CAAC,CAAC;KAChE;IAED,OAAO,CAAC,CAAC;AACb,CAAC;AAzBD,oEAyBC;AAED,wGAAwG;AACxG,SAAS,uBAAuB,CAAC,GAAmB,EAAE,eAAuB;IAAvB,yDAAuB;IACzE,IAAM,KAAK,GAAG,GAAG,CAAC,CAAC,CAAC,aAAa,CAAC,IAAI,CAAC,GAAG,CAAkB,CAAC,CAAC,CAAE,EAAoB,CAAC;IAErF,IAAI,MAAM,GAAqB,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,IAAI,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC;IAEtF,wFAAwF;IACxF,0DAA0D;IAC1D,IAAI,eAAe,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,IAAI,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,EAAE;QAC1F,MAAM,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC;KAC9C;IAED,OAAO,MAAM,CAAC;AAClB,CAAC;AAED,SAAS,8BAA8B,CAAC,QAAuB,EAAE,GAAW,EAAE,KAAa;IACvF,wBAAwB;IACxB,IAAI,MAAM,GAAG,QAAQ,CAAC,OAAO,CAAC,GAAG,EAAE,KAAK,CAAC,CAAC;IAC1C,IAAI,MAAM,KAAK,CAAC,EAAE;QACd,OAAO,MAAM,CAAC;KACjB;IAED,0EAA0E;IAC1E,oDAAoD;IACpD,IAAI,GAAG,CAAC,MAAM,KAAK,KAAK,CAAC,MAAM,EAAE;QAC7B,OAAO,GAAG,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KAC7C;IAED,OAAO,CAAC,CAAC;AACb,CAAC;AAED,SAAS,qBAAqB,CAAC,GAAW,EAAE,KAAa,EAAE,aAAqB;IAArB,qDAAqB;IAC5E,IAAI,CAAC,aAAa,EAAE;QAChB,GAAG,GAAG,GAAG,IAAI,GAAG,CAAC,WAAW,EAAE,CAAC;QAC/B,KAAK,GAAG,KAAK,IAAI,KAAK,CAAC,WAAW,EAAE,CAAC;KACxC;IAED,IAAI,GAAG,KAAK,KAAK,EAAE;QACf,OAAO,CAAC,CAAC;KACZ;IAED,OAAO,GAAG,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;AAChC,CAAC;AAED,SAAgB,YAAY,CAAC,GAAW,EAAE,KAAa,EAAE,aAAqB;IAArB,qDAAqB;IAC1E,IAAM,QAAQ,GAAG,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAChC,IAAM,UAAU,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IAEpC,IAAM,OAAO,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;IACpC,IAAM,SAAS,GAAG,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;IACxC,IAAI,MAAe,EAAE,QAAiB,CAAC;IAEvC,KAAK,IAAI,CAAC,GAAG,CAAC,GAAI,CAAC,EAAE,EAAE;QACnB,MAAM,GAAG,OAAO,KAAK,CAAC,CAAC;QACvB,QAAQ,GAAG,SAAS,KAAK,CAAC,CAAC;QAE3B,IAAI,MAAM,IAAI,QAAQ,EAAE;YACpB,OAAO,gBAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;SACtE;aAAM,IAAI,MAAM,EAAE;YACf,OAAO,CAAC,CAAC,CAAC;SACb;aAAM,IAAI,QAAQ,EAAE;YACjB,OAAO,CAAC,CAAC;SACZ;QAED,IAAM,MAAM,GAAG,qBAAqB,CAAC,QAAQ,CAAC,CAAC,CAAC,EAAE,UAAU,CAAC,CAAC,CAAC,EAAE,aAAa,CAAC,CAAC;QAEhF,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,OAAO,MAAM,CAAC;SACjB;KACJ;AACL,CAAC;AA1BD,oCA0BC;AAED,SAAgB,eAAe,CAAC,GAAW,EAAE,KAAa,EAAE,OAAe;IACvE,IAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IACvC,IAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IAEzC,8CAA8C;IAC9C,IAAM,aAAa,GAAG,eAAe,CAAC,GAAG,EAAE,KAAK,EAAE,OAAO,CAAC,CAAC;IAC3D,IAAI,aAAa,EAAE;QACf,OAAO,aAAa,CAAC;KACxB;IAED,8CAA8C;IAC9C,IAAM,mBAAmB,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC3D,IAAM,mBAAmB,GAAG,YAAY,CAAC,QAAQ,CAAC,OAAO,CAAC,CAAC;IAC3D,IAAI,mBAAmB,KAAK,mBAAmB,EAAE;QAC7C,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvC;IAED,wBAAwB;IACxB,IAAM,CAAC,GAAG,gBAAgB,CAAC,YAAY,EAAE,YAAY,CAAC,CAAC;IACvD,IAAI,CAAC,KAAK,CAAC,EAAE;QACT,OAAO,CAAC,CAAC;KACZ;IAED,kBAAkB;IAClB,OAAO,YAAY,CAAC,aAAa,CAAC,YAAY,CAAC,CAAC;AACpD,CAAC;AAzBD,0CAyBC;AAED,SAAgB,eAAe,CAAC,GAAW,EAAE,KAAa,EAAE,OAAe;IACvE,IAAM,YAAY,GAAG,GAAG,CAAC,WAAW,EAAE,CAAC;IACvC,IAAM,YAAY,GAAG,KAAK,CAAC,WAAW,EAAE,CAAC;IAEzC,8CAA8C;IAC9C,IAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC7D,IAAM,mBAAmB,GAAG,YAAY,CAAC,UAAU,CAAC,OAAO,CAAC,CAAC;IAC7D,IAAI,mBAAmB,KAAK,mBAAmB,EAAE;QAC7C,OAAO,mBAAmB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;KACvC;IAED,8FAA8F;IAC9F,qCAAqC;SAChC,IAAI,mBAAmB,IAAI,mBAAmB,EAAE;QACjD,IAAI,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;YAC3C,OAAO,CAAC,CAAC,CAAC;SACb;QAED,IAAI,YAAY,CAAC,MAAM,GAAG,YAAY,CAAC,MAAM,EAAE;YAC3C,OAAO,CAAC,CAAC;SACZ;KACJ;IAED,OAAO,CAAC,CAAC;AACb,CAAC;AAxBD,0CAwBC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7WY,2BAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAMpD,yBAAiB,GAAG,0BAA0B,CAAC;AAC/C,qBAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTrD,+GAA6D;AAE7D,gHAA4C;AAS5C,IAAiB,yBAAyB,CAkCzC;AAlCD,WAAiB,yBAAyB;IAEtC,SAAgB,IAAI,CAAC,KAAgC;QAUjD,kCAAkC;QAClC,IAAM,IAAI,GAAG,UAAI,KAAU,EAAE,MAAW,EAAE,MAAsC;YAC5E,OAAO,KAAK,CAAC,MAAM,CAAC,cAAI,IAAI,aAAM,CAAC,SAAS,CAAC,eAAK,IAAI,aAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAnB,CAAmB,CAAC,KAAK,CAAC,CAAC,EAArD,CAAqD,CAAC,CAAC;QACvF,CAAC;QACO,IAAQ,SAAS,GAAK,KAAK,CAAC,QAAQ,OAAnB,CAAoB;QACrC,IAAQ,SAAS,GAAK,KAAK,CAAC,QAAQ,OAAnB,CAAoB;QACrC,IAAO,QAAQ,GAAK,KAAK,CAAC,QAAQ,MAAnB,CAAoB;QACnC,IAAO,QAAQ,GAAK,KAAK,CAAC,QAAQ,MAAnB,CAAoB;QAC3C,IAAM,WAAW,GAAG,UAAC,IAAW,EAAE,KAAY,IAAK,YAAK,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAzB,CAAyB,CAAC;QAC7E,IAAM,UAAU,GAAG,UAAC,IAAU,EAAE,KAAW,IAAK,WAAI,CAAC,MAAM,CAAC,IAAI,EAAE,KAAK,CAAC,EAAxB,CAAwB,CAAC;QACzE,OAAO;YACH,QAAQ,EAAE;gBACN,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC;gBAC/C,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;aAC9C;YACD,QAAQ,EAAE;gBACN,MAAM,EAAE,IAAI,CAAC,SAAS,EAAE,SAAS,EAAE,WAAW,CAAC;gBAC/C,KAAK,EAAE,IAAI,CAAC,QAAQ,EAAE,QAAQ,EAAE,UAAU,CAAC;aAC9C;SACJ,CAAC;IACN,CAAC;IA9Be,8BAAI,OA8BnB;AAEL,CAAC,EAlCgB,yBAAyB,GAAzB,iCAAyB,KAAzB,iCAAyB,QAkCzC;AAUY,2BAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAOpD,yBAAiB,GAAG,0BAA0B,CAAC;AAC/C,qBAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;AAoBrD,IAAiB,IAAI,CA2GpB;AA3GD,WAAiB,IAAI;IAGjB,IAAiB,QAAQ,CAUxB;IAVD,WAAiB,QAAQ;QACrB,SAAgB,UAAU,CAAC,QAA4B;YACnD,IAAI,QAAQ,KAAK,QAAQ,EAAE;gBACvB,OAAO,QAAQ,CAAC;aACnB;iBAAM,IAAI,QAAQ,KAAK,SAAS,EAAE;gBAC/B,OAAO,SAAS,CAAC;aACpB;iBAAM;gBACH,OAAO,SAAS,CAAC;aACpB;QACL,CAAC;QARe,mBAAU,aAQzB;IACL,CAAC,EAVgB,QAAQ,GAAR,aAAQ,KAAR,aAAQ,QAUxB;IAED,SAAgB,EAAE,CAAC,GAAQ;QACvB,OAAO,CAAC,CAAC,GAAG,IAAI,SAAS,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,SAAS,CAAC,KAAK,QAAQ,IAAI,UAAU,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,UAAU,CAAC,KAAK,QAAQ,CAAC;IACvI,CAAC;IAFe,OAAE,KAEjB;IAED,SAAgB,QAAQ,CAAC,IAAU,EAAE,OAAoD;QAApD,sCAAmC,QAAQ,EAAE,KAAK,EAAE;QACrF,IAAI,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,KAAK,EAAE;YAChC,OAAU,IAAI,CAAC,OAAO,SAAI,IAAI,CAAC,KAAO;SACzC;QACD,OAAO,IAAI,CAAC,OAAO,CAAC;IACxB,CAAC;IALe,aAAQ,WAKvB;IAED,SAAgB,OAAO,CAAC,IAAU,EAAE,KAAW;QAC3C,uDAAuD;QACvD,IAAI,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,EAAE;YAC1C,OAAO,CAAC,CAAC,CAAC;SACb;QACD,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,WAAW,CAAC,KAAK,CAAC,EAAE;YAC1C,OAAO,CAAC,CAAC;SACZ;QACD,IAAI,MAAM,GAAG,sBAAc,CAAC,IAAI,CAAC,QAAQ,CAAC,iBAAiB,EAAE,EAAE,KAAK,CAAC,QAAQ,CAAC,iBAAiB,EAAE,CAAC,CAAC;QACnG,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,OAAO,MAAM,CAAC;SACjB;QACD,MAAM,GAAG,sBAAc,CAAC,IAAI,CAAC,OAAO,EAAE,KAAK,CAAC,OAAO,CAAC,CAAC;QACrD,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,OAAO,MAAM,CAAC;SACjB;QACD,OAAO,sBAAc,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,EAAE,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;IAC/D,CAAC;IAjBe,YAAO,UAiBtB;IAED,SAAgB,MAAM,CAAC,IAAsB,EAAE,KAAuB;QAClE,IAAI,IAAI,IAAI,KAAK,EAAE;YACf,OAAO,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO;mBAC9B,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ;mBAChC,CAAC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,IAAI,EAAE,CAAC,CAAC;SACrD;QACD,OAAO,IAAI,KAAK,KAAK,CAAC;IAC1B,CAAC;IAPe,WAAM,SAOrB;IAED,4JAA4J;IAC5J,SAAgB,WAAW,CAAC,IAAU;QAClC,IAAM,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC,iBAAiB,EAAE,CAAC;QACjD,IAAI,cAAS,EAAE;YACX,yDAAyD;YACzD,OAAO,OAAO,KAAK,MAAM,CAAC,iBAAiB,EAAE,CAAC;SACjD;QACD,0DAA0D;QAC1D,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE;YAC9B,OAAO,KAAK;SACf;QACD,IAAI,UAAK,EAAE;YACP,mCAAmC;YACnC,IAAI,eAAe,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;gBACzD,OAAO;oBACH,cAAc;oBACd,aAAa;oBACb,iCAAiC;iBACpC,CAAC,GAAG,CAAC,WAAC,IAAI,QAAC,CAAC,iBAAiB,EAAE,EAArB,CAAqB,CAAC,CAAC,KAAK,CAAC,WAAC,IAAI,QAAC,KAAK,OAAO,EAAb,CAAa,CAAC,CAAC;aAC/D;SACJ;QAED,0BAA0B;QAC1B,IAAI,oDAAoD,CAAC,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE;YAC9F,sEAAsE;YACtE,IAAI,OAAO,CAAC,UAAU,CAAC,WAAW,CAAC,EAAE;gBACjC,IAAM,KAAK,GAAG,MAAM,CAAC,QAAQ,CAAC,OAAO,CAAC,SAAS,CAAC,WAAW,CAAC,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC;gBACzE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,IAAI,EAAE,IAAI,KAAK,EAAE;oBACnD,OAAO,KAAK,CAAC;iBAChB;aACJ;YACD,OAAO,IAAI,CAAC;SACf;QAED,OAAO,KAAK,CAAC;IACjB,CAAC;IAlCe,gBAAW,cAkC1B;IAED,SAAgB,MAAM,CAAC,IAAsB,EAAE,KAAgC;QAC3E,IAAI,IAAI,IAAI,KAAK,EAAE;YACf,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBAC5B,OAAO,CAAC,GAAG,CAAC,0CAAwC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,0DAAqD,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,MAAG,CAAC,CAAC;aAC1J;YACD,IAAI,OAAO,KAAK,KAAK,QAAQ,EAAE;gBAC3B,OAAO,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC;aACjC;YACD,IAAI,KAAK,CAAC,QAAQ,KAAK,QAAQ,EAAE;gBAC7B,OAAO,CAAC,GAAG,CAAC,2CAAyC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,0DAAqD,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,MAAG,CAAC,CAAC;aAC3J;YACD,OAAO,IAAI,CAAC,OAAO,KAAK,KAAK,CAAC,OAAO,CAAC;SACzC;QACD,OAAO,KAAK,CAAC;IACjB,CAAC;IAde,WAAM,SAcrB;AAEL,CAAC,EA3GgB,IAAI,GAAJ,YAAI,KAAJ,YAAI,QA2GpB;AA+BD,IAAiB,YAAY,CA2C5B;AA3CD,WAAiB,YAAY;IAEzB,SAAgB,EAAE,CAAC,GAAQ;QACvB,OAAO,CAAC,CAAC,GAAG,IAAI,QAAQ,IAAI,GAAG,IAAI,OAAO,IAAI,GAAG,IAAI,QAAQ,IAAI,GAAG;eAC7D,OAAO,GAAG,CAAC,QAAQ,CAAC,KAAK,QAAQ,IAAI,OAAO,GAAG,CAAC,OAAO,CAAC,KAAK,QAAQ,IAAI,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAChH,CAAC;IAHe,eAAE,KAGjB;IAED;;;;OAIG;IACH,SAAgB,QAAQ,CAAC,IAAY,EAAE,aAA6B;QAChE,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE;YACvB,OAAO,IAAI,CAAC;SACf;QAED,IAAM,OAAO,GAAG,UAAC,MAAqB;YAClC,IAAM,aAAa,GAAG,MAAM,CAAC,IAAI,CAAC,UAAC,EAAY;oBAAV,QAAQ;gBAAO,eAAQ;YAAR,CAAQ,CAAC,CAAC;YAC9D,IAAI,CAAC,aAAa,EAAE;gBAChB,OAAO,CAAC,IAAI,CAAC,0DAAwD,IAAI,CAAC,SAAS,CAAC,MAAM,CAAG,CAAC,CAAC;gBAC/F,OAAO,SAAS,CAAC;aACpB;YACD,OAAO,aAAa,CAAC,KAAK,CAAC;QAC/B,CAAC,CAAC;QACF,IAAM,OAAO,GAAG,aAAa;aACxB,GAAG,CAAC,UAAC,EAAkB;gBAAhB,MAAM,cAAE,MAAM;YAAO,QAAC,MAAM,EAAE,OAAO,CAAC,MAAM,CAAC,CAAC;QAAzB,CAAyB,CAAC;aACtD,MAAM,CAAC,UAAC,EAAS;gBAAT,kBAAS,EAAN,KAAK;YAAM,QAAC,CAAC,KAAK;QAAP,CAAO,CAAC;aAC9B,GAAG,CAAC,UAAC,EAAe;gBAAf,kBAAe,EAAd,MAAM,UAAE,KAAK;YAAM,OAAG,MAAM,SAAI,KAAO;QAApB,CAAoB,CAAC;aAC9C,IAAI,CAAC,GAAG,CAAC,CAAC;QAEf,OAAU,IAAI,SAAI,OAAS,CAAC;IAChC,CAAC;IApBe,qBAAQ,WAoBvB;IAED;QAAuC,qCAAK;QACxC,2BAAY,OAAe;YAA3B,YACI,kBAAM,OAAO,CAAC,SAEjB;YADG,MAAM,CAAC,cAAc,CAAC,KAAI,EAAE,iBAAiB,CAAC,SAAS,CAAC,CAAC;;QAC7D,CAAC;QACL,wBAAC;IAAD,CAAC,CALsC,KAAK,GAK3C;IALY,8BAAiB,oBAK7B;IAEY,6BAAgB,GAAG,UAAC,IAAkB,EAAE,KAAmB,IAAK,6BAAc,CAAC,IAAI,CAAC,KAAK,CAAC,iBAAiB,EAAE,EAAE,KAAK,CAAC,KAAK,CAAC,iBAAiB,EAAE,CAAC,EAA/E,CAA+E,CAAC;AAEjK,CAAC,EA3CgB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QA2C5B;AAaD,IAAiB,UAAU,CAY1B;AAZD,WAAiB,UAAU;IAEvB,SAAgB,MAAM,CAAC,IAA4B,EAAE,KAA6B;QAC9E,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,CAAC,KAAK,CAAC;SACjB;QACD,IAAI,CAAC,KAAK,EAAE;YACR,OAAO,CAAC,IAAI,CAAC;SAChB;QACD,OAAO,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,QAAQ,KAAK,KAAK,CAAC,QAAQ,CAAC;IAChG,CAAC;IARe,iBAAM,SAQrB;AAEL,CAAC,EAZgB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAY1B;AAED,IAAiB,KAAK,CAsErB;AAtED,WAAiB,KAAK;IAElB,SAAgB,EAAE,CAAC,KAAU;QACzB,OAAO,CAAC,CAAC,KAAK,IAAI,MAAM,IAAI,KAAK,CAAC;IACtC,CAAC;IAFe,QAAE,KAEjB;IAED,SAAgB,MAAM,CAAC,IAAW,EAAE,KAAY;QAC5C,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;IAChE,CAAC;IAFe,YAAM,SAErB;IAED,SAAgB,MAAM,CAAC,IAAW,EAAE,KAAqB;QACrD,oIAAoI;QACpI,iIAAiI;QACjI,wJAAwJ;QACxJ,IAAM,KAAK,GAAG,OAAO,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC;QAClE,IAAI,IAAI,CAAC,IAAI,IAAI,KAAK,CAAC,IAAI,EAAE;YACzB,OAAO,IAAI,CAAC,IAAI,KAAK,KAAK,CAAC,IAAI,CAAC;SACnC;QACD,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,KAAK,KAAK,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,EAAE,CAAC,CAAC;IACpF,CAAC;IATe,YAAM,SASrB;IAED,SAAgB,OAAO,CAAC,IAAW,EAAE,KAAY;QAC7C,IAAI,MAAM,GAAG,sBAAc,CAAC,IAAI,CAAC,IAAI,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QACnD,IAAI,MAAM,KAAK,CAAC,EAAE;YACd,MAAM,GAAG,sBAAc,CAAC,IAAI,CAAC,IAAI,IAAI,EAAE,EAAE,KAAK,CAAC,IAAI,IAAI,EAAE,CAAC,CAAC;SAC9D;QACD,OAAO,MAAM,CAAC;IAClB,CAAC;IANe,aAAO,UAMtB;IAED,SAAgB,SAAS,CAAC,KAAY;QAClC,OAAO,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC;IACxB,CAAC;IAFe,eAAS,YAExB;IAED,SAAgB,QAAQ,CAAC,KAAY,EAAE,OAAiD;QAAjD,sCAAkC,OAAO,EAAE,IAAI,EAAE;QACpF,IAAM,IAAI,GAAG,OAAO,IAAI,OAAO,CAAC,OAAO,IAAI,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,OAAK,KAAK,CAAC,IAAI,MAAG,CAAC,CAAC,CAAC,EAAE,CAAC;QAChF,OAAO,KAAG,KAAK,CAAC,IAAI,GAAG,IAAM,CAAC;IAClC,CAAC;IAHe,cAAQ,WAGvB;IAGD,SAAgB,cAAc,CAC1B,aAAgC,EAChC,MAA8C;;QAC9C,+EAA+E;QAC/E,yEAAyE;QACzE,IAAM,kBAAkB,GAAG,IAAI,GAAG,EAAkB,CAAC;;YACrD,KAAuB,8BAAM,iFAAE;gBAAlB,UAAI;gBACb,IAAM,OAAO,GAAG,kBAAkB,CAAC,GAAG,CAAC,MAAI,CAAC,IAAI,CAAC,CAAC;gBAClD,kBAAkB,CAAC,GAAG,CAAC,MAAI,EAAE,OAAO,GAAG,CAAC,CAAC,CAAC;aAC7C;;;;;;;;;QAED,gFAAgF;QAChF,IAAM,QAAQ,GAAG,UAAC,KAAsC;YACpD,IAAI,CAAC,CAAC,aAAa,EAAE;gBACjB,IAAI,KAAK,CAAC,MAAM,CAAC,KAAK,EAAE,aAAa,CAAC,EAAE;oBACpC,IAAI,aAAa,IAAI,aAAa,EAAE;wBAChC,OAAO,KAAK,CAAC,WAAW,KAAM,aAAqB,CAAC,WAAW,CAAC;qBACnE;oBACD,OAAO,IAAI,CAAC;iBACf;aACJ;YACD,OAAO,KAAK,CAAC;QACjB,CAAC;QACD,OAAO,MAAM,CAAC,GAAG,CAAC,eAAK,IAAI,8BACpB,KAAK,KACR,OAAO,EAAE,CAAC,kBAAkB,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,QAAM,KAAK,CAAC,WAAa,CAAC,CAAC,CAAC,SAAS,EAC9F,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,EACzB,OAAO,EAAE,CAAC,SAAS,CAAC,KAAK,CAAC,IAC5B,EALyB,CAKzB,CAAC,CAAC;IACR,CAAC;IA7Be,oBAAc,iBA6B7B;AAEL,CAAC,EAtEgB,KAAK,GAAL,aAAK,KAAL,aAAK,QAsErB;;;;;;;;;;;;;;;;ACvWY,2BAAmB,GAAG,MAAM,CAAC,qBAAqB,CAAC,CAAC;AAMpD,yBAAiB,GAAG,0BAA0B,CAAC;AAC/C,qBAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;;;;;;;;;;;;;;;;ACNxC,yBAAiB,GAAG,MAAM,CAAC,mBAAmB,CAAC,CAAC;AAKhD,uBAAe,GAAG,wBAAwB,CAAC;AAC3C,mBAAW,GAAG,MAAM,CAAC,aAAa,CAAC,CAAC;;;;;;;;;;;;;;;;ACTpC,yBAAiB,GAAG,2BAA2B,CAAC;AAChD,qBAAa,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;ACDrD,uJAAoC;AACpC,iJAAiC;AACjC,iJAAiC;AACjC,iJAAiC;AACjC,6IAA+B;AAC/B,iJAAiC;AACjC,2IAA8B;AAC9B,mJAAkC;AAClC,mJAAkC;AAClC,yIAA6B;AAC7B,qJAAmC;AACnC,2JAAsC;;;;;;;;;;;;;;;;ACXtC,gHAA4C;AAc5C,IAAiB,WAAW,CAQ3B;AARD,WAAiB,WAAW;IAExB,IAAiB,OAAO,CAKvB;IALD,WAAiB,OAAO;QACpB;;WAEG;QACU,kBAAU,GAAG,UAAC,IAAa,EAAE,KAAc,IAAK,6BAAc,CAAC,KAAK,EAAE,IAAI,CAAC,EAA3B,CAA2B,CAAC;IAC7F,CAAC,EALgB,OAAO,GAAP,mBAAO,KAAP,mBAAO,QAKvB;AACL,CAAC,EARgB,WAAW,GAAX,mBAAW,KAAX,mBAAW,QAQ3B;;;;;;;;;;;;;;;;AClBY,0BAAkB,GAAG,2BAA2B,CAAC;AACjD,sBAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;;;;;;;;;;;;;;;;ACGvD,IAAiB,MAAM,CAOtB;AAPD,WAAiB,MAAM;IACnB,SAAgB,IAAI,CAAC,MAAqC;QACtD,OAAO,OAAO,MAAM,CAAC,OAAO,KAAK,QAAQ,CAAC;IAC9C,CAAC;IAFe,WAAI,OAEnB;IACY,SAAE,GAAO,EAAE,CAAC;IACZ,oBAAa,GAAgB,EAAE,OAAO,EAAE,gBAAgB,EAAE,CAAC;IAC3D,wBAAiB,GAAgB,EAAE,OAAO,EAAE,oBAAoB,EAAE,CAAC;AACpF,CAAC,EAPgB,MAAM,GAAN,cAAM,KAAN,cAAM,QAOtB;AAEY,0BAAkB,GAAG,0BAA0B,CAAC;AAChD,sBAAc,GAAG,MAAM,CAAC,gBAAgB,CAAC,CAAC;AAoBvD,IAAiB,aAAa,CAW7B;AAXD,WAAiB,aAAa;IAG1B,IAAiB,QAAQ,CAExB;IAFD,WAAiB,QAAQ;QACR,gBAAO,GAAa,IAAI,CAAC;IAC1C,CAAC,EAFgB,QAAQ,GAAR,sBAAQ,KAAR,sBAAQ,QAExB;IAED,IAAY,cAEX;IAFD,WAAY,cAAc;QACtB,uDAAU;IACd,CAAC,EAFW,cAAc,GAAd,4BAAc,KAAd,4BAAc,QAEzB;AAEL,CAAC,EAXgB,aAAa,GAAb,qBAAa,KAAb,qBAAa,QAW7B;AAEY,4BAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAkBnE,IAAiB,YAAY,CAe5B;AAfD,WAAiB,YAAY;IACzB,IAAiB,UAAU,CAa1B;IAbD,WAAiB,UAAU;QACvB;;WAEG;QACU,wBAAa,GAAG,CAAC,CAAC;QAC/B;;WAEG;QACU,gCAAqB,GAAG,CAAC,CAAC;QACvC;;WAEG;QACU,sBAAW,GAAG,CAAC,CAAC;IACjC,CAAC,EAbgB,UAAU,GAAV,uBAAU,KAAV,uBAAU,QAa1B;AACL,CAAC,EAfgB,YAAY,GAAZ,oBAAY,KAAZ,oBAAY,QAe5B;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClFY,2BAAmB,GAAG,4BAA4B,CAAC;AACnD,uBAAe,GAAG,MAAM,CAAC,iBAAiB,CAAC,CAAC;AAmDzD,IAAiB,MAAM,CActB;AAdD,WAAiB,MAAM;IACnB,SAAgB,EAAE,CAAC,GAAQ;QACvB,OAAO,CAAC,CAAC,GAAG,IAAI,MAAM,IAAI,GAAG,IAAI,KAAK,IAAI,GAAG,IAAI,OAAO,GAAG,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,GAAG,CAAC,GAAG,KAAK,QAAQ,CAAC;IACjH,CAAC;IAFe,SAAE,KAEjB;IACD,IAAiB,UAAU,CAK1B;IALD,WAAiB,UAAU;QACV,eAAI,GAAG,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC;QACxB,iBAAM,GAAG,CAAC,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QAC9B,qBAAU,GAAG,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC;QACvD,cAAG,GAAG,KAAK,CAAC,IAAI,CAAC,IAAI,GAAG,UAAK,eAAI,EAAK,iBAAM,EAAK,qBAAU,EAAE,CAAC,CAAC;IAChF,CAAC,EALgB,UAAU,GAAV,iBAAU,KAAV,iBAAU,QAK1B;IACD,SAAgB,UAAU,CAAC,GAAiB,EAAE,MAAc;QAChD,eAAW,GAA8C,MAAM,YAApD,EAAE,mBAAmB,GAAyB,MAAM,oBAA/B,EAAE,kBAAkB,GAAK,MAAM,mBAAX,CAAY;QACxE,OAAO,UAAC,WAAW,GAAK,mBAAmB,EAAK,kBAAkB,EAAE,OAAO,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;IACvG,CAAC;IAHe,iBAAU,aAGzB;AACL,CAAC,EAdgB,MAAM,GAAN,cAAM,KAAN,cAAM,QActB;;;;;;;;;;;;;;;;AC5DY,+BAAuB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC;AAM5D,+BAAuB,GAAG,MAAM,CAAC,yBAAyB,CAAC,CAAC;AAKzE,IAAiB,iBAAiB,CAEjC;AAFD,WAAiB,iBAAiB;IACjB,8BAAY,GAAG,sBAAsB,CAAC;AACvD,CAAC,EAFgB,iBAAiB,GAAjB,yBAAiB,KAAjB,yBAAiB,QAEjC;;;;;;;;;;;;;;;;ACrBY,sBAAc,GAA4C,mBAAO,CAAC,wFAAwB,CAAC,CAAC,eAAe,CAAC;AAEzH,SAAgB,QAAQ,CAAC,GAA8B;IACnD,OAAO,CAAC,CAAC,GAAG,CAAC;AACjB,CAAC;AAFD,4BAEC;AAED,SAAgB,gBAAgB,CAAC,IAAY;IACzC,OAAO,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,WAAW,EAAE,GAAG,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;AACxD,CAAC;AAFD,4CAEC;;;;;;;;;;;;;ACRY;;AAEb;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA,iEAAiE;AACjE;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;;AAEA;;AAEA;AACA,cAAc,qBAAqB;AACnC;AACA;AACA;;AAEA;;AAEA,iBAAiB,4BAA4B;AAC7C;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG;AACH,CAAC;;AAED","file":"37.bundle.js","sourcesContent":["import * as React from 'react';\r\nimport { DisposableCollection } from '@theia/core';\r\nimport { BoardsService, Board, Port, AttachedBoardsChangeEvent } from '../../common/protocol/boards-service';\r\nimport { BoardsServiceClientImpl } from './boards-service-client-impl';\r\nimport { CoreServiceClientImpl } from '../core-service-client-impl';\r\nimport { ArduinoDaemonClientImpl } from '../arduino-daemon-client-impl';\r\n\r\nexport namespace BoardsConfig {\r\n\r\n    export interface Config {\r\n        selectedBoard?: Board;\r\n        selectedPort?: Port;\r\n    }\r\n\r\n    export interface Props {\r\n        readonly boardsService: BoardsService;\r\n        readonly boardsServiceClient: BoardsServiceClientImpl;\r\n        readonly coreServiceClient: CoreServiceClientImpl;\r\n        readonly daemonClient: ArduinoDaemonClientImpl;\r\n        readonly onConfigChange: (config: Config) => void;\r\n        readonly onFocusNodeSet: (element: HTMLElement | undefined) => void;\r\n    }\r\n\r\n    export interface State extends Config {\r\n        searchResults: Array<Board & { packageName: string }>;\r\n        knownPorts: Port[];\r\n        showAllPorts: boolean;\r\n        query: string;\r\n    }\r\n\r\n}\r\n\r\nexport abstract class Item<T> extends React.Component<{\r\n    item: T,\r\n    label: string,\r\n    selected: boolean,\r\n    onClick: (item: T) => void,\r\n    missing?: boolean,\r\n    details?: string\r\n}> {\r\n\r\n    render(): React.ReactNode {\r\n        const { selected, label, missing, details } = this.props;\r\n        const classNames = ['item'];\r\n        if (selected) {\r\n            classNames.push('selected');\r\n        }\r\n        if (missing === true) {\r\n            classNames.push('missing')\r\n        }\r\n        return <div onClick={this.onClick} className={classNames.join(' ')} title={`${label}${!details ? '' : details}`}>\r\n            <div className='label'>\r\n                {label}\r\n            </div>\r\n            {!details ? '' : <div className='details'>{details}</div>}\r\n            {!selected ? '' : <div className='selected-icon'><i className='fa fa-check' /></div>}\r\n        </div>;\r\n    }\r\n\r\n    protected onClick = () => {\r\n        this.props.onClick(this.props.item);\r\n    }\r\n\r\n}\r\n\r\nexport class BoardsConfig extends React.Component<BoardsConfig.Props, BoardsConfig.State> {\r\n\r\n    protected toDispose = new DisposableCollection();\r\n\r\n    constructor(props: BoardsConfig.Props) {\r\n        super(props);\r\n\r\n        const { boardsConfig } = props.boardsServiceClient;\r\n        this.state = {\r\n            searchResults: [],\r\n            knownPorts: [],\r\n            showAllPorts: false,\r\n            query: '',\r\n            ...boardsConfig\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.updateBoards();\r\n        this.props.boardsService.getAvailablePorts().then(ports => this.updatePorts(ports));\r\n        const { boardsServiceClient, coreServiceClient, daemonClient } = this.props;\r\n        this.toDispose.pushAll([\r\n            boardsServiceClient.onAttachedBoardsChanged(event => this.updatePorts(event.newState.ports, AttachedBoardsChangeEvent.diff(event).detached.ports)),\r\n            boardsServiceClient.onBoardsConfigChanged(({ selectedBoard, selectedPort }) => {\r\n                this.setState({ selectedBoard, selectedPort }, () => this.fireConfigChanged());\r\n            }),\r\n            boardsServiceClient.onBoardsPackageInstalled(() => this.updateBoards(this.state.query)),\r\n            boardsServiceClient.onBoardsPackageUninstalled(() => this.updateBoards(this.state.query)),\r\n            coreServiceClient.onIndexUpdated(() => this.updateBoards(this.state.query)),\r\n            daemonClient.onDaemonStarted(() => this.updateBoards(this.state.query)),\r\n            daemonClient.onDaemonStopped(() => this.setState({ searchResults: [] }))\r\n        ]);\r\n    }\r\n\r\n    componentWillUnmount(): void {\r\n        this.toDispose.dispose();\r\n    }\r\n\r\n    protected fireConfigChanged() {\r\n        const { selectedBoard, selectedPort } = this.state;\r\n        this.props.onConfigChange({ selectedBoard, selectedPort });\r\n    }\r\n\r\n    protected updateBoards = (eventOrQuery: React.ChangeEvent<HTMLInputElement> | string = '') => {\r\n        const query = (typeof eventOrQuery === 'string'\r\n            ? eventOrQuery\r\n            : eventOrQuery.target.value.toLowerCase()\r\n        ).trim();\r\n        this.setState({ query });\r\n        this.queryBoards({ query }).then(searchResults => this.setState({ searchResults }));\r\n    }\r\n\r\n    protected updatePorts = (ports: Port[] = [], removedPorts: Port[] = []) => {\r\n        this.queryPorts(Promise.resolve(ports)).then(({ knownPorts }) => {\r\n            let { selectedPort } = this.state;\r\n            // If the currently selected port is not available anymore, unset the selected port.\r\n            if (removedPorts.some(port => Port.equals(port, selectedPort))) {\r\n                selectedPort = undefined;\r\n            }\r\n            this.setState({ knownPorts, selectedPort }, () => this.fireConfigChanged());\r\n        });\r\n    }\r\n\r\n    protected queryBoards = (options: { query?: string } = {}): Promise<Array<Board & { packageName: string }>> => {\r\n        return this.props.boardsServiceClient.searchBoards(options);\r\n    }\r\n\r\n    protected get availablePorts(): Promise<Port[]> {\r\n        return this.props.boardsService.getAvailablePorts();\r\n    }\r\n\r\n    protected queryPorts = async (availablePorts: Promise<Port[]> = this.availablePorts) => {\r\n        const ports = await availablePorts;\r\n        return { knownPorts: ports.sort(Port.compare) };\r\n    }\r\n\r\n    protected toggleFilterPorts = () => {\r\n        this.setState({ showAllPorts: !this.state.showAllPorts });\r\n    }\r\n\r\n    protected selectPort = (selectedPort: Port | undefined) => {\r\n        this.setState({ selectedPort }, () => this.fireConfigChanged());\r\n    }\r\n\r\n    protected selectBoard = (selectedBoard: Board & { packageName: string } | undefined) => {\r\n        this.setState({ selectedBoard }, () => this.fireConfigChanged());\r\n    }\r\n\r\n    protected focusNodeSet = (element: HTMLElement | null) => {\r\n        this.props.onFocusNodeSet(element || undefined);\r\n    }\r\n\r\n    render(): React.ReactNode {\r\n        return <div className='body'>\r\n            {this.renderContainer('boards', this.renderBoards.bind(this))}\r\n            {this.renderContainer('ports', this.renderPorts.bind(this), this.renderPortsFooter.bind(this))}\r\n        </div>;\r\n    }\r\n\r\n    protected renderContainer(title: string, contentRenderer: () => React.ReactNode, footerRenderer?: () => React.ReactNode): React.ReactNode {\r\n        return <div className='container'>\r\n            <div className='content'>\r\n                <div className='title'>\r\n                    {title}\r\n                </div>\r\n                {contentRenderer()}\r\n                <div className='footer'>\r\n                    {(footerRenderer ? footerRenderer() : '')}\r\n                </div>\r\n            </div>\r\n        </div>;\r\n    }\r\n\r\n    protected renderBoards(): React.ReactNode {\r\n        const { selectedBoard, searchResults } = this.state;\r\n        // Board names are not unique per core https://github.com/arduino/arduino-pro-ide/issues/262#issuecomment-661019560\r\n        // It is tricky when the core is not yet installed, no FQBNs are available.\r\n        const distinctBoards = new Map<string, Board.Detailed>();\r\n        const toKey = ({ name, packageName, fqbn }: Board.Detailed) => !!fqbn ? `${name}-${packageName}-${fqbn}` : `${name}-${packageName}`;\r\n        for (const board of Board.decorateBoards(selectedBoard, searchResults)) {\r\n            const key = toKey(board);\r\n            if (!distinctBoards.has(key)) {\r\n                distinctBoards.set(key, board);\r\n            }\r\n        }\r\n\r\n        return <React.Fragment>\r\n            <div className='search'>\r\n                <input type='search' className='theia-input' placeholder='SEARCH BOARD' onChange={this.updateBoards} ref={this.focusNodeSet} />\r\n                <i className='fa fa-search'></i>\r\n            </div>\r\n            <div className='boards list'>\r\n                {Array.from(distinctBoards.values()).map(board => <Item<Board & { packageName: string }>\r\n                    key={`${board.name}-${board.packageName}`}\r\n                    item={board}\r\n                    label={board.name}\r\n                    details={board.details}\r\n                    selected={board.selected}\r\n                    onClick={this.selectBoard}\r\n                    missing={board.missing}\r\n                />)}\r\n            </div>\r\n        </React.Fragment>;\r\n    }\r\n\r\n    protected renderPorts(): React.ReactNode {\r\n        const filter = this.state.showAllPorts ? () => true : Port.isBoardPort;\r\n        const ports = this.state.knownPorts.filter(filter);\r\n        return !ports.length ?\r\n            (\r\n                <div className='loading noselect'>\r\n                    No ports discovered\r\n                </div>\r\n            ) :\r\n            (\r\n                <div className='ports list'>\r\n                    {ports.map(port => <Item<Port>\r\n                        key={Port.toString(port)}\r\n                        item={port}\r\n                        label={Port.toString(port)}\r\n                        selected={Port.equals(this.state.selectedPort, port)}\r\n                        onClick={this.selectPort}\r\n                    />)}\r\n                </div>\r\n            );\r\n    }\r\n\r\n    protected renderPortsFooter(): React.ReactNode {\r\n        return <div className='noselect'>\r\n            <label\r\n                title='Shows all available ports when enabled'>\r\n                <input\r\n                    type='checkbox'\r\n                    defaultChecked={this.state.showAllPorts}\r\n                    onChange={this.toggleFilterPorts}\r\n                />\r\n                <span>Show all ports</span>\r\n            </label>\r\n        </div>;\r\n    }\r\n\r\n}\r\n\r\nexport namespace BoardsConfig {\r\n\r\n    export namespace Config {\r\n\r\n        export function sameAs(config: Config, other: Config | Board): boolean {\r\n            const { selectedBoard, selectedPort } = config;\r\n            if (Board.is(other)) {\r\n                return !!selectedBoard\r\n                    && Board.equals(other, selectedBoard)\r\n                    && Port.sameAs(selectedPort, other.port);\r\n            }\r\n            return sameAs(config, other);\r\n        }\r\n\r\n        export function equals(left: Config, right: Config): boolean {\r\n            return left.selectedBoard === right.selectedBoard\r\n                && left.selectedPort === right.selectedPort;\r\n        }\r\n\r\n        export function toString(config: Config, options: { default: string } = { default: '' }): string {\r\n            const { selectedBoard, selectedPort: port } = config;\r\n            if (!selectedBoard) {\r\n                return options.default;\r\n            }\r\n            const { name } = selectedBoard;\r\n            return `${name}${port ? ' at ' + Port.toString(port) : ''}`;\r\n        }\r\n\r\n    }\r\n\r\n}\r\n","import { injectable, inject, optional } from 'inversify';\r\nimport { Emitter } from '@theia/core/lib/common/event';\r\nimport { ILogger } from '@theia/core/lib/common/logger';\r\nimport { MessageService } from '@theia/core/lib/common/message-service';\r\nimport { StorageService } from '@theia/core/lib/browser/storage-service';\r\nimport { FrontendApplicationContribution } from '@theia/core/lib/browser/frontend-application';\r\nimport { RecursiveRequired } from '../../common/types';\r\nimport { BoardsServiceClient, AttachedBoardsChangeEvent, BoardInstalledEvent, Board, Port, BoardUninstalledEvent, BoardsService } from '../../common/protocol';\r\nimport { BoardsConfig } from './boards-config';\r\nimport { naturalCompare } from '../../common/utils';\r\nimport { compareAnything } from '../theia/monaco/comparers';\r\n\r\ninterface BoardMatch {\r\n    readonly board: Board & Readonly<{ packageName: string }>;\r\n    readonly matches: monaco.filters.IMatch[] | undefined;\r\n}\r\n\r\n@injectable()\r\nexport class BoardsServiceClientImpl implements BoardsServiceClient, FrontendApplicationContribution {\r\n\r\n    @inject(ILogger)\r\n    protected logger: ILogger;\r\n\r\n    @optional()\r\n    @inject(MessageService)\r\n    protected messageService: MessageService;\r\n\r\n    @inject(StorageService)\r\n    protected storageService: StorageService;\r\n\r\n    protected readonly onBoardsPackageInstalledEmitter = new Emitter<BoardInstalledEvent>();\r\n    protected readonly onBoardsPackageUninstalledEmitter = new Emitter<BoardUninstalledEvent>();\r\n    protected readonly onAttachedBoardsChangedEmitter = new Emitter<AttachedBoardsChangeEvent>();\r\n    protected readonly onBoardsConfigChangedEmitter = new Emitter<BoardsConfig.Config>();\r\n    protected readonly onAvailableBoardsChangedEmitter = new Emitter<AvailableBoard[]>();\r\n\r\n    /**\r\n     * Used for the auto-reconnecting. Sometimes, the attached board gets disconnected after uploading something to it.\r\n     * It happens with certain boards on Windows. For example, the `MKR1000` boards is selected on post `COM5` on Windows,\r\n     * perform an upload, the board automatically disconnects and reconnects, but on another port, `COM10`.\r\n     * We have to listen on such changes and auto-reconnect the same board on another port.\r\n     * See: https://arduino.slack.com/archives/CJJHJCJSJ/p1568645417013000?thread_ts=1568640504.009400&cid=CJJHJCJSJ\r\n     */\r\n    protected latestValidBoardsConfig: RecursiveRequired<BoardsConfig.Config> | undefined = undefined;\r\n    protected _boardsConfig: BoardsConfig.Config = {};\r\n    protected _attachedBoards: Board[] = []; // This does not contain the `Unknown` boards. They're visible from the available ports only.\r\n    protected _availablePorts: Port[] = [];\r\n    protected _availableBoards: AvailableBoard[] = [];\r\n    protected boardsService: BoardsService;\r\n\r\n    /**\r\n     * Event when the state of the attached/detached boards has changed. For instance, the user have detached a physical board.\r\n     */\r\n    readonly onAttachedBoardsChanged = this.onAttachedBoardsChangedEmitter.event;\r\n    readonly onBoardsPackageInstalled = this.onBoardsPackageInstalledEmitter.event;\r\n    readonly onBoardsPackageUninstalled = this.onBoardsPackageUninstalledEmitter.event;\r\n    /**\r\n     * Unlike `onAttachedBoardsChanged` this even fires when the user modifies the selected board in the IDE.\\\r\n     * This even also fires, when the boards package was not available for the currently selected board,\r\n     * and the user installs the board package. Note: installing a board package will set the `fqbn` of the\r\n     * currently selected board.\\\r\n     * This even also emitted when the board package for the currently selected board was uninstalled.\r\n     */\r\n    readonly onBoardsConfigChanged = this.onBoardsConfigChangedEmitter.event;\r\n    readonly onAvailableBoardsChanged = this.onAvailableBoardsChangedEmitter.event;\r\n\r\n    async onStart(): Promise<void> {\r\n        return this.loadState();\r\n    }\r\n\r\n    /**\r\n     * When the FE connects to the BE, the BE stets the known boards and ports.\\\r\n     * This is a DI workaround for not being able to inject the service into the client.\r\n     */\r\n    async init(boardsService: BoardsService): Promise<void> {\r\n        this.boardsService = boardsService;\r\n        const [attachedBoards, availablePorts] = await Promise.all([\r\n            this.boardsService.getAttachedBoards(),\r\n            this.boardsService.getAvailablePorts()\r\n        ]);\r\n        this._attachedBoards = attachedBoards;\r\n        this._availablePorts = availablePorts;\r\n        this.reconcileAvailableBoards().then(() => this.tryReconnect());\r\n    }\r\n\r\n    notifyAttachedBoardsChanged(event: AttachedBoardsChangeEvent): void {\r\n        this.logger.info('Attached boards and available ports changed: ', JSON.stringify(event));\r\n        this._attachedBoards = event.newState.boards;\r\n        this.onAttachedBoardsChangedEmitter.fire(event);\r\n        this._availablePorts = event.newState.ports;\r\n        this.reconcileAvailableBoards().then(() => this.tryReconnect());\r\n    }\r\n\r\n    protected async tryReconnect(): Promise<boolean> {\r\n        if (this.latestValidBoardsConfig && !this.canUploadTo(this.boardsConfig)) {\r\n            for (const board of this.availableBoards.filter(({ state }) => state !== AvailableBoard.State.incomplete)) {\r\n                if (this.latestValidBoardsConfig.selectedBoard.fqbn === board.fqbn\r\n                    && this.latestValidBoardsConfig.selectedBoard.name === board.name\r\n                    && Port.sameAs(this.latestValidBoardsConfig.selectedPort, board.port)) {\r\n\r\n                    this.boardsConfig = this.latestValidBoardsConfig;\r\n                    return true;\r\n                }\r\n            }\r\n            // If we could not find an exact match, we compare the board FQBN-name pairs and ignore the port, as it might have changed.\r\n            // See documentation on `latestValidBoardsConfig`.\r\n            for (const board of this.availableBoards.filter(({ state }) => state !== AvailableBoard.State.incomplete)) {\r\n                if (this.latestValidBoardsConfig.selectedBoard.fqbn === board.fqbn\r\n                    && this.latestValidBoardsConfig.selectedBoard.name === board.name) {\r\n\r\n                    this.boardsConfig = {\r\n                        ...this.latestValidBoardsConfig,\r\n                        selectedPort: board.port\r\n                    };\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    notifyBoardInstalled(event: BoardInstalledEvent): void {\r\n        this.logger.info('Board installed: ', JSON.stringify(event));\r\n        this.onBoardsPackageInstalledEmitter.fire(event);\r\n        const { selectedBoard } = this.boardsConfig;\r\n        const { installedVersion, id } = event.pkg;\r\n        if (selectedBoard) {\r\n            const installedBoard = event.pkg.boards.find(({ name }) => name === selectedBoard.name);\r\n            if (installedBoard && (!selectedBoard.fqbn || selectedBoard.fqbn === installedBoard.fqbn)) {\r\n                this.logger.info(`Board package ${id}[${installedVersion}] was installed. Updating the FQBN of the currently selected ${selectedBoard.name} board. [FQBN: ${installedBoard.fqbn}]`);\r\n                this.boardsConfig = {\r\n                    ...this.boardsConfig,\r\n                    selectedBoard: installedBoard\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    notifyBoardUninstalled(event: BoardUninstalledEvent): void {\r\n        this.logger.info('Board uninstalled: ', JSON.stringify(event));\r\n        this.onBoardsPackageUninstalledEmitter.fire(event);\r\n        const { selectedBoard } = this.boardsConfig;\r\n        if (selectedBoard && selectedBoard.fqbn) {\r\n            const uninstalledBoard = event.pkg.boards.find(({ name }) => name === selectedBoard.name);\r\n            if (uninstalledBoard && uninstalledBoard.fqbn === selectedBoard.fqbn) {\r\n                this.logger.info(`Board package ${event.pkg.id} was uninstalled. Discarding the FQBN of the currently selected ${selectedBoard.name} board.`);\r\n                const selectedBoardWithoutFqbn = {\r\n                    name: selectedBoard.name\r\n                    // No FQBN\r\n                };\r\n                this.boardsConfig = {\r\n                    ...this.boardsConfig,\r\n                    selectedBoard: selectedBoardWithoutFqbn\r\n                };\r\n            }\r\n        }\r\n    }\r\n\r\n    set boardsConfig(config: BoardsConfig.Config) {\r\n        this.doSetBoardsConfig(config);\r\n        this.saveState().finally(() => this.reconcileAvailableBoards().finally(() => this.onBoardsConfigChangedEmitter.fire(this._boardsConfig)));\r\n    }\r\n\r\n    protected doSetBoardsConfig(config: BoardsConfig.Config): void {\r\n        this.logger.info('Board config changed: ', JSON.stringify(config));\r\n        this._boardsConfig = config;\r\n        if (this.canUploadTo(this._boardsConfig)) {\r\n            this.latestValidBoardsConfig = this._boardsConfig;\r\n        }\r\n    }\r\n\r\n    async searchBoards({ query, cores }: { query?: string, cores?: string[] }): Promise<Array<Board & { packageName: string }>> {\r\n        const boards = await this.boardsService.allBoards({});\r\n        const coresFilter = !!cores && cores.length\r\n            ? ((toFilter: { packageName: string }) => cores.some(core => core === toFilter.packageName))\r\n            : () => true;\r\n        if (!query) {\r\n            return boards.filter(coresFilter).sort(Board.compare);\r\n        }\r\n        const toMatch = ((toFilter: Board & { packageName: string }) => (({ board: toFilter, matches: monaco.filters.matchesFuzzy(query, toFilter.name, true) })));\r\n        const compareEntries = (left: BoardMatch, right: BoardMatch, lookFor: string) => {\r\n            const leftMatches = left.matches || [];\r\n            const rightMatches = right.matches || [];\r\n            if (leftMatches.length && !rightMatches.length) {\r\n                return -1;\r\n            }\r\n            if (!leftMatches.length && rightMatches.length) {\r\n                return 1;\r\n            }\r\n            if (leftMatches.length === 0 && rightMatches.length === 0) {\r\n                return 0;\r\n            }\r\n            const leftLabel = left.board.name.replace(/\\r?\\n/g, ' ');\r\n            const rightLabel = right.board.name.replace(/\\r?\\n/g, ' ');\r\n            return compareAnything(leftLabel, rightLabel, lookFor);\r\n        }\r\n        const normalizedQuery = query.toLowerCase();\r\n        return boards\r\n            .filter(coresFilter)\r\n            .map(toMatch)\r\n            .filter(({ matches }) => !!matches)\r\n            .sort((left, right) => compareEntries(left, right, normalizedQuery))\r\n            .map(({ board }) => board);\r\n    }\r\n\r\n    get boardsConfig(): BoardsConfig.Config {\r\n        return this._boardsConfig;\r\n    }\r\n\r\n    /**\r\n     * `true` if the `config.selectedBoard` is defined; hence can compile against the board. Otherwise, `false`.\r\n     */\r\n    canVerify(\r\n        config: BoardsConfig.Config | undefined = this.boardsConfig,\r\n        options: { silent: boolean } = { silent: true }): config is BoardsConfig.Config & { selectedBoard: Board } {\r\n\r\n        if (!config) {\r\n            return false;\r\n        }\r\n\r\n        if (!config.selectedBoard) {\r\n            if (!options.silent && this.messageService) {\r\n                this.messageService.warn('No boards selected.', { timeout: 3000 });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    /**\r\n     * `true` if `canVerify`, the board has an FQBN and the `config.selectedPort` is also set, hence can upload to board. Otherwise, `false`.\r\n     */\r\n    canUploadTo(\r\n        config: BoardsConfig.Config | undefined = this.boardsConfig,\r\n        options: { silent: boolean } = { silent: true }): config is RecursiveRequired<BoardsConfig.Config> {\r\n\r\n        if (!this.canVerify(config, options)) {\r\n            return false;\r\n        }\r\n\r\n        const { name } = config.selectedBoard;\r\n        if (!config.selectedPort) {\r\n            if (!options.silent && this.messageService) {\r\n                this.messageService.warn(`No ports selected for board: '${name}'.`, { timeout: 3000 });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        if (!config.selectedBoard.fqbn) {\r\n            if (!options.silent && this.messageService) {\r\n                this.messageService.warn(`The FQBN is not available for the selected board ${name}. Do you have the corresponding core installed?`, { timeout: 3000 });\r\n            }\r\n            return false;\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    get availableBoards(): AvailableBoard[] {\r\n        return this._availableBoards;\r\n    }\r\n\r\n    protected async reconcileAvailableBoards(): Promise<void> {\r\n        const attachedBoards = this._attachedBoards;\r\n        const availablePorts = this._availablePorts;\r\n        // Unset the port on the user's config, if it is not available anymore.\r\n        if (this.boardsConfig.selectedPort && !availablePorts.some(port => Port.sameAs(port, this.boardsConfig.selectedPort))) {\r\n            this.doSetBoardsConfig({ selectedBoard: this.boardsConfig.selectedBoard, selectedPort: undefined });\r\n            this.onBoardsConfigChangedEmitter.fire(this._boardsConfig);\r\n        }\r\n        const boardsConfig = this.boardsConfig;\r\n        const currentAvailableBoards = this._availableBoards;\r\n        const availableBoards: AvailableBoard[] = [];\r\n        const availableBoardPorts = availablePorts.filter(Port.isBoardPort);\r\n        const attachedSerialBoards = attachedBoards.filter(({ port }) => !!port);\r\n\r\n        for (const boardPort of availableBoardPorts) {\r\n            let state = AvailableBoard.State.incomplete; // Initial pessimism.\r\n            let board = attachedSerialBoards.find(({ port }) => Port.sameAs(boardPort, port));\r\n            if (board) {\r\n                state = AvailableBoard.State.recognized;\r\n            } else {\r\n                // If the selected board is not recognized because it is a 3rd party board: https://github.com/arduino/arduino-cli/issues/623\r\n                // We still want to show it without the red X in the boards toolbar: https://github.com/arduino/arduino-pro-ide/issues/198#issuecomment-599355836\r\n                const lastSelectedBoard = await this.getLastSelectedBoardOnPort(boardPort);\r\n                if (lastSelectedBoard) {\r\n                    board = {\r\n                        ...lastSelectedBoard,\r\n                        port: boardPort\r\n                    };\r\n                    state = AvailableBoard.State.guessed;\r\n                }\r\n            }\r\n            if (!board) {\r\n                availableBoards.push({ name: 'Unknown', port: boardPort, state });\r\n            } else {\r\n                const selected = BoardsConfig.Config.sameAs(boardsConfig, board);\r\n                availableBoards.push({ ...board, state, selected, port: boardPort });\r\n            }\r\n        }\r\n\r\n        if (boardsConfig.selectedBoard && !availableBoards.some(({ selected }) => selected)) {\r\n            availableBoards.push({\r\n                ...boardsConfig.selectedBoard,\r\n                port: boardsConfig.selectedPort,\r\n                selected: true,\r\n                state: AvailableBoard.State.incomplete\r\n            });\r\n        }\r\n\r\n        const sortedAvailableBoards = availableBoards.sort(AvailableBoard.compare);\r\n        let hasChanged = sortedAvailableBoards.length !== currentAvailableBoards.length;\r\n        for (let i = 0; !hasChanged && i < sortedAvailableBoards.length; i++) {\r\n            hasChanged = AvailableBoard.compare(sortedAvailableBoards[i], currentAvailableBoards[i]) !== 0;\r\n        }\r\n        if (hasChanged) {\r\n            this._availableBoards = sortedAvailableBoards;\r\n            this.onAvailableBoardsChangedEmitter.fire(this._availableBoards);\r\n        }\r\n    }\r\n\r\n    protected async getLastSelectedBoardOnPort(port: Port | string | undefined): Promise<Board | undefined> {\r\n        if (!port) {\r\n            return undefined;\r\n        }\r\n        const key = this.getLastSelectedBoardOnPortKey(port);\r\n        return this.storageService.getData<Board>(key);\r\n    }\r\n\r\n    protected async saveState(): Promise<void> {\r\n        // We save the port with the selected board name/FQBN, to be able to guess a better board name.\r\n        // Required when the attached board belongs to a 3rd party boards package, and neither the name, nor\r\n        // the FQBN can be retrieved with a `board list` command.\r\n        // https://github.com/arduino/arduino-cli/issues/623\r\n        const { selectedBoard, selectedPort } = this.boardsConfig;\r\n        if (selectedBoard && selectedPort) {\r\n            const key = this.getLastSelectedBoardOnPortKey(selectedPort);\r\n            await this.storageService.setData(key, selectedBoard);\r\n        }\r\n        await this.storageService.setData('latest-valid-boards-config', this.latestValidBoardsConfig);\r\n    }\r\n\r\n    protected getLastSelectedBoardOnPortKey(port: Port | string): string {\r\n        // TODO: we lose the port's `protocol` info (`serial`, `network`, etc.) here if the `port` is a `string`.\r\n        return `last-selected-board-on-port:${typeof port === 'string' ? port : Port.toString(port)}`;\r\n    }\r\n\r\n    protected async loadState(): Promise<void> {\r\n        const storedValidBoardsConfig = await this.storageService.getData<RecursiveRequired<BoardsConfig.Config>>('latest-valid-boards-config');\r\n        if (storedValidBoardsConfig) {\r\n            this.latestValidBoardsConfig = storedValidBoardsConfig;\r\n            if (this.canUploadTo(this.latestValidBoardsConfig)) {\r\n                this.boardsConfig = this.latestValidBoardsConfig;\r\n            }\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/**\r\n * Representation of a ready-to-use board, either the user has configured it or was automatically recognized by the CLI.\r\n * An available board was not necessarily recognized by the CLI (e.g.: it is a 3rd party board) or correctly configured but ready for `verify`.\r\n * If it has the selected board and a associated port, it can be used for `upload`. We render an available board for the user\r\n * when it has the `port` set.\r\n */\r\nexport interface AvailableBoard extends Board {\r\n    readonly state: AvailableBoard.State;\r\n    readonly selected?: boolean;\r\n    readonly port?: Port;\r\n}\r\n\r\nexport namespace AvailableBoard {\r\n\r\n    export enum State {\r\n        /**\r\n         * Retrieved from the CLI via the `board list` command.\r\n         */\r\n        'recognized',\r\n        /**\r\n         * Guessed the name/FQBN of the board from the available board ports (3rd party).\r\n         */\r\n        'guessed',\r\n        /**\r\n         * We do not know anything about this board, probably a 3rd party. The user has not selected a board for this port yet.\r\n         */\r\n        'incomplete'\r\n    }\r\n\r\n    export function is(board: any): board is AvailableBoard {\r\n        return Board.is(board) && 'state' in board;\r\n    }\r\n\r\n    export function hasPort(board: AvailableBoard): board is AvailableBoard & { port: Port } {\r\n        return !!board.port;\r\n    }\r\n\r\n    export const compare = (left: AvailableBoard, right: AvailableBoard) => {\r\n        if (left.selected && !right.selected) {\r\n            return -1;\r\n        }\r\n        if (right.selected && !left.selected) {\r\n            return 1;\r\n        }\r\n        let result = naturalCompare(left.name, right.name);\r\n        if (result !== 0) {\r\n            return result;\r\n        }\r\n        if (left.fqbn && right.fqbn) {\r\n            result = naturalCompare(left.fqbn, right.fqbn);\r\n            if (result !== 0) {\r\n                return result;\r\n            }\r\n        }\r\n        if (left.port && right.port) {\r\n            result = Port.compare(left.port, right.port);\r\n            if (result !== 0) {\r\n                return result;\r\n            }\r\n        }\r\n        if (!!left.selected && !right.selected) {\r\n            return -1;\r\n        }\r\n        if (!!right.selected && !left.selected) {\r\n            return 1;\r\n        }\r\n        return left.state - right.state;\r\n    }\r\n\r\n}\r\n","import { injectable, inject } from 'inversify';\r\nimport { Emitter, Event } from '@theia/core/lib/common/event';\r\nimport { ILogger } from '@theia/core/lib/common/logger';\r\nimport { MessageService } from '@theia/core/lib/common/message-service';\r\nimport { LocalStorageService } from '@theia/core/lib/browser/storage-service';\r\nimport { CoreServiceClient } from '../common/protocol';\r\n\r\n@injectable()\r\nexport class CoreServiceClientImpl implements CoreServiceClient {\r\n\r\n    @inject(ILogger)\r\n    protected logger: ILogger;\r\n\r\n    @inject(MessageService)\r\n    protected messageService: MessageService;\r\n\r\n    @inject(LocalStorageService)\r\n    protected storageService: LocalStorageService;\r\n\r\n    protected readonly onIndexUpdatedEmitter = new Emitter<void>();\r\n\r\n    notifyIndexUpdated(): void {\r\n        this.info('Index has been updated.');\r\n        this.onIndexUpdatedEmitter.fire();\r\n    }\r\n\r\n    get onIndexUpdated(): Event<void> {\r\n        return this.onIndexUpdatedEmitter.event;\r\n    }\r\n\r\n    protected info(message: string): void {\r\n        this.messageService.info(message, { timeout: 3000 });\r\n        this.logger.info(message);\r\n    }\r\n\r\n}\r\n","/*---------------------------------------------------------------------------------------------\r\n *  Copyright (c) Microsoft Corporation. All rights reserved.\r\n *  Licensed under the MIT License. See License.txt in the project root for license information.\r\n *--------------------------------------------------------------------------------------------*/\r\n// Copied from https://github.com/microsoft/vscode/blob/724c307bf35646ac549a8533a255c51b63fea5c7/src/vs/base/common/comparers.ts\r\n// We cannot customize the monaco loader for Theia: https://github.com/eclipse-theia/theia/issues/8220\r\n\r\nimport { isWindows } from '@theia/core/lib/common/os';\r\n\r\nconst sep = (isWindows ? '\\\\' : '/');\r\ninterface IDisposable {\r\n    dispose(): void;\r\n}\r\ninterface IdleDeadline {\r\n    readonly didTimeout: boolean;\r\n    timeRemaining(): number;\r\n}\r\nlet runWhenIdle: (callback: (idle: IdleDeadline) => void, timeout?: number) => IDisposable;\r\ndeclare function requestIdleCallback(callback: (args: IdleDeadline) => void, options?: { timeout: number }): number;\r\ndeclare function cancelIdleCallback(handle: number): void;\r\n\r\n(function () {\r\n    if (typeof requestIdleCallback !== 'function' || typeof cancelIdleCallback !== 'function') {\r\n        const dummyIdle: IdleDeadline = Object.freeze({\r\n            didTimeout: true,\r\n            timeRemaining() { return 15; }\r\n        });\r\n        runWhenIdle = (runner) => {\r\n            const handle = setTimeout(() => runner(dummyIdle));\r\n            let disposed = false;\r\n            return {\r\n                dispose() {\r\n                    if (disposed) {\r\n                        return;\r\n                    }\r\n                    disposed = true;\r\n                    clearTimeout(handle);\r\n                }\r\n            };\r\n        };\r\n    } else {\r\n        runWhenIdle = (runner, timeout?) => {\r\n            const handle: number = requestIdleCallback(runner, typeof timeout === 'number' ? { timeout } : undefined);\r\n            let disposed = false;\r\n            return {\r\n                dispose() {\r\n                    if (disposed) {\r\n                        return;\r\n                    }\r\n                    disposed = true;\r\n                    cancelIdleCallback(handle);\r\n                }\r\n            };\r\n        };\r\n    }\r\n})();\r\n\r\n/**\r\n * An implementation of the \"idle-until-urgent\"-strategy as introduced\r\n * here: https://philipwalton.com/articles/idle-until-urgent/\r\n */\r\nclass IdleValue<T> {\r\n\r\n    private readonly _executor: () => void;\r\n    private readonly _handle: IDisposable;\r\n\r\n    private _didRun: boolean = false;\r\n    private _value?: T;\r\n    private _error: any;\r\n\r\n    constructor(executor: () => T) {\r\n        this._executor = () => {\r\n            try {\r\n                this._value = executor();\r\n            } catch (err) {\r\n                this._error = err;\r\n            } finally {\r\n                this._didRun = true;\r\n            }\r\n        };\r\n        this._handle = runWhenIdle(() => this._executor());\r\n    }\r\n\r\n    dispose(): void {\r\n        this._handle.dispose();\r\n    }\r\n\r\n    get value(): T {\r\n        if (!this._didRun) {\r\n            this._handle.dispose();\r\n            this._executor();\r\n        }\r\n        if (this._error) {\r\n            throw this._error;\r\n        }\r\n        return this._value!;\r\n    }\r\n}\r\n\r\n// When comparing large numbers of strings, such as in sorting large arrays, is better for\r\n// performance to create an Intl.Collator object and use the function provided by its compare\r\n// property than it is to use String.prototype.localeCompare()\r\n\r\n// A collator with numeric sorting enabled, and no sensitivity to case or to accents\r\nconst intlFileNameCollatorBaseNumeric: IdleValue<{ collator: Intl.Collator, collatorIsNumeric: boolean }> = new IdleValue(() => {\r\n    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'base' });\r\n    return {\r\n        collator: collator,\r\n        collatorIsNumeric: collator.resolvedOptions().numeric\r\n    };\r\n});\r\n\r\n// A collator with numeric sorting enabled.\r\nconst intlFileNameCollatorNumeric: IdleValue<{ collator: Intl.Collator }> = new IdleValue(() => {\r\n    const collator = new Intl.Collator(undefined, { numeric: true });\r\n    return {\r\n        collator: collator\r\n    };\r\n});\r\n\r\n// A collator with numeric sorting enabled, and sensitivity to accents and diacritics but not case.\r\nconst intlFileNameCollatorNumericCaseInsenstive: IdleValue<{ collator: Intl.Collator }> = new IdleValue(() => {\r\n    const collator = new Intl.Collator(undefined, { numeric: true, sensitivity: 'accent' });\r\n    return {\r\n        collator: collator\r\n    };\r\n});\r\n\r\nexport function compareFileNames(one: string | null, other: string | null, caseSensitive = false): number {\r\n    const a = one || '';\r\n    const b = other || '';\r\n    const result = intlFileNameCollatorBaseNumeric.value.collator.compare(a, b);\r\n\r\n    // Using the numeric option in the collator will\r\n    // make compare(`foo1`, `foo01`) === 0. We must disambiguate.\r\n    if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && a !== b) {\r\n        return a < b ? -1 : 1;\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Compares filenames by name then extension, sorting numbers numerically instead of alphabetically. */\r\nexport function compareFileNamesNumeric(one: string | null, other: string | null): number {\r\n    const [oneName, oneExtension] = extractNameAndExtension(one, true);\r\n    const [otherName, otherExtension] = extractNameAndExtension(other, true);\r\n    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;\r\n    const collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsenstive.value.collator;\r\n    let result;\r\n\r\n    // Check for name differences, comparing numbers numerically instead of alphabetically.\r\n    result = compareAndDisambiguateByLength(collatorNumeric, oneName, otherName);\r\n    if (result !== 0) {\r\n        return result;\r\n    }\r\n\r\n    // Check for case insensitive extension differences, comparing numbers numerically instead of alphabetically.\r\n    result = compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension);\r\n    if (result !== 0) {\r\n        return result;\r\n    }\r\n\r\n    // Disambiguate the extension case if needed.\r\n    if (oneExtension !== otherExtension) {\r\n        return collatorNumeric.compare(oneExtension, otherExtension);\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nconst FileNameMatch = /^(.*?)(\\.([^.]*))?$/;\r\n\r\nexport function noIntlCompareFileNames(one: string | null, other: string | null, caseSensitive = false): number {\r\n    if (!caseSensitive) {\r\n        one = one && one.toLowerCase();\r\n        other = other && other.toLowerCase();\r\n    }\r\n\r\n    const [oneName, oneExtension] = extractNameAndExtension(one);\r\n    const [otherName, otherExtension] = extractNameAndExtension(other);\r\n\r\n    if (oneName !== otherName) {\r\n        return oneName < otherName ? -1 : 1;\r\n    }\r\n\r\n    if (oneExtension === otherExtension) {\r\n        return 0;\r\n    }\r\n\r\n    return oneExtension < otherExtension ? -1 : 1;\r\n}\r\n\r\nexport function compareFileExtensions(one: string | null, other: string | null): number {\r\n    const [oneName, oneExtension] = extractNameAndExtension(one);\r\n    const [otherName, otherExtension] = extractNameAndExtension(other);\r\n\r\n    let result = intlFileNameCollatorBaseNumeric.value.collator.compare(oneExtension, otherExtension);\r\n\r\n    if (result === 0) {\r\n        // Using the numeric option in the collator will\r\n        // make compare(`foo1`, `foo01`) === 0. We must disambiguate.\r\n        if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && oneExtension !== otherExtension) {\r\n            return oneExtension < otherExtension ? -1 : 1;\r\n        }\r\n\r\n        // Extensions are equal, compare filenames\r\n        result = intlFileNameCollatorBaseNumeric.value.collator.compare(oneName, otherName);\r\n\r\n        if (intlFileNameCollatorBaseNumeric.value.collatorIsNumeric && result === 0 && oneName !== otherName) {\r\n            return oneName < otherName ? -1 : 1;\r\n        }\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\n/** Compares filenames by extenson, then by name. Sorts numbers numerically, not alphabetically. */\r\nexport function compareFileExtensionsNumeric(one: string | null, other: string | null): number {\r\n    const [oneName, oneExtension] = extractNameAndExtension(one, true);\r\n    const [otherName, otherExtension] = extractNameAndExtension(other, true);\r\n    const collatorNumeric = intlFileNameCollatorNumeric.value.collator;\r\n    const collatorNumericCaseInsensitive = intlFileNameCollatorNumericCaseInsenstive.value.collator;\r\n    let result;\r\n\r\n    // Check for extension differences, ignoring differences in case and comparing numbers numerically.\r\n    result = compareAndDisambiguateByLength(collatorNumericCaseInsensitive, oneExtension, otherExtension);\r\n    if (result !== 0) {\r\n        return result;\r\n    }\r\n\r\n    // Compare names.\r\n    result = compareAndDisambiguateByLength(collatorNumeric, oneName, otherName);\r\n    if (result !== 0) {\r\n        return result;\r\n    }\r\n\r\n    // Disambiguate extension case if needed.\r\n    if (oneExtension !== otherExtension) {\r\n        return collatorNumeric.compare(oneExtension, otherExtension);\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\n/** Extracts the name and extension from a full filename, with optional special handling for dotfiles */\r\nfunction extractNameAndExtension(str?: string | null, dotfilesAsNames = false): [string, string] {\r\n    const match = str ? FileNameMatch.exec(str) as Array<string> : ([] as Array<string>);\r\n\r\n    let result: [string, string] = [(match && match[1]) || '', (match && match[3]) || ''];\r\n\r\n    // if the dotfilesAsNames option is selected, treat an empty filename with an extension,\r\n    // or a filename that starts with a dot, as a dotfile name\r\n    if (dotfilesAsNames && (!result[0] && result[1] || result[0] && result[0].charAt(0) === '.')) {\r\n        result = [result[0] + '.' + result[1], ''];\r\n    }\r\n\r\n    return result;\r\n}\r\n\r\nfunction compareAndDisambiguateByLength(collator: Intl.Collator, one: string, other: string) {\r\n    // Check for differences\r\n    let result = collator.compare(one, other);\r\n    if (result !== 0) {\r\n        return result;\r\n    }\r\n\r\n    // In a numeric comparison, `foo1` and `foo01` will compare as equivalent.\r\n    // Disambiguate by sorting the shorter string first.\r\n    if (one.length !== other.length) {\r\n        return one.length < other.length ? -1 : 1;\r\n    }\r\n\r\n    return 0;\r\n}\r\n\r\nfunction comparePathComponents(one: string, other: string, caseSensitive = false): number {\r\n    if (!caseSensitive) {\r\n        one = one && one.toLowerCase();\r\n        other = other && other.toLowerCase();\r\n    }\r\n\r\n    if (one === other) {\r\n        return 0;\r\n    }\r\n\r\n    return one < other ? -1 : 1;\r\n}\r\n\r\nexport function comparePaths(one: string, other: string, caseSensitive = false): number {\r\n    const oneParts = one.split(sep);\r\n    const otherParts = other.split(sep);\r\n\r\n    const lastOne = oneParts.length - 1;\r\n    const lastOther = otherParts.length - 1;\r\n    let endOne: boolean, endOther: boolean;\r\n\r\n    for (let i = 0; ; i++) {\r\n        endOne = lastOne === i;\r\n        endOther = lastOther === i;\r\n\r\n        if (endOne && endOther) {\r\n            return compareFileNames(oneParts[i], otherParts[i], caseSensitive);\r\n        } else if (endOne) {\r\n            return -1;\r\n        } else if (endOther) {\r\n            return 1;\r\n        }\r\n\r\n        const result = comparePathComponents(oneParts[i], otherParts[i], caseSensitive);\r\n\r\n        if (result !== 0) {\r\n            return result;\r\n        }\r\n    }\r\n}\r\n\r\nexport function compareAnything(one: string, other: string, lookFor: string): number {\r\n    const elementAName = one.toLowerCase();\r\n    const elementBName = other.toLowerCase();\r\n\r\n    // Sort prefix matches over non prefix matches\r\n    const prefixCompare = compareByPrefix(one, other, lookFor);\r\n    if (prefixCompare) {\r\n        return prefixCompare;\r\n    }\r\n\r\n    // Sort suffix matches over non suffix matches\r\n    const elementASuffixMatch = elementAName.endsWith(lookFor);\r\n    const elementBSuffixMatch = elementBName.endsWith(lookFor);\r\n    if (elementASuffixMatch !== elementBSuffixMatch) {\r\n        return elementASuffixMatch ? -1 : 1;\r\n    }\r\n\r\n    // Understand file names\r\n    const r = compareFileNames(elementAName, elementBName);\r\n    if (r !== 0) {\r\n        return r;\r\n    }\r\n\r\n    // Compare by name\r\n    return elementAName.localeCompare(elementBName);\r\n}\r\n\r\nexport function compareByPrefix(one: string, other: string, lookFor: string): number {\r\n    const elementAName = one.toLowerCase();\r\n    const elementBName = other.toLowerCase();\r\n\r\n    // Sort prefix matches over non prefix matches\r\n    const elementAPrefixMatch = elementAName.startsWith(lookFor);\r\n    const elementBPrefixMatch = elementBName.startsWith(lookFor);\r\n    if (elementAPrefixMatch !== elementBPrefixMatch) {\r\n        return elementAPrefixMatch ? -1 : 1;\r\n    }\r\n\r\n    // Same prefix: Sort shorter matches to the top to have those on top that match more precisely\r\n    // tslint:disable-next-line: one-line\r\n    else if (elementAPrefixMatch && elementBPrefixMatch) {\r\n        if (elementAName.length < elementBName.length) {\r\n            return -1;\r\n        }\r\n\r\n        if (elementAName.length > elementBName.length) {\r\n            return 1;\r\n        }\r\n    }\r\n\r\n    return 0;\r\n}\r\n","import { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\r\n\r\nexport const ArduinoDaemonClient = Symbol('ArduinoDaemonClient');\r\nexport interface ArduinoDaemonClient {\r\n    notifyStarted(): void;\r\n    notifyStopped(): void;\r\n}\r\n\r\nexport const ArduinoDaemonPath = '/services/arduino-daemon';\r\nexport const ArduinoDaemon = Symbol('ArduinoDaemon');\r\nexport interface ArduinoDaemon extends JsonRpcServer<ArduinoDaemonClient> {\r\n    isRunning(): Promise<boolean>;\r\n}\r\n","import { isWindows, isOSX } from '@theia/core/lib/common/os';\r\nimport { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\r\nimport { naturalCompare } from './../utils';\r\nimport { Searchable } from './searchable';\r\nimport { Installable } from './installable';\r\nimport { ArduinoComponent } from './arduino-component';\r\n\r\nexport interface AttachedBoardsChangeEvent {\r\n    readonly oldState: Readonly<{ boards: Board[], ports: Port[] }>;\r\n    readonly newState: Readonly<{ boards: Board[], ports: Port[] }>;\r\n}\r\nexport namespace AttachedBoardsChangeEvent {\r\n\r\n    export function diff(event: AttachedBoardsChangeEvent): Readonly<{\r\n        attached: {\r\n            boards: Board[],\r\n            ports: Port[]\r\n        },\r\n        detached: {\r\n            boards: Board[],\r\n            ports: Port[]\r\n        }\r\n    }> {\r\n        // In `lefts` AND not in `rights`.\r\n        const diff = <T>(lefts: T[], rights: T[], sameAs: (left: T, right: T) => boolean) => {\r\n            return lefts.filter(left => rights.findIndex(right => sameAs(left, right)) === -1);\r\n        }\r\n        const { boards: newBoards } = event.newState;\r\n        const { boards: oldBoards } = event.oldState;\r\n        const { ports: newPorts } = event.newState;\r\n        const { ports: oldPorts } = event.oldState;\r\n        const boardSameAs = (left: Board, right: Board) => Board.sameAs(left, right);\r\n        const portSameAs = (left: Port, right: Port) => Port.sameAs(left, right);\r\n        return {\r\n            detached: {\r\n                boards: diff(oldBoards, newBoards, boardSameAs),\r\n                ports: diff(oldPorts, newPorts, portSameAs)\r\n            },\r\n            attached: {\r\n                boards: diff(newBoards, oldBoards, boardSameAs),\r\n                ports: diff(newPorts, oldPorts, portSameAs)\r\n            }\r\n        };\r\n    }\r\n\r\n}\r\n\r\nexport interface BoardInstalledEvent {\r\n    readonly pkg: Readonly<BoardsPackage>;\r\n}\r\n\r\nexport interface BoardUninstalledEvent {\r\n    readonly pkg: Readonly<BoardsPackage>;\r\n}\r\n\r\nexport const BoardsServiceClient = Symbol('BoardsServiceClient');\r\nexport interface BoardsServiceClient {\r\n    notifyAttachedBoardsChanged(event: AttachedBoardsChangeEvent): void;\r\n    notifyBoardInstalled(event: BoardInstalledEvent): void\r\n    notifyBoardUninstalled(event: BoardUninstalledEvent): void\r\n}\r\n\r\nexport const BoardsServicePath = '/services/boards-service';\r\nexport const BoardsService = Symbol('BoardsService');\r\nexport interface BoardsService extends Installable<BoardsPackage>, Searchable<BoardsPackage>, JsonRpcServer<BoardsServiceClient> {\r\n    getAttachedBoards(): Promise<Board[]>;\r\n    getAvailablePorts(): Promise<Port[]>;\r\n    getBoardDetails(options: { fqbn: string }): Promise<BoardDetails>;\r\n    getBoardPackage(options: { id: string }): Promise<BoardsPackage | undefined>;\r\n    getContainerBoardPackage(options: { fqbn: string }): Promise<BoardsPackage | undefined>;\r\n    // The CLI cannot do fuzzy search. This method provides all boards and we do the fuzzy search (with monaco) on the frontend.\r\n    // https://github.com/arduino/arduino-cli/issues/629\r\n    allBoards(options: {}): Promise<Array<Board & { packageName: string }>>;\r\n}\r\n\r\nexport interface Port {\r\n    readonly address: string;\r\n    readonly protocol: Port.Protocol;\r\n    /**\r\n     * Optional label for the protocol. For example: `Serial Port (USB)`.\r\n     */\r\n    readonly label?: string;\r\n}\r\nexport namespace Port {\r\n\r\n    export type Protocol = 'serial' | 'network' | 'unknown';\r\n    export namespace Protocol {\r\n        export function toProtocol(protocol: string | undefined): Protocol {\r\n            if (protocol === 'serial') {\r\n                return 'serial';\r\n            } else if (protocol === 'network') {\r\n                return 'network';\r\n            } else {\r\n                return 'unknown';\r\n            }\r\n        }\r\n    }\r\n\r\n    export function is(arg: any): arg is Port {\r\n        return !!arg && 'address' in arg && typeof arg['address'] === 'string' && 'protocol' in arg && typeof arg['protocol'] === 'string';\r\n    }\r\n\r\n    export function toString(port: Port, options: { useLabel: boolean } = { useLabel: false }): string {\r\n        if (options.useLabel && port.label) {\r\n            return `${port.address} ${port.label}`\r\n        }\r\n        return port.address;\r\n    }\r\n\r\n    export function compare(left: Port, right: Port): number {\r\n        // Board ports have higher priorities, they come first.\r\n        if (isBoardPort(left) && !isBoardPort(right)) {\r\n            return -1;\r\n        }\r\n        if (!isBoardPort(left) && isBoardPort(right)) {\r\n            return 1;\r\n        }\r\n        let result = naturalCompare(left.protocol.toLocaleLowerCase(), right.protocol.toLocaleLowerCase());\r\n        if (result !== 0) {\r\n            return result;\r\n        }\r\n        result = naturalCompare(left.address, right.address);\r\n        if (result !== 0) {\r\n            return result;\r\n        }\r\n        return naturalCompare(left.label || '', right.label || '');\r\n    }\r\n\r\n    export function equals(left: Port | undefined, right: Port | undefined): boolean {\r\n        if (left && right) {\r\n            return left.address === right.address\r\n                && left.protocol === right.protocol\r\n                && (left.label || '') === (right.label || '');\r\n        }\r\n        return left === right;\r\n    }\r\n\r\n    // Based on: https://github.com/arduino/Arduino/blob/93581b03d723e55c60caedb4729ffc6ea808fe78/arduino-core/src/processing/app/SerialPortList.java#L48-L74   \r\n    export function isBoardPort(port: Port): boolean {\r\n        const address = port.address.toLocaleLowerCase();\r\n        if (isWindows) {\r\n            // `COM1` seems to be the default serial port on Windows.\r\n            return address !== 'COM1'.toLocaleLowerCase();\r\n        }\r\n        // On macOS and Linux, the port should start with `/dev/`.\r\n        if (!address.startsWith('/dev/')) {\r\n            return false\r\n        }\r\n        if (isOSX) {\r\n            // Example: `/dev/cu.usbmodem14401`\r\n            if (/(tty|cu)\\..*/i.test(address.substring('/dev/'.length))) {\r\n                return [\r\n                    '/dev/cu.MALS',\r\n                    '/dev/cu.SOC',\r\n                    '/dev/cu.Bluetooth-Incoming-Port'\r\n                ].map(a => a.toLocaleLowerCase()).every(a => a !== address);\r\n            }\r\n        }\r\n\r\n        // Example: `/dev/ttyACM0`\r\n        if (/(ttyS|ttyUSB|ttyACM|ttyAMA|rfcomm|ttyO)[0-9]{1,3}/i.test(address.substring('/dev/'.length))) {\r\n            // Default ports were `/dev/ttyS0` -> `/dev/ttyS31` on Ubuntu 16.04.2.\r\n            if (address.startsWith('/dev/ttyS')) {\r\n                const index = Number.parseInt(address.substring('/dev/ttyS'.length), 10);\r\n                if (!Number.isNaN(index) && 0 <= index && 31 >= index) {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    export function sameAs(left: Port | undefined, right: Port | string | undefined) {\r\n        if (left && right) {\r\n            if (left.protocol !== 'serial') {\r\n                console.log(`Unexpected protocol for 'left' port: ${JSON.stringify(left)}. Ignoring 'protocol', comparing 'addresses' with ${JSON.stringify(right)}.`);\r\n            }\r\n            if (typeof right === 'string') {\r\n                return left.address === right;\r\n            }\r\n            if (right.protocol !== 'serial') {\r\n                console.log(`Unexpected protocol for 'right' port: ${JSON.stringify(right)}. Ignoring 'protocol', comparing 'addresses' with ${JSON.stringify(left)}.`);\r\n            }\r\n            return left.address === right.address;\r\n        }\r\n        return false;\r\n    }\r\n\r\n}\r\n\r\nexport interface BoardsPackage extends ArduinoComponent {\r\n    readonly id: string;\r\n    readonly boards: Board[];\r\n}\r\n\r\nexport interface Board {\r\n    readonly name: string;\r\n    readonly fqbn?: string;\r\n    readonly port?: Port;\r\n}\r\n\r\nexport interface BoardDetails {\r\n    readonly fqbn: string;\r\n    readonly requiredTools: Tool[];\r\n    readonly configOptions: ConfigOption[];\r\n    readonly programmers: Programmer[];\r\n}\r\n\r\nexport interface Tool {\r\n    readonly packager: string;\r\n    readonly name: string;\r\n    readonly version: Installable.Version;\r\n}\r\n\r\nexport interface ConfigOption {\r\n    readonly option: string;\r\n    readonly label: string;\r\n    readonly values: ConfigValue[];\r\n}\r\nexport namespace ConfigOption {\r\n\r\n    export function is(arg: any): arg is ConfigOption {\r\n        return !!arg && 'option' in arg && 'label' in arg && 'values' in arg\r\n            && typeof arg['option'] === 'string' && typeof arg['label'] === 'string' && Array.isArray(arg['values'])\r\n    }\r\n\r\n    /**\r\n     * Appends the configuration options to the `fqbn` argument.\r\n     * Throws an error if the `fqbn` does not have the `segment(':'segment)*` format.\r\n     * The provided output format is always segment(':'segment)*(':'option'='value(','option'='value)*)?\r\n     */\r\n    export function decorate(fqbn: string, configOptions: ConfigOption[]): string {\r\n        if (!configOptions.length) {\r\n            return fqbn;\r\n        }\r\n\r\n        const toValue = (values: ConfigValue[]) => {\r\n            const selectedValue = values.find(({ selected }) => selected);\r\n            if (!selectedValue) {\r\n                console.warn(`None of the config values was selected. Values were: ${JSON.stringify(values)}`);\r\n                return undefined;\r\n            }\r\n            return selectedValue.value;\r\n        };\r\n        const options = configOptions\r\n            .map(({ option, values }) => [option, toValue(values)])\r\n            .filter(([, value]) => !!value)\r\n            .map(([option, value]) => `${option}=${value}`)\r\n            .join(',');\r\n\r\n        return `${fqbn}:${options}`;\r\n    }\r\n\r\n    export class ConfigOptionError extends Error {\r\n        constructor(message: string) {\r\n            super(message);\r\n            Object.setPrototypeOf(this, ConfigOptionError.prototype);\r\n        }\r\n    }\r\n\r\n    export const LABEL_COMPARATOR = (left: ConfigOption, right: ConfigOption) => naturalCompare(left.label.toLocaleLowerCase(), right.label.toLocaleLowerCase());\r\n\r\n}\r\n\r\nexport interface ConfigValue {\r\n    readonly label: string;\r\n    readonly value: string;\r\n    readonly selected: boolean;\r\n}\r\n\r\nexport interface Programmer {\r\n    readonly name: string;\r\n    readonly platform: string;\r\n    readonly id: string;\r\n}\r\nexport namespace Programmer {\r\n\r\n    export function equals(left: Programmer | undefined, right: Programmer | undefined): boolean {\r\n        if (!left) {\r\n            return !right;\r\n        }\r\n        if (!right) {\r\n            return !left;\r\n        }\r\n        return left.id === right.id && left.name === right.name && left.platform === right.platform;\r\n    }\r\n\r\n}\r\n\r\nexport namespace Board {\r\n\r\n    export function is(board: any): board is Board {\r\n        return !!board && 'name' in board;\r\n    }\r\n\r\n    export function equals(left: Board, right: Board): boolean {\r\n        return left.name === right.name && left.fqbn === right.fqbn;\r\n    }\r\n\r\n    export function sameAs(left: Board, right: string | Board): boolean {\r\n        // How to associate a selected board with one of the available cores: https://typefox.slack.com/archives/CJJHJCJSJ/p1571142327059200\r\n        // 1. How to use the FQBN if any and infer the package ID from it: https://typefox.slack.com/archives/CJJHJCJSJ/p1571147549069100\r\n        // 2. How to trim the `/Genuino` from the name: https://arduino.slack.com/archives/CJJHJCJSJ/p1571146951066800?thread_ts=1571142327.059200&cid=CJJHJCJSJ\r\n        const other = typeof right === 'string' ? { name: right } : right;\r\n        if (left.fqbn && other.fqbn) {\r\n            return left.fqbn === other.fqbn;\r\n        }\r\n        return left.name.replace('/Genuino', '') === other.name.replace('/Genuino', '');\r\n    }\r\n\r\n    export function compare(left: Board, right: Board): number {\r\n        let result = naturalCompare(left.name, right.name);\r\n        if (result === 0) {\r\n            result = naturalCompare(left.fqbn || '', right.fqbn || '');\r\n        }\r\n        return result;\r\n    }\r\n\r\n    export function installed(board: Board): boolean {\r\n        return !!board.fqbn;\r\n    }\r\n\r\n    export function toString(board: Board, options: { useFqbn: boolean } = { useFqbn: true }): string {\r\n        const fqbn = options && options.useFqbn && board.fqbn ? ` [${board.fqbn}]` : '';\r\n        return `${board.name}${fqbn}`;\r\n    }\r\n\r\n    export type Detailed = Board & Readonly<{ selected: boolean, missing: boolean, packageName: string, details?: string }>;\r\n    export function decorateBoards(\r\n        selectedBoard: Board | undefined,\r\n        boards: Array<Board & { packageName: string }>): Array<Detailed> {\r\n        // Board names are not unique. We show the corresponding core name as a detail.\r\n        // https://github.com/arduino/arduino-cli/pull/294#issuecomment-513764948\r\n        const distinctBoardNames = new Map<string, number>();\r\n        for (const { name } of boards) {\r\n            const counter = distinctBoardNames.get(name) || 0;\r\n            distinctBoardNames.set(name, counter + 1);\r\n        }\r\n\r\n        // Due to the non-unique board names, we have to check the package name as well.\r\n        const selected = (board: Board & { packageName: string }) => {\r\n            if (!!selectedBoard) {\r\n                if (Board.equals(board, selectedBoard)) {\r\n                    if ('packageName' in selectedBoard) {\r\n                        return board.packageName === (selectedBoard as any).packageName;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n            return false;\r\n        }\r\n        return boards.map(board => ({\r\n            ...board,\r\n            details: (distinctBoardNames.get(board.name) || 0) > 1 ? ` - ${board.packageName}` : undefined,\r\n            selected: selected(board),\r\n            missing: !installed(board)\r\n        }));\r\n    }\r\n\r\n}\r\n","import { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\r\n\r\nexport const ConfigServiceClient = Symbol('ConfigServiceClient');\r\nexport interface ConfigServiceClient {\r\n    notifyConfigChanged(config: Config): void;\r\n    notifyInvalidConfig(): void;\r\n}\r\n\r\nexport const ConfigServicePath = '/services/config-service';\r\nexport const ConfigService = Symbol('ConfigService');\r\nexport interface ConfigService extends JsonRpcServer<ConfigServiceClient> {\r\n    getVersion(): Promise<string>;\r\n    getConfiguration(): Promise<Config>;\r\n    getCliConfigFileUri(): Promise<string>;\r\n    getConfigurationFileSchemaUri(): Promise<string>;\r\n    isInDataDir(uri: string): Promise<boolean>;\r\n    isInSketchDir(uri: string): Promise<boolean>;\r\n}\r\n\r\nexport interface Config {\r\n    readonly sketchDirUri: string;\r\n    readonly dataDirUri: string;\r\n    readonly downloadsDirUri: string;\r\n    readonly additionalUrls: string[];\r\n}\r\n","import { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\r\nimport { Programmer } from './boards-service';\r\n\r\nexport const CoreServiceClient = Symbol('CoreServiceClient');\r\nexport interface CoreServiceClient {\r\n    notifyIndexUpdated(): void;\r\n}\r\n\r\nexport const CoreServicePath = '/services/core-service';\r\nexport const CoreService = Symbol('CoreService');\r\nexport interface CoreService extends JsonRpcServer<CoreServiceClient> {\r\n    compile(options: CoreService.Compile.Options): Promise<void>;\r\n    upload(options: CoreService.Upload.Options): Promise<void>;\r\n}\r\n\r\nexport namespace CoreService {\r\n\r\n    export namespace Compile {\r\n        export interface Options {\r\n            readonly sketchUri: string;\r\n            readonly fqbn: string;\r\n            readonly optimizeForDebug: boolean;\r\n        }\r\n    }\r\n\r\n    export namespace Upload {\r\n        export type Options =\r\n            Compile.Options & Readonly<{ port: string }> |\r\n            Compile.Options & Readonly<{ programmer: Programmer, port?: string }>;\r\n    }\r\n\r\n}\r\n","export const FileSystemExtPath = '/services/file-system-ext';\r\nexport const FileSystemExt = Symbol('FileSystemExt');\r\nexport interface FileSystemExt {\r\n    getUri(fsPath: string): Promise<string>;\r\n}\r\n","export * from './arduino-component';\r\nexport * from './arduino-daemon';\r\nexport * from './boards-service';\r\nexport * from './config-service';\r\nexport * from './core-service';\r\nexport * from './filesystem-ext';\r\nexport * from './installable';\r\nexport * from './library-service';\r\nexport * from './monitor-service';\r\nexport * from './searchable';\r\nexport * from './sketches-service';\r\nexport * from './tool-output-service';\r\n","import { naturalCompare } from './../utils';\r\nimport { ArduinoComponent } from './arduino-component';\r\n\r\nexport interface Installable<T extends ArduinoComponent> {\r\n    /**\r\n     * If `options.version` is specified, that will be installed. Otherwise, `item.availableVersions[0]`.\r\n     */\r\n    install(options: { item: T, version?: Installable.Version }): Promise<void>;\r\n\r\n    /**\r\n     * Uninstalls the given component. It is a NOOP if not installed.\r\n     */\r\n    uninstall(options: { item: T }): Promise<void>;\r\n}\r\nexport namespace Installable {\r\n    export type Version = string;\r\n    export namespace Version {\r\n        /**\r\n         * Most recent version comes first, then the previous versions. (`1.8.1`, `1.6.3`, `1.6.2`, `1.6.1` and so on.)\r\n         */\r\n        export const COMPARATOR = (left: Version, right: Version) => naturalCompare(right, left);\r\n    }\r\n}\r\n","import { Searchable } from './searchable';\r\nimport { Installable } from './installable';\r\nimport { ArduinoComponent } from './arduino-component';\r\n\r\nexport const LibraryServicePath = '/services/library-service';\r\nexport const LibraryService = Symbol('LibraryService');\r\nexport interface LibraryService extends Installable<Library>, Searchable<Library> {\r\n    install(options: { item: Library, version?: Installable.Version }): Promise<void>;\r\n}\r\n\r\nexport interface Library extends ArduinoComponent {\r\n    readonly builtIn?: boolean;\r\n}\r\n","import { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\r\nimport { Board, Port } from './boards-service';\r\n\r\nexport interface Status { }\r\nexport interface OK extends Status { }\r\nexport interface ErrorStatus extends Status {\r\n    readonly message: string;\r\n}\r\nexport namespace Status {\r\n    export function isOK(status: Status & { message?: string }): status is OK {\r\n        return typeof status.message !== 'string';\r\n    }\r\n    export const OK: OK = {};\r\n    export const NOT_CONNECTED: ErrorStatus = { message: 'Not connected.' };\r\n    export const ALREADY_CONNECTED: ErrorStatus = { message: 'Already connected.' };\r\n}\r\n\r\nexport const MonitorServicePath = '/services/serial-monitor';\r\nexport const MonitorService = Symbol('MonitorService');\r\nexport interface MonitorService extends JsonRpcServer<MonitorServiceClient> {\r\n    connect(config: MonitorConfig): Promise<Status>;\r\n    disconnect(): Promise<Status>;\r\n    send(data: string | Uint8Array): Promise<Status>;\r\n}\r\n\r\nexport interface MonitorConfig {\r\n    readonly board: Board;\r\n    readonly port: Port;\r\n    /**\r\n     * Defaults to [`SERIAL`](MonitorConfig#ConnectionType#SERIAL).\r\n     */\r\n    readonly type?: MonitorConfig.ConnectionType;\r\n    /**\r\n     * Defaults to `9600`.\r\n     */\r\n    readonly baudRate?: MonitorConfig.BaudRate;\r\n\r\n}\r\nexport namespace MonitorConfig {\r\n\r\n    export type BaudRate = 300 | 1200 | 2400 | 4800 | 9600 | 19200 | 38400 | 57600 | 115200;\r\n    export namespace BaudRate {\r\n        export const DEFAULT: BaudRate = 9600;\r\n    }\r\n\r\n    export enum ConnectionType {\r\n        SERIAL = 0\r\n    }\r\n\r\n}\r\n\r\nexport const MonitorServiceClient = Symbol('MonitorServiceClient');\r\nexport interface MonitorServiceClient {\r\n    notifyRead(event: MonitorReadEvent): void;\r\n    notifyError(event: MonitorError): void;\r\n}\r\n\r\nexport interface MonitorReadEvent {\r\n    readonly data: string;\r\n}\r\n\r\nexport interface MonitorError {\r\n    readonly message: string;\r\n    /**\r\n     * If no `code` is available, clients must reestablish the serial-monitor connection.\r\n     */\r\n    readonly code: number | undefined;\r\n    readonly config: MonitorConfig;\r\n}\r\nexport namespace MonitorError {\r\n    export namespace ErrorCodes {\r\n        /**\r\n         * The frontend has refreshed the browser, for instance.\r\n         */\r\n        export const CLIENT_CANCEL = 1;\r\n        /**\r\n         * When detaching a physical device when the duplex channel is still opened.\r\n         */\r\n        export const DEVICE_NOT_CONFIGURED = 2;\r\n        /**\r\n         * Another serial monitor was opened on this port. For another electron-instance, Java IDE.\r\n         */\r\n        export const DEVICE_BUSY = 3;\r\n    }\r\n}\r\n","import URI from '@theia/core/lib/common/uri';\r\n\r\nexport const SketchesServicePath = '/services/sketches-service';\r\nexport const SketchesService = Symbol('SketchesService');\r\nexport interface SketchesService {\r\n\r\n    /**\r\n     * Returns with the direct sketch folders from the location of the `fileStat`.\r\n     * The sketches returns with inverse-chronological order, the first item is the most recent one.\r\n     */\r\n    getSketches(uri?: string): Promise<Sketch[]>;\r\n\r\n    /**\r\n     * This is the TS implementation of `SketchLoad` from the CLI and should be replaced with a gRPC call eventually.\r\n     * See: https://github.com/arduino/arduino-cli/issues/837\r\n     * Based on: https://github.com/arduino/arduino-cli/blob/eef3705c4afcba4317ec38b803d9ffce5dd59a28/arduino/builder/sketch.go#L100-L215\r\n     */\r\n    loadSketch(uri: string): Promise<Sketch>;\r\n\r\n    /**\r\n     * Creates a new sketch folder in the temp location.\r\n     */\r\n    createNewSketch(): Promise<Sketch>;\r\n\r\n    isSketchFolder(uri: string): Promise<boolean>;\r\n\r\n    /**\r\n     * Sketches are created to the temp location by default and will be moved under `directories.user` on save.\r\n     * This method resolves to `true` if the `sketch` is still in the temp location. Otherwise, `false`.\r\n     */\r\n    isTemp(sketch: Sketch): Promise<boolean>;\r\n\r\n    /**\r\n     * If `isTemp` is `true` for the `sketch`, you can call this method to move the sketch from the temp\r\n     * location to `directories.user`. Resolves with the URI of the sketch after the move. Rejects, when the sketch\r\n     * was not in the temp folder. This method always overrides. It's the callers responsibility to ask the user whether\r\n     * the files at the destination can be overwritten or not.\r\n     */\r\n    copy(sketch: Sketch, options: { destinationUri: string }): Promise<string>;\r\n\r\n    /**\r\n     * Returns with the container sketch for the input `uri`. If the `uri` is not in a sketch folder, resolved `undefined`.\r\n     */\r\n    getSketchFolder(uri: string): Promise<Sketch | undefined>;\r\n\r\n}\r\n\r\nexport interface Sketch {\r\n    readonly name: string;\r\n    readonly uri: string; // `LocationPath`\r\n    readonly mainFileUri: string; // `MainFile`\r\n    readonly otherSketchFileUris: string[]; // `OtherSketchFiles`\r\n    readonly additionalFileUris: string[]; // `AdditionalFiles`\r\n}\r\nexport namespace Sketch {\r\n    export function is(arg: any): arg is Sketch {\r\n        return !!arg && 'name' in arg && 'uri' in arg && typeof arg.name === 'string' && typeof arg.uri === 'string';\r\n    }\r\n    export namespace Extensions {\r\n        export const MAIN = ['.ino', '.pde'];\r\n        export const SOURCE = ['.c', '.cpp', '.s'];\r\n        export const ADDITIONAL = ['.h', '.c', '.hpp', '.hh', '.cpp', '.s'];\r\n        export const ALL = Array.from(new Set([...MAIN, ...SOURCE, ...ADDITIONAL]));\r\n    }\r\n    export function isInSketch(uri: string | URI, sketch: Sketch): boolean {\r\n        const { mainFileUri, otherSketchFileUris, additionalFileUris } = sketch;\r\n        return [mainFileUri, ...otherSketchFileUris, ...additionalFileUris].indexOf(uri.toString()) !== -1;\r\n    }\r\n}\r\n\r\n","import { JsonRpcServer } from '@theia/core';\r\n\r\nexport interface ToolOutputMessage {\r\n    readonly tool: string;\r\n    readonly chunk: string;\r\n    readonly severity?: 'error' | 'warning' | 'info';\r\n}\r\n\r\nexport const ToolOutputServiceServer = Symbol('ToolOutputServiceServer');\r\nexport interface ToolOutputServiceServer extends JsonRpcServer<ToolOutputServiceClient> {\r\n    append(message: ToolOutputMessage): void;\r\n    disposeClient(client: ToolOutputServiceClient): void;\r\n}\r\n\r\nexport const ToolOutputServiceClient = Symbol('ToolOutputServiceClient');\r\nexport interface ToolOutputServiceClient {\r\n    onMessageReceived(message: ToolOutputMessage): void;\r\n}\r\n\r\nexport namespace ToolOutputService {\r\n    export const SERVICE_PATH = '/tool-output-service';\r\n}\r\n","export const naturalCompare: (left: string, right: string) => number = require('string-natural-compare').caseInsensitive;\r\n\r\nexport function notEmpty(arg: string | undefined | null): arg is string {\r\n    return !!arg;\r\n}\r\n\r\nexport function firstToLowerCase(what: string): string {\r\n    return what.charAt(0).toLowerCase() + what.slice(1);\r\n}\r\n","'use strict';\n\nvar alphabet;\nvar alphabetIndexMap;\nvar alphabetIndexMapLength = 0;\n\nfunction isNumberCode(code) {\n  return code >= 48 && code <= 57;\n}\n\nfunction naturalCompare(a, b) {\n  var lengthA = (a += '').length;\n  var lengthB = (b += '').length;\n  var aIndex = 0;\n  var bIndex = 0;\n\n  while (aIndex < lengthA && bIndex < lengthB) {\n    var charCodeA = a.charCodeAt(aIndex);\n    var charCodeB = b.charCodeAt(bIndex);\n\n    if (isNumberCode(charCodeA)) {\n      if (!isNumberCode(charCodeB)) {\n        return charCodeA - charCodeB;\n      }\n\n      var numStartA = aIndex;\n      var numStartB = bIndex;\n\n      while (charCodeA === 48 && ++numStartA < lengthA) {\n        charCodeA = a.charCodeAt(numStartA);\n      }\n      while (charCodeB === 48 && ++numStartB < lengthB) {\n        charCodeB = b.charCodeAt(numStartB);\n      }\n\n      var numEndA = numStartA;\n      var numEndB = numStartB;\n\n      while (numEndA < lengthA && isNumberCode(a.charCodeAt(numEndA))) {\n        ++numEndA;\n      }\n      while (numEndB < lengthB && isNumberCode(b.charCodeAt(numEndB))) {\n        ++numEndB;\n      }\n\n      var difference = numEndA - numStartA - numEndB + numStartB; // numA length - numB length\n      if (difference) {\n        return difference;\n      }\n\n      while (numStartA < numEndA) {\n        difference = a.charCodeAt(numStartA++) - b.charCodeAt(numStartB++);\n        if (difference) {\n          return difference;\n        }\n      }\n\n      aIndex = numEndA;\n      bIndex = numEndB;\n      continue;\n    }\n\n    if (charCodeA !== charCodeB) {\n      if (\n        charCodeA < alphabetIndexMapLength &&\n        charCodeB < alphabetIndexMapLength &&\n        alphabetIndexMap[charCodeA] !== -1 &&\n        alphabetIndexMap[charCodeB] !== -1\n      ) {\n        return alphabetIndexMap[charCodeA] - alphabetIndexMap[charCodeB];\n      }\n\n      return charCodeA - charCodeB;\n    }\n\n    ++aIndex;\n    ++bIndex;\n  }\n\n  if (aIndex >= lengthA && bIndex < lengthB && lengthA >= lengthB) {\n    return -1;\n  }\n\n  if (bIndex >= lengthB && aIndex < lengthA && lengthB >= lengthA) {\n    return 1;\n  }\n\n  return lengthA - lengthB;\n}\n\nnaturalCompare.caseInsensitive = naturalCompare.i = function(a, b) {\n  return naturalCompare(('' + a).toLowerCase(), ('' + b).toLowerCase());\n};\n\nObject.defineProperties(naturalCompare, {\n  alphabet: {\n    get: function() {\n      return alphabet;\n    },\n\n    set: function(value) {\n      alphabet = value;\n      alphabetIndexMap = [];\n\n      var i = 0;\n\n      if (alphabet) {\n        for (; i < alphabet.length; i++) {\n          alphabetIndexMap[alphabet.charCodeAt(i)] = i;\n        }\n      }\n\n      alphabetIndexMapLength = alphabetIndexMap.length;\n\n      for (i = 0; i < alphabetIndexMapLength; i++) {\n        if (alphabetIndexMap[i] === undefined) {\n          alphabetIndexMap[i] = -1;\n        }\n      }\n    },\n  },\n});\n\nmodule.exports = naturalCompare;\n"],"sourceRoot":""}