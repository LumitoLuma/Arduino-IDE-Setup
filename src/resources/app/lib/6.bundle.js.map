{"version":3,"sources":["webpack:///./node_modules/@theia/variable-resolver/src/browser/variable-quick-open-service.ts","webpack:///./node_modules/@theia/variable-resolver/src/browser/variable-resolver-service.ts","webpack:///./node_modules/@theia/variable-resolver/src/browser/variable.ts"],"names":[],"mappings":"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","file":"6.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport { MessageService } from '@theia/core/lib/common/message-service';\nimport { QuickOpenModel, QuickOpenItem, QuickOpenMode } from '@theia/core/lib/common/quick-open-model';\nimport { QuickOpenService } from '@theia/core/lib/browser/quick-open/quick-open-service';\nimport { QuickInputService } from '@theia/core/lib/browser/quick-open/quick-input-service';\nimport { VariableRegistry, Variable } from './variable';\nimport { VariableResolverService } from './variable-resolver-service';\n\n@injectable()\nexport class VariableQuickOpenService implements QuickOpenModel {\n\n    protected items: QuickOpenItem[];\n\n    @inject(MessageService)\n    protected readonly messages: MessageService;\n\n    @inject(QuickInputService)\n    protected readonly quickInputService: QuickInputService;\n\n    @inject(VariableResolverService)\n    protected readonly variableResolver: VariableResolverService;\n\n    constructor(\n        @inject(VariableRegistry) protected readonly variableRegistry: VariableRegistry,\n        @inject(QuickOpenService) protected readonly quickOpenService: QuickOpenService\n    ) { }\n\n    open(): void {\n        this.items = this.variableRegistry.getVariables().map(v => new QuickOpenItem({\n            label: '${' + v.name + '}',\n            detail: v.description,\n            run: mode => {\n                if (mode === QuickOpenMode.OPEN) {\n                    setTimeout(() => this.showValue(v));\n                    return true;\n                }\n                return false;\n            }\n        }));\n\n        this.quickOpenService.open(this, {\n            placeholder: 'Registered variables',\n            fuzzyMatchLabel: true,\n            fuzzyMatchDescription: true,\n            fuzzySort: true\n        });\n    }\n\n    onType(lookFor: string, acceptor: (items: QuickOpenItem[]) => void): void {\n        acceptor(this.items);\n    }\n\n    protected async showValue(variable: Variable): Promise<void> {\n        const argument = await this.quickInputService.open({\n            placeHolder: 'Type a variable argument'\n        });\n        const value = await this.variableResolver.resolve('${' + variable.name + ':' + argument + '}');\n        if (typeof value === 'string') {\n            this.messages.info(value);\n        }\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\n/* eslint-disable @typescript-eslint/no-explicit-any */\n\nimport { injectable, inject } from 'inversify';\nimport { VariableRegistry } from './variable';\nimport URI from '@theia/core/lib/common/uri';\nimport { JSONExt, ReadonlyJSONValue } from '@phosphor/coreutils/lib/json';\n\nexport interface VariableResolveOptions {\n    context?: URI;\n    /**\n     * Used for resolving inputs, see https://code.visualstudio.com/docs/editor/variables-reference#_input-variables\n     */\n    configurationSection?: string;\n}\n\n/**\n * The variable resolver service should be used to resolve variables in strings.\n */\n@injectable()\nexport class VariableResolverService {\n\n    protected static VAR_REGEXP = /\\$\\{(.*?)\\}/g;\n\n    @inject(VariableRegistry) protected readonly variableRegistry: VariableRegistry;\n\n    /**\n     * Resolve the variables in the given string array.\n     * @param value The array of data to resolve\n     * @param options options of the variable resolution\n     * @returns promise resolved to the provided string array with already resolved variables.\n     * Never reject.\n     */\n    resolveArray(value: string[], options: VariableResolveOptions = {}): Promise<string[]> {\n        return this.resolve(value, options);\n    }\n\n    /**\n     * Resolve the variables in the given string.\n     * @param value Data to resolve\n     * @param options options of the variable resolution\n     * @returns promise resolved to the provided string with already resolved variables.\n     * Never reject.\n     */\n    async resolve<T>(value: T, options: VariableResolveOptions = {}): Promise<T> {\n        const context = new VariableResolverService.Context(this.variableRegistry, options);\n        const resolved = await this.doResolve(value, context);\n        return resolved as any;\n    }\n\n    protected async doResolve(value: Object | undefined, context: VariableResolverService.Context): Promise<Object | undefined> {\n        // eslint-disable-next-line no-null/no-null\n        if (value === undefined || value === null) {\n            return value;\n        }\n        if (typeof value === 'string') {\n            return this.doResolveString(value, context);\n        }\n        if (Array.isArray(value)) {\n            return this.doResolveArray(value, context);\n        }\n        if (typeof value === 'object') {\n            return this.doResolveObject(value, context);\n        }\n        return value;\n    }\n\n    protected async doResolveObject(obj: object, context: VariableResolverService.Context): Promise<object> {\n        const result: {\n            [prop: string]: Object | undefined\n        } = {};\n        for (const name of Object.keys(obj)) {\n            const value = (obj as any)[name];\n            const resolved = await this.doResolve(value, context);\n            result[name] = resolved;\n        }\n        return result;\n    }\n\n    protected async doResolveArray(values: Array<Object | undefined>, context: VariableResolverService.Context): Promise<Array<Object | undefined>> {\n        const result: (Object | undefined)[] = [];\n        for (const value of values) {\n            const resolved = await this.doResolve(value, context);\n            result.push(resolved);\n        }\n        return result;\n    }\n\n    protected async doResolveString(value: string, context: VariableResolverService.Context): Promise<string> {\n        await this.resolveVariables(value, context);\n        return value.replace(VariableResolverService.VAR_REGEXP, (match: string, varName: string) => {\n            const varValue = context.get(varName);\n            return varValue !== undefined ? varValue : match;\n        });\n    }\n\n    protected async resolveVariables(value: string, context: VariableResolverService.Context): Promise<void> {\n        const variableRegExp = new RegExp(VariableResolverService.VAR_REGEXP);\n        let match;\n        // eslint-disable-next-line no-null/no-null\n        while ((match = variableRegExp.exec(value)) !== null) {\n            const variableName = match[1];\n            await context.resolve(variableName);\n        }\n    }\n}\nexport namespace VariableResolverService {\n    export class Context {\n\n        protected readonly resolved = new Map<string, string | undefined>();\n\n        constructor(\n            protected readonly variableRegistry: VariableRegistry,\n            protected readonly options: VariableResolveOptions\n        ) { }\n\n        get(name: string): string | undefined {\n            return this.resolved.get(name);\n        }\n\n        async resolve(name: string): Promise<void> {\n            if (this.resolved.has(name)) {\n                return;\n            }\n            try {\n                let variableName = name;\n                let argument: string | undefined;\n                const parts = name.split(':');\n                if (parts.length > 1) {\n                    variableName = parts[0];\n                    argument = parts[1];\n                }\n                const variable = this.variableRegistry.getVariable(variableName);\n                const value = variable && await variable.resolve(this.options.context, argument, this.options.configurationSection);\n                // eslint-disable-next-line no-null/no-null\n                const stringValue = value !== undefined && value !== null && JSONExt.isPrimitive(value as ReadonlyJSONValue) ? String(value) : undefined;\n                this.resolved.set(name, stringValue);\n            } catch (e) {\n                console.error(`Failed to resolved '${name}' variable`, e);\n                this.resolved.set(name, undefined);\n            }\n        }\n\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { Disposable, DisposableCollection, MaybePromise } from '@theia/core';\nimport URI from '@theia/core/lib/common/uri';\n\n/**\n * Variable can be used inside of strings using ${variableName} syntax.\n */\nexport interface Variable {\n\n    /**\n     * A unique name of this variable.\n     */\n    readonly name: string;\n\n    /**\n     * A human-readable description of this variable.\n     */\n    readonly description?: string;\n\n    /**\n     * Resolve to a string value of this variable or\n     * `undefined` if variable cannot be resolved.\n     * Never reject.\n     */\n    resolve(context?: URI, argument?: string, configurationSection?: string): MaybePromise<Object | undefined>;\n}\n\nexport const VariableContribution = Symbol('VariableContribution');\n/**\n * The variable contribution should be implemented to register custom variables.\n */\nexport interface VariableContribution {\n    registerVariables(variables: VariableRegistry): void;\n}\n\n/**\n * The variable registry manages variables.\n */\n@injectable()\nexport class VariableRegistry implements Disposable {\n\n    protected readonly variables: Map<string, Variable> = new Map();\n    protected readonly toDispose = new DisposableCollection();\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    /**\n     * Register the given variable.\n     * Do nothing if a variable is already registered for the given variable name.\n     */\n    registerVariable(variable: Variable): Disposable {\n        if (this.variables.has(variable.name)) {\n            console.warn(`A variables with name ${variable.name} is already registered.`);\n            return Disposable.NULL;\n        }\n        this.variables.set(variable.name, variable);\n        const disposable = {\n            dispose: () => this.variables.delete(variable.name)\n        };\n        this.toDispose.push(disposable);\n        return disposable;\n    }\n\n    /**\n     * Return all registered variables.\n     */\n    getVariables(): Variable[] {\n        return [...this.variables.values()];\n    }\n\n    /**\n     * Get a variable for the given name or `undefined` if none.\n     */\n    getVariable(name: string): Variable | undefined {\n        return this.variables.get(name);\n    }\n\n    /**\n     * Register an array of variables.\n     * Do nothing if a variable is already registered for the given variable name.\n     */\n    registerVariables(variables: Variable[]): Disposable[] {\n        return variables.map(v => this.registerVariable(v));\n    }\n}\n"],"sourceRoot":""}