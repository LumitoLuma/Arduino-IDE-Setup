{"version":3,"sources":["webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-contribution.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-frontend-module.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-service.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-tree/callhierarchy-tree-container.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-tree/callhierarchy-tree-model.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-tree/callhierarchy-tree-widget.tsx","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-tree/callhierarchy-tree.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy-tree/index.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/callhierarchy.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/current-editor-access.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/style/index.css?53ee","webpack:///./node_modules/@theia/languages/src/common/language-selector/glob.ts","webpack:///./node_modules/@theia/languages/src/common/language-selector/index.ts","webpack:///./node_modules/@theia/languages/src/common/language-selector/language-selector.ts","webpack:///./node_modules/@theia/callhierarchy/src/browser/style/index.css"],"names":[],"mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,oGAA+C;AAE/C,sHAA0G;AAC1G,0HAAgE;AAEhE,qIAAmD;AACnD,6JAA8D;AAC9D,6JAAuE;AACvE,kHAA6C;AAEhC,wCAAgC,GAAG,sBAAsB,CAAC;AAC1D,4BAAoB,GAAG,gBAAgB,CAAC;AAErD,IAAiB,qBAAqB,CAKrC;AALD,WAAiB,qBAAqB;IACrB,0BAAI,GAAY;QACzB,EAAE,EAAE,oBAAoB;QACxB,KAAK,EAAE,qBAAqB;KAC/B,CAAC;AACN,CAAC,EALgB,qBAAqB,GAArB,6BAAqB,KAArB,6BAAqB,QAKrC;AAGD;IAA+C,6CAAiD;IAI5F;eACI,kBAAM;YACF,QAAQ,EAAE,gCAAgB;YAC1B,UAAU,EAAE,4BAAoB;YAChC,oBAAoB,EAAE;gBAClB,IAAI,EAAE,QAAQ;aACjB;YACD,eAAe,EAAE,wCAAgC;YACjD,gBAAgB,EAAE,kBAAkB;SACvC,CAAC;IACN,CAAC;IAES,4DAAwB,GAAlC;QACI,IAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;QACnD,IAAM,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;QACrD,OAAO,CAAC,CAAC,SAAS,IAAI,CAAC,CAAC,UAAU,IAAI,CAAC,CAAC,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,aAAG,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC;IACtH,CAAC;IAEK,4CAAQ,GAAd,UAAe,IAAiC;;;;;4BAC7B,qBAAM,iBAAM,QAAQ,YAAC,IAAI,CAAC;;wBAAnC,MAAM,GAAG,SAA0B;wBACnC,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,YAAY,EAAE,CAAC;wBAC7C,UAAU,GAAG,IAAI,CAAC,YAAY,CAAC,aAAa,EAAE,CAAC;wBACrD,MAAM,CAAC,eAAe,CAAC,SAAS,EAAE,UAAU,CAAC,CAAC;wBAC9C,sBAAO,MAAM,EAAC;;;;KACjB;IAED,oDAAgB,GAAhB,UAAiB,QAAyB;QAA1C,iBASC;QARG,QAAQ,CAAC,eAAe,CAAC,qBAAqB,CAAC,IAAI,EAAE;YACjD,OAAO,EAAE,cAAM,YAAI,CAAC,QAAQ,CAAC;gBACzB,MAAM,EAAE,KAAK;gBACb,QAAQ,EAAE,IAAI;aACjB,CAAC,EAHa,CAGb;YACF,SAAS,EAAE,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,IAAI,CAAC;SACtD,CAAC,CAAC;QACH,iBAAM,gBAAgB,YAAC,QAAQ,CAAC,CAAC;IACrC,CAAC;IAED,iDAAa,GAAb,UAAc,KAAwB;QAClC,IAAM,QAAQ,YAAO,6BAAmB,GAAE,YAAY,EAAC,CAAC;QACxD,KAAK,CAAC,kBAAkB,CAAC,QAAQ,EAAE;YAC/B,SAAS,EAAE,qBAAqB,CAAC,IAAI,CAAC,EAAE;YACxC,KAAK,EAAE,4BAAoB;SAC9B,CAAC,CAAC;QACH,iBAAM,aAAa,YAAC,KAAK,CAAC,CAAC;IAC/B,CAAC;IAED,uDAAmB,GAAnB,UAAoB,WAA+B;QAC/C,iBAAM,mBAAmB,YAAC,WAAW,CAAC,CAAC;QACvC,WAAW,CAAC,kBAAkB,CAAC;YAC3B,OAAO,EAAE,qBAAqB,CAAC,IAAI,CAAC,EAAE;YACtC,UAAU,EAAE,YAAY;SAC3B,CAAC,CAAC;IACP,CAAC;IAtD4B;QAA5B,kBAAM,CAAC,2CAAmB,CAAC;kCAAkC,2CAAmB;mEAAC;IAC5C;QAArC,kBAAM,CAAC,oDAA4B,CAAC;kCAAkD,oDAA4B;mFAAC;IAH3G,yBAAyB;QADrC,sBAAU,EAAE;;OACA,yBAAyB,CAyDrC;IAAD,gCAAC;CAAA,CAzD8C,kCAAwB,GAyDtE;AAzDY,8DAAyB;;;;;;;;;;;;;;ACrCtC;;;;;;;;;;;;;;kFAckF;;AAElF,4KAAyE;AACzE,mHAAkE;AAClE,6JAA6F;AAC7F,sHAA8E;AAC9E,qIAAmD;AACnD,0JAAiE;AACjE,6JAA8D;AAE9D,oGAA4C;AAE5C,gIAA2C;AAE3C,kBAAe,IAAI,2BAAe,CAAC,cAAI;IACnC,IAAI,CAAC,2CAAmB,CAAC,CAAC,MAAM,EAAE,CAAC,gBAAgB,EAAE,CAAC;IAEtD,iCAAwB,CAAC,IAAI,EAAE,4CAAoB,CAAC,CAAC;IACrD,IAAI,CAAC,oDAA4B,CAAC,CAAC,EAAE,CAAC,oDAA4B,CAAC,CAAC,gBAAgB,EAAE,CAAC;IAEvF,8BAAoB,CAAC,IAAI,EAAE,sDAAyB,CAAC,CAAC;IAEtD,IAAI,CAAC,uBAAa,CAAC,CAAC,cAAc,CAAC,iBAAO,IAAI,QAAC;QAC3C,EAAE,EAAE,gCAAgB;QACpB,YAAY,EAAE,cAAM,qDAAyB,CAAC,OAAO,CAAC,SAAS,CAAC,EAA5C,CAA4C;KACnE,CAAC,EAH4C,CAG5C,CAAC,CAAC;AACR,CAAC,CAAC,CAAC;;;;;;;;;;;;;;ACxCH;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;AAElF,oGAAqE;AAGrE,mHAA8D;AAC9D,4KAAwF;AAK3E,4BAAoB,GAAG,MAAM,CAAC,sBAAsB,CAAC,CAAC;AAYnE;IAAA;QAKY,aAAQ,GAA2B,EAAE,CAAC;IA6BlD,CAAC;IA1BG,2CAAI,GAAJ;QACI,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,aAAa,CAAC,gBAAgB,EAAE,CAAC,CAAC;IAChF,CAAC;IAED,0CAAG,GAAH,UAAI,UAAkB,EAAE,GAAQ;QAE5B,OAAO,IAAI,CAAC,QAAQ,CAAC,IAAI,CACrB,UAAC,IAAI,EAAE,KAAK;YACR,gCAAK,CAAC,KAAK,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC,GAAG,yBAAK,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,QAAQ,EAAE,EAAE,UAAU,EAAE,IAAI,CAAC;QAAlJ,CAAkJ,CAAC,CAAC,CAAC,CAAC,CAAC;IACnK,CAAC;IAED,0CAAG,GAAH,UAAI,OAA6B;QAC7B,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;QAC5B,IAAM,IAAI,GAAG,IAAI,CAAC;QAClB,OAAO;YACH,OAAO,EAAE;gBACL,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;YACzB,CAAC;SACJ,CAAC;IACN,CAAC;IAEO,6CAAM,GAAd,UAAe,OAA6B;QACxC,IAAM,MAAM,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;QACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,eAAK,IAAI,YAAK,KAAK,OAAO,EAAjB,CAAiB,CAAC,CAAC;QACjE,OAAO,MAAM,KAAK,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC;IAC3C,CAAC;IA9BD;QADC,kBAAM,CAAC,6BAAoB,CAAC;QAAE,iBAAK,CAAC,4BAAoB,CAAC;;uEACmB;IAK7E;QADC,yBAAa,EAAE;;;;4DAGf;IAVQ,4BAA4B;QADxC,sBAAU,EAAE;OACA,4BAA4B,CAkCxC;IAAD,mCAAC;CAAA;AAlCY,oEAA4B;;;;;;;;;;;;;;ACrCzC;;;;;;;;;;;;;;kFAckF;;;AAGlF,sHAAoH;AACpH,uKAAyD;AACzD,yLAAoE;AACpE,4LAAsE;AAEtE,SAAS,4BAA4B,CAAC,MAA4B;IAC9D,IAAM,KAAK,GAAG,6BAAmB,CAAC,MAAM,CAAC,CAAC;IAE1C,KAAK,CAAC,MAAM,CAAC,kBAAQ,CAAC,CAAC;IACvB,KAAK,CAAC,IAAI,CAAC,sCAAiB,CAAC,CAAC,MAAM,EAAE,CAAC;IACvC,KAAK,CAAC,MAAM,CAAC,cAAI,CAAC,CAAC,SAAS,CAAC,sCAAiB,CAAC,CAAC;IAEhD,KAAK,CAAC,MAAM,CAAC,uBAAa,CAAC,CAAC;IAC5B,KAAK,CAAC,IAAI,CAAC,iDAAsB,CAAC,CAAC,MAAM,EAAE,CAAC;IAC5C,KAAK,CAAC,MAAM,CAAC,mBAAS,CAAC,CAAC,SAAS,CAAC,iDAAsB,CAAC,CAAC;IAE1D,KAAK,CAAC,IAAI,CAAC,mDAAuB,CAAC,CAAC,MAAM,EAAE,CAAC;IAC7C,KAAK,CAAC,MAAM,CAAC,oBAAU,CAAC,CAAC,SAAS,CAAC,mDAAuB,CAAC,CAAC;IAE5D,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,SAAgB,yBAAyB,CAAC,MAA4B;IAClE,OAAO,4BAA4B,CAAC,MAAM,CAAC,CAAC,GAAG,CAA0B,mDAAuB,CAAC,CAAC;AACtG,CAAC;AAFD,8DAEC;;;;;;;;;;;;;;ACzCD;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,oGAA+C;AAC/C,sHAAkE;AAClE,uKAAyE;AACzE,8JAAwE;AAExE,kHAA6C;AAC7C,6IAA8E;AAG9E;IAA4C,0CAAa;IAAzD;;IAoCA,CAAC;IA7BG,wCAAO,GAAP;QACI,OAAO,IAAI,CAAC,IAAI,CAAC;IACrB,CAAC;IAED,sBAAI,8CAAU;aAAd;YACI,OAAO,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAEK,wDAAuB,GAA7B,UAA8B,UAA8B,EAAE,GAAuB,EAAE,QAA8B;;;;;;wBACjH,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,SAAS,CAAC;wBAC3B,IAAI,CAAC,IAAI,CAAC,oBAAoB,GAAG,SAAS,CAAC;wBAC3C,IAAI,CAAC,WAAW,GAAG,UAAU,CAAC;6BAC1B,WAAU,IAAI,GAAG,IAAI,QAAQ,GAA7B,wBAA6B;wBACvB,oBAAoB,GAAG,IAAI,CAAC,4BAA4B,CAAC,GAAG,CAAC,UAAU,EAAE,IAAI,aAAG,CAAC,GAAG,CAAC,CAAC,CAAC;6BACzF,oBAAoB,EAApB,wBAAoB;wBACpB,IAAI,CAAC,IAAI,CAAC,oBAAoB,GAAG,oBAAoB,CAAC;wBAChD,kBAAkB,GAAG,IAAI,sCAAuB,EAAE,CAAC;wBAClC,qBAAM,oBAAoB,CAAC,iBAAiB,CAAC,GAAG,EAAE,QAAQ,EAAE,kBAAkB,CAAC,KAAK,CAAC;;wBAAtG,cAAc,GAAG,SAAqF;wBAC5G,IAAI,cAAc,EAAE;4BACV,QAAQ,GAAG,mCAAc,CAAC,MAAM,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;4BAClE,IAAI,CAAC,IAAI,CAAC,IAAI,GAAG,QAAQ,CAAC;yBAC7B;;;;;;KAGZ;IAES,2CAAU,GAApB,UAAqB,IAAc;QAC/B,oDAAoD;IACxD,CAAC;IA/B0B;QAA1B,kBAAM,CAAC,sCAAiB,CAAC;kCAA0B,sCAAiB;wDAAC;IAChC;QAArC,kBAAM,CAAC,oDAA4B,CAAC;kCAAkD,oDAA4B;gFAAC;IAL3G,sBAAsB;QADlC,sBAAU,EAAE;OACA,sBAAsB,CAoClC;IAAD,6BAAC;CAAA,CApC2C,uBAAa,GAoCxD;AApCY,wDAAsB;;;;;;;;;;;;;;ACzBnC;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,oGAA+C;AAC/C,sHAGiC;AACjC,qJAAuE;AACvE,uKAAkE;AAClE,yLAAoE;AACpE,sIAAwE;AACxE,kHAA6C;AAC7C,yJAAuF;AACvF,0HAA0D;AAC1D,8EAA+B;AAElB,4BAAoB,GAAG,yBAAyB,CAAC;AACjD,6BAAqB,GAAG,6BAA6B,CAAC;AACtD,6BAAqB,GAAG,iCAAiC,CAAC;AAGvE;IAA6C,2CAAU;IAEnD,iCACgC,KAAgB,EACH,KAA6B,EACzC,mBAAwC,EAC3B,aAA4B,EACtC,aAA4B;QALhE,YAOI,kBAAM,KAAK,EAAE,KAAK,EAAE,mBAAmB,CAAC,SAoB3C;QA1B+B,WAAK,GAAL,KAAK,CAAW;QACH,WAAK,GAAL,KAAK,CAAwB;QAE5B,mBAAa,GAAb,aAAa,CAAe;QACtC,mBAAa,GAAb,aAAa,CAAe;QAI5D,KAAI,CAAC,EAAE,GAAG,gCAAgB,CAAC;QAC3B,KAAI,CAAC,KAAK,CAAC,KAAK,GAAG,gBAAgB,CAAC;QACpC,KAAI,CAAC,KAAK,CAAC,OAAO,GAAG,gBAAgB,CAAC;QACtC,KAAI,CAAC,KAAK,CAAC,SAAS,GAAG,4BAA4B,CAAC;QACpD,KAAI,CAAC,KAAK,CAAC,QAAQ,GAAG,IAAI,CAAC;QAC3B,KAAI,CAAC,QAAQ,CAAC,4BAAoB,CAAC,CAAC;QACpC,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,kBAAkB,CAAC,mBAAS;YACvD,IAAM,IAAI,GAAG,SAAS,CAAC,CAAC,CAAC,CAAC;YAC1B,IAAI,IAAI,EAAE;gBACN,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;aAC/B;QACL,CAAC,CAAC,CAAC,CAAC;QACJ,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,KAAK,CAAC,UAAU,CAAC,UAAC,IAAc;YACrD,KAAI,CAAC,UAAU,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QACjC,CAAC,CAAC,CAAC,CAAC;QACJ,KAAI,CAAC,SAAS,CAAC,IAAI,CACf,KAAI,CAAC,aAAa,CAAC,WAAW,CAAC,cAAM,YAAI,CAAC,MAAM,EAAE,EAAb,CAAa,CAAC,CACtD,CAAC;;IACN,CAAC;IAED,iDAAe,GAAf,UAAgB,SAA+B,EAAE,UAA8B;QAC3E,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAC,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC,CAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC;IACzI,CAAC;IAES,sDAAoB,GAA9B,UAA+B,IAAc,EAAE,KAAgB;QAC3D,IAAM,UAAU,GAAG,iBAAM,oBAAoB,YAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC3D,IAAI,mCAAc,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACzB,UAAU,CAAC,IAAI,CAAC,6BAAqB,CAAC,CAAC;SAC1C;QACD,OAAO,UAAU,CAAC;IACtB,CAAC;IAES,sDAAoB,GAA9B,UAA+B,IAAc,EAAE,KAAgB;QAC3D,IAAM,YAAY,GAAG,iBAAM,oBAAoB,YAAC,IAAI,EAAE,KAAK,CAAC,CAAC;QAC7D,oBACO,YAAY,EACjB;IACN,CAAC;IAES,4CAAU,GAApB,UAAqB,KAAgB;QACjC,OAAO,iBAAM,UAAU,YAAC,KAAK,CAAC;eACvB,6BAAK,SAAS,EAAC,qBAAqB,qCAAqC,CAAC;IACrF,CAAC;IAES,+CAAa,GAAvB,UAAwB,IAAc,EAAE,KAAgB;QACpD,IAAI,mCAAc,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACzB,OAAO,IAAI,CAAC,yBAAyB,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1D;QACD,IAAI,+BAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACrB,OAAO,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SAClD;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IAES,2DAAyB,GAAnC,UAAoC,UAAsB;QACtD,IAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;QAC/C,IAAM,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC;QACrC,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,aAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9E,IAAM,SAAS,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAChF,OAAO,6BAAK,SAAS,EAAC,gBAAgB;YAClC,6BAAK,SAAS,EAAE,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,GAAQ;YAChF,6BAAK,SAAS,EAAC,wBAAwB;gBACnC,8BAAM,SAAS,EAAC,QAAQ,IACnB,MAAM,CACJ;gBACP,8BAAM,SAAS,EAAC,WAAW,IACtB,SAAS,CACP,CACL,CACJ,CAAC;IACX,CAAC;IAES,uDAAqB,GAA/B,UAAgC,MAAc;QAC1C,IAAM,UAAU,GAAG,MAAM,CAAC,gBAAgB,CAAC;QAC3C,IAAM,aAAa,GAAG,UAAU,CAAC,aAAa,CAAC;QAC/C,IAAM,MAAM,GAAG,UAAU,CAAC,UAAU,CAAC;QACrC,IAAM,cAAc,GAAG,MAAM,CAAC,UAAU,CAAC,MAAM,CAAC;QAChD,IAAM,QAAQ,GAAG,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,IAAI,aAAG,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC;QAC9E,IAAM,SAAS,GAAG,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,aAAa,GAAG,KAAK,GAAG,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC;QAChF,OAAO,6BAAK,SAAS,EAAC,gBAAgB;YAClC,6BAAK,SAAS,EAAE,cAAc,GAAG,IAAI,CAAC,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,GAAQ;YAChF,6BAAK,SAAS,EAAC,wBAAwB;gBACnC,8BAAM,SAAS,EAAC,QAAQ,IACnB,MAAM,CACJ;gBACP,8BAAM,SAAS,EAAC,gBAAgB,IAC3B,CAAC,cAAc,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,MAAI,cAAc,MAAG,CAAC,CAAC,CAAC,EAAE,CAC/C;gBACP,8BAAM,SAAS,EAAC,WAAW,IACtB,SAAS,CACP,CACL,CACJ,CAAC;IACX,CAAC;IAED,mCAAmC;IACzB,6CAAW,GAArB,UAAsB,UAAkB;QACpC,QAAQ,UAAU,EAAE;YAChB,KAAK,wCAAU,CAAC,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC;YACpC,KAAK,wCAAU,CAAC,MAAM,CAAC,CAAC,OAAO,QAAQ,CAAC;YACxC,KAAK,wCAAU,CAAC,SAAS,CAAC,CAAC,OAAO,WAAW,CAAC;YAC9C,KAAK,wCAAU,CAAC,OAAO,CAAC,CAAC,OAAO,SAAS,CAAC;YAC1C,KAAK,wCAAU,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACtC,KAAK,wCAAU,CAAC,MAAM,CAAC,CAAC,OAAO,QAAQ,CAAC;YACxC,KAAK,wCAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,UAAU,CAAC;YAC5C,KAAK,wCAAU,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACtC,KAAK,wCAAU,CAAC,WAAW,CAAC,CAAC,OAAO,aAAa,CAAC;YAClD,KAAK,wCAAU,CAAC,IAAI,CAAC,CAAC,OAAO,MAAM,CAAC;YACpC,KAAK,wCAAU,CAAC,SAAS,CAAC,CAAC,OAAO,WAAW,CAAC;YAC9C,KAAK,wCAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,UAAU,CAAC;YAC5C,KAAK,wCAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,UAAU,CAAC;YAC5C,KAAK,wCAAU,CAAC,QAAQ,CAAC,CAAC,OAAO,UAAU,CAAC;YAC5C,KAAK,wCAAU,CAAC,MAAM,CAAC,CAAC,OAAO,QAAQ,CAAC;YACxC,KAAK,wCAAU,CAAC,MAAM,CAAC,CAAC,OAAO,QAAQ,CAAC;YACxC,KAAK,wCAAU,CAAC,OAAO,CAAC,CAAC,OAAO,SAAS,CAAC;YAC1C,KAAK,wCAAU,CAAC,KAAK,CAAC,CAAC,OAAO,OAAO,CAAC;YACtC,OAAO,CAAC,CAAC,OAAO,SAAS,CAAC;SAC7B;IACL,CAAC;IAEO,4CAAU,GAAlB,UAAmB,IAAc,EAAE,SAAkB;QAEjD,IAAI,mCAAc,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACzB,IAAM,GAAG,GAAG,IAAI,CAAC,UAAU,CAAC;YAC5B,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,cAAc,CAAC,CAAC,CAAC,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,SAAS,CAAC,CAAC;SAC5H;QACD,IAAI,+BAAU,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE;YACrB,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,gBAAgB,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,EAAE,SAAS,CAAC,CAAC;SACtG;IACL,CAAC;IAEO,8CAAY,GAApB,UAAqB,GAAgB,EAAE,KAAY,EAAE,SAAkB;QACnE,IAAI,CAAC,aAAa,CAAC,IAAI,CACnB,IAAI,aAAG,CAAC,GAAG,CAAC,EAAE;YACV,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,UAAU;YACvC,SAAS,EAAE,KAAK;SACnB,CACJ,CAAC,IAAI,CAAC,sBAAY;YACf,IAAI,YAAY,CAAC,MAAM,YAAY,mBAAS,EAAE;gBAC1C,YAAY,CAAC,MAAM,CAAC,YAAY,CAAC,YAAY,CAAC,CAAC;aAClD;QACL,CAAC,CAAC,CAAC;IACP,CAAC;IAED,4CAAU,GAAV;QACI,IAAM,oBAAoB,GAAG,IAAI,CAAC,KAAK,CAAC,OAAO,EAAE,CAAC,oBAAoB,CAAC;QACvE,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,IAAI,oBAAoB,EAAE;YACzC,OAAO;gBACH,IAAI,EAAE,IAAI,CAAC,iBAAiB,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;gBAC7C,UAAU,EAAE,IAAI,CAAC,KAAK,CAAC,UAAU;aACpC,CAAC;SACL;aAAM;YACH,OAAO,EAAE,CAAC;SACb;IACL,CAAC;IAED,8CAAY,GAAZ,UAAa,QAAgB;QACzB,8DAA8D;QAC9D,IAAK,QAAgB,CAAC,IAAI,IAAK,QAAgB,CAAC,UAAU,EAAE;YACxD,8DAA8D;YAC9D,IAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,CAAE,QAAgB,CAAC,IAAI,CAAmB,CAAC;YAC/E,8DAA8D;YAC9D,IAAI,CAAC,KAAK,CAAC,uBAAuB,CAAE,QAAgB,CAAC,UAAU,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACxI;IACL,CAAC;IA/KQ,uBAAuB;QADnC,sBAAU,EAAE;QAIJ,6BAAM,CAAC,mBAAS,CAAC;QACjB,6BAAM,CAAC,iDAAsB,CAAC;QAC9B,6BAAM,CAAC,6BAAmB,CAAC;QAC3B,6BAAM,CAAC,8BAAa,CAAC;QACrB,6BAAM,CAAC,uBAAa,CAAC;iDAH0B,iDAAsB;YACpB,6BAAmB;YACZ,8BAAa;YACvB,uBAAa;OAPvD,uBAAuB,CAgLnC;IAAD,8BAAC;CAAA,CAhL4C,oBAAU,GAgLtD;AAhLY,0DAAuB;;;;;;;;;;;;;;ACnCpC;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAElF,oGAAuC;AACvC,sHAAwH;AAKxH,4FAAsC;AACtC,6IAA8E;AAG9E;IAAuC,qCAAQ;IAA/C;;IA2CA,CAAC;IAvCG,sBAAI,mDAAoB;aAIxB;YACI,OAAO,IAAI,CAAC,qBAAqB,CAAC;QACtC,CAAC;aAND,UAAyB,oBAAsD;YAC3E,IAAI,CAAC,qBAAqB,GAAG,oBAAoB,CAAC;QACtD,CAAC;;;OAAA;IAMK,2CAAe,GAArB,UAAsB,MAAyB;;;;;;wBAC3C,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE;4BAC5B,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;yBAC9B;wBACD,IAAI,MAAM,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE;4BAC5B,sBAAO,OAAO,CAAC,OAAO,UAAK,MAAM,CAAC,QAAQ,EAAE,EAAC;yBAChD;wBAED,IAAI,cAAc,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;4BAC3B,UAAU,GAAG,MAAM,CAAC,UAAU,CAAC;yBAClC;6BAAM,IAAI,UAAU,CAAC,EAAE,CAAC,MAAM,CAAC,EAAE;4BAC9B,UAAU,GAAG,MAAM,CAAC,MAAM,CAAC,gBAAgB,CAAC;yBAC/C;6BACG,UAAU,EAAV,wBAAU;wBACJ,kBAAkB,GAAG,IAAI,sCAAuB,EAAE,CAAC;wBACzC,qBAAM,IAAI,CAAC,oBAAoB,CAAC,UAAU,CAAC,UAAU,EAAE,kBAAkB,CAAC,KAAK,CAAC;;wBAA1F,OAAO,GAAG,SAAgF;wBAChG,IAAI,CAAC,OAAO,EAAE;4BACV,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;yBAC9B;wBACD,sBAAO,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,MAAM,CAAC,EAAC;4BAEzC,sBAAO,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,EAAC;;;;KAC9B;IAES,mCAAO,GAAjB,UAAkB,OAAiB,EAAE,MAAyB;QAA9D,iBAEC;QADG,OAAO,OAAO,CAAC,GAAG,CAAC,gBAAM,IAAI,YAAI,CAAC,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,EAA3B,CAA2B,CAAC,CAAC;IAC9D,CAAC;IAES,kCAAM,GAAhB,UAAiB,MAAc,EAAE,MAAqC;QAClE,OAAO,UAAU,CAAC,MAAM,CAAC,MAAM,EAAE,MAAkB,CAAC,CAAC;IACzD,CAAC;IA1CQ,iBAAiB;QAD7B,sBAAU,EAAE;OACA,iBAAiB,CA2C7B;IAAD,wBAAC;CAAA,CA3CsC,kBAAQ,GA2C9C;AA3CY,8CAAiB;AAiD9B,IAAiB,cAAc,CAgB9B;AAhBD,WAAiB,cAAc;IAC3B,SAAgB,EAAE,CAAC,IAA0B;QACzC,OAAO,CAAC,CAAC,IAAI,IAAI,YAAY,IAAI,IAAI,CAAC;IAC1C,CAAC;IAFe,iBAAE,KAEjB;IAED,SAAgB,MAAM,CAAC,UAAsB,EAAE,MAA4B;QACvE,IAAM,IAAI,GAAG,UAAU,CAAC,UAAU,CAAC;QACnC,IAAM,EAAE,GAAG,QAAQ,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;QACxC,OAAuB;YACnB,EAAE,MAAE,UAAU,cAAE,IAAI,QAAE,MAAM;YAC5B,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,KAAK;SAClB,CAAC;IACN,CAAC;IAVe,qBAAM,SAUrB;AACL,CAAC,EAhBgB,cAAc,GAAd,sBAAc,KAAd,sBAAc,QAgB9B;AAMD,IAAiB,UAAU,CAiB1B;AAjBD,WAAiB,UAAU;IACvB,SAAgB,EAAE,CAAC,IAA0B;QACzC,OAAO,CAAC,CAAC,IAAI,IAAI,QAAQ,IAAI,IAAI,CAAC;IACtC,CAAC;IAFe,aAAE,KAEjB;IAED,SAAgB,MAAM,CAAC,MAAc,EAAE,MAA4B;QAC/D,IAAM,gBAAgB,GAAG,MAAM,CAAC,gBAAgB,CAAC;QACjD,IAAM,IAAI,GAAG,gBAAgB,CAAC,UAAU,CAAC;QACzC,IAAM,EAAE,GAAG,QAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC;QAC9C,OAAmB;YACf,EAAE,MAAE,MAAM,UAAE,IAAI,QAAE,MAAM;YACxB,OAAO,EAAE,IAAI;YACb,QAAQ,EAAE,EAAE;YACZ,QAAQ,EAAE,KAAK;YACf,QAAQ,EAAE,KAAK;SAClB,CAAC;IACN,CAAC;IAXe,iBAAM,SAWrB;AACL,CAAC,EAjBgB,UAAU,GAAV,kBAAU,KAAV,kBAAU,QAiB1B;AAED,SAAS,QAAQ,CAAC,UAAsB,EAAE,MAA4B;IAClE,IAAM,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,EAAE,GAAG,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;IACjD,IAAM,EAAE,GAAG,QAAQ,GAAG,SAAG,CAAC,OAAO,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC,CAAC;IAC9D,OAAO,EAAE,CAAC;AACd,CAAC;;;;;;;;;;;;;;ACxHD;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;AAElF,mKAAqC;AACrC,+KAA2C;AAC3C,iLAA4C;AAC5C,uLAA+C;;;;;;;;;;;;;;ACnB/C;;;;;;;;;;;;;;kFAckF;;;AAIrE,wBAAgB,GAAG,eAAe,CAAC;;;;;;;;;;;;;;AClBhD;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;AAElF,oGAA+C;AAC/C,0HAAsE;AAItE;IAAA;IA8BA,CAAC;IA1BG,0CAAY,GAAZ;QACI,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7C,IAAI,CAAC,YAAY,EAAE;YACf,OAAO;SACV;QACD,IAAM,KAAK,GAAG,YAAY,CAAC,SAAS,CAAC;QACrC,IAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,QAAQ,EAAE,CAAC;QACxC,OAAiB,EAAE,KAAK,SAAE,GAAG,OAAE,CAAC;IACpC,CAAC;IAED,2CAAa,GAAb;QACI,IAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;QAC7C,IAAI,CAAC,YAAY,EAAE;YACf,OAAO;SACV;QACD,OAAO,YAAY,CAAC,QAAQ,CAAC,UAAU,CAAC;IAC5C,CAAC;IAES,8CAAgB,GAA1B;QACI,IAAM,YAAY,GAAG,IAAI,CAAC,aAAa,CAAC,aAAa,CAAC;QACtD,IAAI,YAAY,EAAE;YACd,OAAO,YAAY,CAAC,MAAM,CAAC;SAC9B;QACD,OAAO,SAAS,CAAC;IACrB,CAAC;IA1BsB;QAAtB,kBAAM,CAAC,uBAAa,CAAC;kCAAmC,uBAAa;8DAAC;IAF9D,mBAAmB;QAD/B,sBAAU,EAAE;OACA,mBAAmB,CA8B/B;IAAD,0BAAC;CAAA;AA9BY,kDAAmB;;;;;;;;;;;;;ACpBhC,cAAc,mBAAO,CAAC,kJAAkD;;AAExE,4CAA4C,QAAS;;AAErD;AACA;;;;AAIA,eAAe;;AAEf;AACA;;AAEA,aAAa,mBAAO,CAAC,kGAA+C;;AAEpE;;AAEA,GAAG,KAAU,EAAE,E;;;;;;;;;;;;ACnBf;;;;;;;;;;;;;;kFAckF;AAClF,2HAA2H;AAC3H;;;gGAGgG;AACnF;;;;;;;;;;;;;;AAEb,8HAAqC;AACrC,wHAAiC;AAcjC,SAAgB,kBAAkB;IAC9B,OAAO,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;AAC/B,CAAC;AAFD,gDAEC;AAMD,IAAM,QAAQ,GAAG,IAAI,CAAC;AACtB,IAAM,UAAU,GAAG,GAAG,CAAC;AACvB,IAAM,UAAU,GAAG,SAAS,CAAC,CAAQ,yBAAyB;AAC9D,IAAM,aAAa,GAAG,UAAU,CAAC,CAAI,kCAAkC;AACvE,IAAM,mBAAmB,GAAG,KAAK,CAAC;AAElC,SAAS,aAAa,CAAC,SAAiB;IACpC,QAAQ,SAAS,EAAE;QACf,KAAK,CAAC;YACF,OAAO,EAAE,CAAC;QACd,KAAK,CAAC;YACF,OAAU,aAAa,OAAI,CAAC,CAAC,2FAA2F;QAC5H;YACI,sGAAsG;YACtG,yEAAyE;YACzE,gFAAgF;YAChF,OAAO,QAAM,UAAU,SAAI,aAAa,SAAI,UAAU,SAAI,UAAU,GAAG,aAAa,SAAM,CAAC;KAClG;AACL,CAAC;AAED,SAAgB,cAAc,CAAC,OAAe,EAAE,SAAiB;IAC7D,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,EAAE,CAAC;KACb;IAED,IAAM,QAAQ,GAAa,EAAE,CAAC;IAE9B,IAAI,QAAQ,GAAG,KAAK,CAAC;IACrB,IAAI,UAAU,GAAG,KAAK,CAAC;IAEvB,IAAI,IAAY,CAAC;IACjB,IAAI,MAAM,GAAG,EAAE,CAAC;IAChB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;QACrC,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;QAElB,QAAQ,IAAI,EAAE;YACV,KAAK,SAAS;gBACV,IAAI,CAAC,QAAQ,IAAI,CAAC,UAAU,EAAE;oBAC1B,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;oBACtB,MAAM,GAAG,EAAE,CAAC;oBAEZ,SAAS;iBACZ;gBACD,MAAM;YACV,KAAK,GAAG;gBACJ,QAAQ,GAAG,IAAI,CAAC;gBAChB,MAAM;YACV,KAAK,GAAG;gBACJ,QAAQ,GAAG,KAAK,CAAC;gBACjB,MAAM;YACV,KAAK,GAAG;gBACJ,UAAU,GAAG,IAAI,CAAC;gBAClB,MAAM;YACV,KAAK,GAAG;gBACJ,UAAU,GAAG,KAAK,CAAC;gBACnB,MAAM;SACb;QAED,MAAM,IAAI,IAAI,CAAC;KAClB;IAED,OAAO;IACP,IAAI,MAAM,EAAE;QACR,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;KACzB;IAED,OAAO,QAAQ,CAAC;AACpB,CAAC;AA/CD,wCA+CC;AAED,SAAS,WAAW,CAAC,OAAe;IAChC,IAAI,CAAC,OAAO,EAAE;QACV,OAAO,EAAE,CAAC;KACb;IAED,IAAI,KAAK,GAAG,EAAE,CAAC;IAEf,8CAA8C;IAC9C,wCAAwC;IACxC,IAAI,QAAQ,GAAG,cAAc,CAAC,OAAO,EAAE,UAAU,CAAC,CAAC;IAEnD,4CAA4C;IAC5C,IAAI,QAAQ,CAAC,KAAK,CAAC,WAAC,IAAI,QAAC,KAAK,QAAQ,EAAd,CAAc,CAAC,EAAE;QACrC,KAAK,GAAG,IAAI,CAAC;KAChB;IAED,4BAA4B;IAC5B,oCAAoC;SAC/B;QACD,IAAI,4BAA0B,GAAG,KAAK,CAAC;QACvC,QAAQ,CAAC,OAAO,CAAC,UAAC,OAAO,EAAE,KAAK;YAE5B,sBAAsB;YACtB,IAAI,OAAO,KAAK,QAAQ,EAAE;gBAEtB,kEAAkE;gBAClE,IAAI,CAAC,4BAA0B,EAAE;oBAC7B,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;oBAC1B,4BAA0B,GAAG,IAAI,CAAC;iBACrC;gBAED,OAAO;aACV;YAED,SAAS;YACT,IAAI,QAAQ,GAAG,KAAK,CAAC;YACrB,IAAI,QAAQ,GAAG,EAAE,CAAC;YAElB,IAAI,UAAU,GAAG,KAAK,CAAC;YACvB,IAAI,UAAU,GAAG,EAAE,CAAC;YAEpB,IAAI,IAAY,CAAC;YACjB,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,OAAO,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE;gBACrC,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC;gBAElB,0BAA0B;gBAC1B,IAAI,IAAI,KAAK,GAAG,IAAI,QAAQ,EAAE;oBAC1B,QAAQ,IAAI,IAAI,CAAC;oBACjB,SAAS;iBACZ;gBAED,mBAAmB;gBACnB,IAAI,UAAU,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,4EAA4E,EAAE;oBAC1H,IAAI,GAAG,SAAQ,CAAC;oBAEhB,iBAAiB;oBACjB,IAAI,IAAI,KAAK,GAAG,EAAE;wBACd,GAAG,GAAG,IAAI,CAAC;qBACd;oBAED,2DAA2D;oBAC3D,oCAAoC;yBAC/B,IAAI,CAAC,IAAI,KAAK,GAAG,IAAI,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,UAAU,EAAE;wBACpD,GAAG,GAAG,GAAG,CAAC;qBACb;oBAED,6DAA6D;oBAC7D,uDAAuD;oBACvD,oCAAoC;yBAC/B,IAAI,IAAI,KAAK,UAAU,EAAE;wBAC1B,GAAG,GAAG,EAAE,CAAC;qBACZ;oBAED,6BAA6B;oBAC7B,oCAAoC;yBAC/B;wBACD,GAAG,GAAG,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;qBAC9C;oBAED,UAAU,IAAI,GAAG,CAAC;oBAClB,SAAS;iBACZ;gBAED,QAAQ,IAAI,EAAE;oBACV,KAAK,GAAG;wBACJ,QAAQ,GAAG,IAAI,CAAC;wBAChB,SAAS;oBAEb,KAAK,GAAG;wBACJ,UAAU,GAAG,IAAI,CAAC;wBAClB,SAAS;oBAEb,KAAK,GAAG;wBACJ,wCAAwC;wBACxC,IAAI,OAAO,GAAG,cAAc,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC;wBAE5C,kCAAkC;wBAClC,wCAAwC;wBACxC,IAAI,WAAW,GAAG,QAAM,OAAO,CAAC,GAAG,CAAC,WAAC,IAAI,kBAAW,CAAC,CAAC,CAAC,EAAd,CAAc,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,MAAG,CAAC;wBAEtE,KAAK,IAAI,WAAW,CAAC;wBAErB,QAAQ,GAAG,KAAK,CAAC;wBACjB,QAAQ,GAAG,EAAE,CAAC;wBAEd,MAAM;oBAEV,KAAK,GAAG;wBACJ,KAAK,IAAI,CAAC,GAAG,GAAG,UAAU,GAAG,GAAG,CAAC,CAAC;wBAElC,UAAU,GAAG,KAAK,CAAC;wBACnB,UAAU,GAAG,EAAE,CAAC;wBAEhB,MAAM;oBAEV,KAAK,GAAG;wBACJ,KAAK,IAAI,aAAa,CAAC,CAAC,mEAAmE;wBAC3F,SAAS;oBAEb,KAAK,GAAG;wBACJ,KAAK,IAAI,aAAa,CAAC,CAAC,CAAC,CAAC;wBAC1B,SAAS;oBAEb;wBACI,KAAK,IAAI,OAAO,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC;iBACrD;aACJ;YAED,2GAA2G;YAC3G,yGAAyG;YACzG,gDAAgD;YAChD,4GAA4G;YAC5G,4BAA4B;YAC5B,IAAI,KAAK,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,QAAQ,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,QAAQ,IAAI,KAAK,GAAG,CAAC,GAAG,QAAQ,CAAC,MAAM,CAAC,EAAE;gBAClG,KAAK,IAAI,UAAU,CAAC;aACvB;YAED,cAAc;YACd,4BAA0B,GAAG,KAAK,CAAC;QACvC,CAAC,CAAC,CAAC;KACN;IAED,OAAO,KAAK,CAAC;AACjB,CAAC;AAED,iFAAiF;AACjF,IAAM,EAAE,GAAG,sBAAsB,CAAC,CAAwC,iBAAiB;AAC3F,IAAM,EAAE,GAAG,uBAAuB,CAAC,CAA4C,eAAe;AAC9F,IAAM,EAAE,GAAG,0DAA0D,CAAC,CAAK,kEAAkE;AAC7I,IAAM,IAAI,GAAG,4EAA4E,CAAC,CAAK,sCAAsC;AACrI,IAAM,EAAE,GAAG,0BAA0B,CAAC,CAAwC,oBAAoB;AAClG,IAAM,EAAE,GAAG,8BAA8B,CAAC,CAAoC,iBAAiB;AA6B/F,IAAM,KAAK,GAAG,IAAI,GAAG,EAA+B,CAAC,CAAE,iFAAiF;AAExI,IAAM,KAAK,GAAG;IACV,OAAO,KAAK,CAAC;AACjB,CAAC,CAAC;AAEF,IAAM,IAAI,GAAG;IACT,OAAO,IAAK,CAAC;AACjB,CAAC,CAAC;AAEF,SAAS,YAAY,CAAC,IAA+B,EAAE,OAAqB;IACxE,IAAI,CAAC,IAAI,EAAE;QACP,OAAO,IAAI,CAAC;KACf;IAED,0BAA0B;IAC1B,IAAI,OAAe,CAAC;IACpB,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC1B,OAAO,GAAG,IAAI,CAAC,OAAO,CAAC;KAC1B;SAAM;QACH,OAAO,GAAG,IAAI,CAAC;KAClB;IAED,sBAAsB;IACtB,OAAO,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC;IAEzB,cAAc;IACd,IAAM,UAAU,GAAM,OAAO,SAAI,CAAC,CAAC,OAAO,CAAC,iBAAmB,CAAC;IAC/D,IAAI,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;IAC1C,IAAI,aAAa,EAAE;QACf,OAAO,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;KACnD;IAED,oBAAoB;IACpB,IAAI,KAAsB,CAAC;IAC3B,IAAI,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,oDAAoD;QACxE,IAAM,MAAI,GAAG,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC,sBAAsB;QACtD,aAAa,GAAG,UAAU,IAAI,EAAE,QAAQ;YACpC,OAAO,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,MAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAK,CAAC;QAClE,CAAC,CAAC;KACL;SAAM,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAE,EAAE,EAAE,uDAAuD;QACvH,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,CAAC,CAAC;KAC9C;SAAM,IAAI,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,EAAE,EAAE,gEAAgE;QAChI,aAAa,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;KAC7C;SAAM,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAE,EAAE,EAAE,6DAA6D;QAC7H,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,IAAI,CAAC,CAAC;KAClE;SAAM,IAAI,KAAK,GAAG,EAAE,CAAC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,OAAO,CAAC,CAAE,EAAE,EAAE,wDAAwD;QACxH,aAAa,GAAG,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,OAAO,EAAE,KAAK,CAAC,CAAC;KACzD;IAED,+BAA+B;IAC/B,oCAAoC;SAC/B;QACD,aAAa,GAAG,QAAQ,CAAC,OAAO,CAAC,CAAC;KACrC;IAED,QAAQ;IACR,KAAK,CAAC,GAAG,CAAC,UAAU,EAAE,aAAa,CAAC,CAAC;IAErC,OAAO,mBAAmB,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;AACpD,CAAC;AAED,SAAS,mBAAmB,CAAC,aAAkC,EAAE,IAA+B;IAC5F,IAAI,OAAO,IAAI,KAAK,QAAQ,EAAE;QAC1B,OAAO,aAAa,CAAC;KACxB;IAED,OAAO,UAAU,IAAI,EAAE,QAAQ;QAC3B,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,IAAI,EAAE,IAAI,CAAC,IAAI,CAAC,EAAE;YACzC,OAAO,IAAK,CAAC;SAChB;QAED,OAAO,aAAa,CAAC,KAAK,CAAC,SAAS,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,EAAE,QAAQ,CAAC,CAAC;IAC1F,CAAC,CAAC;AACN,CAAC;AAED,SAAS,iBAAiB,CAAC,OAAe,EAAE,OAAqB;IAC7D,OAAO,OAAO,CAAC,iBAAiB,IAAI,OAAO,CAAC,QAAQ,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,0CAA0C;AACtK,CAAC;AAED,uDAAuD;AACvD,SAAS,OAAO,CAAC,IAAY,EAAE,eAAuB;IAClD,IAAM,SAAS,GAAG,MAAI,IAAM,CAAC;IAC7B,IAAM,aAAa,GAAG,OAAK,IAAM,CAAC;IAClC,IAAM,aAAa,GAAwB,UAAU,IAAI,EAAE,QAAQ;QAC/D,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,IAAK,CAAC;SAChB;QACD,IAAI,QAAQ,EAAE;YACV,OAAO,QAAQ,KAAK,IAAI,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,IAAK,CAAC;SACtD;QACD,OAAO,IAAI,KAAK,IAAI,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC,IAAK,CAAC;IACjI,CAAC,CAAC;IACF,IAAM,SAAS,GAAG,CAAC,IAAI,CAAC,CAAC;IACzB,aAAa,CAAC,SAAS,GAAG,SAAS,CAAC;IACpC,aAAa,CAAC,QAAQ,GAAG,CAAC,eAAe,CAAC,CAAC;IAC3C,aAAa,CAAC,YAAY,GAAG,SAAS,CAAC;IACvC,OAAO,aAAa,CAAC;AACzB,CAAC;AAED,gEAAgE;AAChE,SAAS,OAAO,CAAC,OAAe,EAAE,OAAqB;IACnD,IAAM,cAAc,GAAG,wBAAwB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC;SAC1E,GAAG,CAAC,iBAAO,IAAI,mBAAY,CAAC,OAAO,EAAE,OAAO,CAAC,EAA9B,CAA8B,CAAC;SAC9C,MAAM,CAAC,iBAAO,IAAI,cAAO,KAAK,IAAI,EAAhB,CAAgB,CAAC,EAAE,OAAO,CAAC,CAAC;IACnD,IAAM,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC;IAChC,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC;KACf;IACD,IAAI,CAAC,KAAK,CAAC,EAAE;QACT,OAA4B,cAAc,CAAC,CAAC,CAAC,CAAC;KACjD;IACD,IAAM,aAAa,GAAwB,UAAU,IAAY,EAAE,QAAgB;QAC/E,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,GAAC,EAAE,CAAC,EAAE,EAAE;YACnD,IAA0B,cAAc,CAAC,CAAC,CAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;gBAC1D,OAAO,OAAO,CAAC;aAClB;SACJ;QACD,OAAO,IAAK,CAAC;IACjB,CAAC,CAAC;IACF,IAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,iBAAO,IAAI,QAAC,CAAuB,OAAQ,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;IACpG,gHAAgH;IAChH,IAAI,aAAa,EAAE;QACf,aAAa,CAAC,YAAY,GAAyB,aAAc,CAAC,YAAY,CAAC;KAClF;IACD,IAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAArD,CAAqD,EAAY,EAAE,CAAC,CAAC;IAC9H,IAAI,QAAQ,CAAC,MAAM,EAAE;QACjB,aAAa,CAAC,QAAQ,GAAG,QAAQ,CAAC;KACrC;IACD,OAAO,aAAa,CAAC;AACzB,CAAC;AAED,0GAA0G;AAC1G,SAAS,WAAW,CAAC,IAAY,EAAE,OAAe,EAAE,aAAsB;IACtE,IAAM,UAAU,GAAG,KAAK,CAAC,SAAS,KAAK,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,mBAAmB,EAAE,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;IAC7G,IAAM,aAAa,GAAG,KAAK,CAAC,SAAS,GAAG,UAAU,CAAC;IACnD,qCAAqC;IACrC,IAAM,aAAa,GAAwB,aAAa,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,QAAQ;QAC/E,OAAO,IAAI,IAAI,CAAC,IAAI,KAAK,UAAU,IAAI,OAAO,CAAC,QAAQ,CAAC,IAAI,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAK,CAAC;QAChG,qCAAqC;IACzC,CAAC,CAAC,CAAC,CAAC,UAAU,IAAI,EAAE,QAAQ;QACxB,OAAO,IAAI,IAAI,IAAI,KAAK,UAAU,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAK,CAAC;IACzD,CAAC,CAAC;IACF,aAAa,CAAC,QAAQ,GAAG,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,CAAC;IAChE,OAAO,aAAa,CAAC;AACzB,CAAC;AAED,SAAS,QAAQ,CAAC,OAAe;IAC7B,IAAI;QACA,IAAM,QAAM,GAAG,IAAI,MAAM,CAAC,MAAI,WAAW,CAAC,OAAO,CAAC,MAAG,CAAC,CAAC;QACvD,OAAO,UAAU,IAAY,EAAE,QAAgB;YAC3C,QAAM,CAAC,SAAS,GAAG,CAAC,CAAC,CAAC,iDAAiD;YACvE,OAAO,IAAI,IAAI,QAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAK,CAAC;QACvD,CAAC,CAAC;KACL;IAAC,OAAO,KAAK,EAAE;QACZ,OAAO,IAAI,CAAC;KACf;AACL,CAAC;AAYD,8DAA8D;AAC9D,SAAgB,KAAK,CAAC,IAA6C,EAAE,IAAY,EAAE,UAAsC;IACrH,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,EAAE;QAChB,OAAO,KAAK,CAAC;KAChB;IAED,OAAO,KAAK,CAAc,IAAI,CAAC,CAAC,IAAI,EAAE,SAAS,EAAE,UAAU,CAAC,CAAC;AACjE,CAAC;AAND,sBAMC;AAYD,8DAA8D;AAC9D,SAAgB,KAAK,CAAC,IAA6C,EAAE,OAA0B;IAA1B,sCAA0B;IAC3F,IAAI,CAAC,IAAI,EAAE;QACP,OAAO,KAAK,CAAC;KAChB;IAED,mBAAmB;IACnB,IAAI,OAAO,IAAI,KAAK,QAAQ,IAAI,iBAAiB,CAAC,IAAI,CAAC,EAAE;QACrD,IAAM,eAAa,GAAG,YAAY,CAAC,IAAiC,EAAE,OAAO,CAAC,CAAC;QAC/E,IAAI,eAAa,KAAK,IAAI,EAAE;YACxB,OAAO,KAAK,CAAC;SAChB;QACD,IAAM,aAAa,GAAG,UAAU,IAAY,EAAE,QAAgB;YAC1D,OAAO,CAAC,CAAC,eAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;QAC3C,CAAC,CAAC;QACF,IAAI,eAAa,CAAC,YAAY,EAAE;YAC5B,8DAA8D;YACnC,aAAc,CAAC,YAAY,GAAG,eAAa,CAAC,YAAY,CAAC;SACvF;QACD,IAAI,eAAa,CAAC,QAAQ,EAAE;YACxB,8DAA8D;YACnC,aAAc,CAAC,QAAQ,GAAG,eAAa,CAAC,QAAQ,CAAC;SAC/E;QACD,OAAO,aAAa,CAAC;KACxB;IAED,uBAAuB;IACvB,OAAO,gBAAgB,CAAc,IAAI,EAAE,OAAO,CAAC,CAAC;AACxD,CAAC;AA3BD,sBA2BC;AAED,SAAgB,mBAAmB,CAAC,UAAoC;IACpE,IAAI,CAAC,UAAU,EAAE;QACb,OAAO,SAAS,CAAC;KACpB;IAED,IAAI,QAAuC,CAAC;IAC5C,OAAO,UAAC,IAAY;QAChB,IAAI,CAAC,QAAQ,EAAE;YACX,QAAQ,GAAG,CAAC,UAAU,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;iBAC3C,IAAI,CAAC,cAAI,IAAI,WAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,EAA3B,CAA2B,CAAC,CAAC;SAClD;QACD,OAAO,QAAQ,CAAC,IAAI,CAAC,aAAG,IAAI,QAAC,CAAC,GAAG,CAAC,IAAI,CAAC,EAAX,CAAW,CAAC,CAAC;IAC7C,CAAC,CAAC;AACN,CAAC;AAbD,kDAaC;AAED,SAAgB,YAAY,CAAC,UAA2B;IACpD,IAAI,CAAC,UAAU,EAAE;QACb,OAAO,SAAS,CAAC;KACpB;IAED,IAAI,QAA8B,CAAC;IACnC,OAAO,UAAC,IAAY;QAChB,IAAI,CAAC,QAAQ,EAAE;YACX,IAAM,IAAI,GAAG,UAAU,EAAE,CAAC;YAC1B,QAAQ,GAAG,IAAI,CAAC,CAAC,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC;SAC1C;QACD,OAAO,CAAC,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC,CAAC;AACN,CAAC;AAbD,oCAaC;AAED,SAAS,SAAS,CAAC,IAAc;;IAC7B,IAAM,GAAG,GAAyB,EAAE,CAAC;;QACrC,KAAkB,0BAAI,uEAAE;YAAnB,IAAM,GAAG;YACV,GAAG,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;SACnB;;;;;;;;;IACD,OAAO,GAAG,CAAC;AACf,CAAC;AAED,8DAA8D;AAC9D,SAAgB,iBAAiB,CAAC,GAAQ;IACtC,IAAM,EAAE,GAAG,GAAuB,CAAC;IAEnC,OAAO,EAAE,IAAI,OAAO,EAAE,CAAC,IAAI,KAAK,QAAQ,IAAI,OAAO,EAAE,CAAC,OAAO,KAAK,QAAQ,IAAI,OAAO,EAAE,CAAC,cAAc,KAAK,UAAU,CAAC;AAC1H,CAAC;AAJD,8CAIC;AAED;;GAEG;AACH,SAAgB,YAAY,CAAC,UAAuB,EAAE,OAAsB;IACxE,qCAAqC;IACrC,IAAM,gBAAgB,GAAG,KAAK,CAAC,UAAU,EAAE,OAAO,CAAC,CAAC;IACpD,OAAO,UAAC,IAAY,EAAE,QAAiB,EAAE,UAAyD;QAC9F,IAAM,MAAM,GAAG,gBAAgB,CAAC,IAAI,EAAE,QAAQ,EAAE,UAAU,CAAC,CAAC;QAC5D,OAAO,MAAM,YAAY,OAAO,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;IACxE,CAAC,CAAC;AACN,CAAC;AAPD,oCAOC;AAED,SAAgB,gBAAgB,CAAC,mBAAqD;IAClF,OAA6B,mBAAoB,CAAC,YAAY,IAAI,EAAE,CAAC;AACzE,CAAC;AAFD,4CAEC;AAED,SAAgB,YAAY,CAAC,mBAAqD;IAC9E,OAA6B,mBAAoB,CAAC,QAAQ,IAAI,EAAE,CAAC;AACrE,CAAC;AAFD,oCAEC;AAED,SAAS,gBAAgB,CAAC,UAAuB,EAAE,OAAqB;IACpE,IAAM,cAAc,GAAG,wBAAwB,CAAC,MAAM,CAAC,mBAAmB,CAAC,UAAU,CAAC;SACjF,GAAG,CAAC,iBAAO,IAAI,6BAAsB,CAAC,OAAO,EAAE,UAAU,CAAC,OAAO,CAAC,EAAE,OAAO,CAAC,EAA7D,CAA6D,CAAC;SAC7E,MAAM,CAAC,iBAAO,IAAI,cAAO,KAAK,IAAI,EAAhB,CAAgB,CAAC,CAAC,CAAC;IAE1C,IAAM,CAAC,GAAG,cAAc,CAAC,MAAM,CAAC;IAChC,IAAI,CAAC,CAAC,EAAE;QACJ,OAAO,IAAI,CAAC;KACf;IAED,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,uBAAa,IAAI,OAA0B,aAAc,CAAC,gBAAiB,EAA1D,CAA0D,CAAC,EAAE;QACnG,IAAI,CAAC,KAAK,CAAC,EAAE;YACT,OAA4B,cAAc,CAAC,CAAC,CAAC,CAAC;SACjD;QAED,qCAAqC;QACrC,IAAM,kBAAgB,GAAwB,UAAU,IAAY,EAAE,QAAgB;YAClF,qCAAqC;YACrC,wDAAwD;YACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,GAAC,EAAE,CAAC,EAAE,EAAE;gBACnD,uBAAuB;gBACvB,IAAM,MAAM,GAAyB,cAAc,CAAC,CAAC,CAAE,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;gBACxE,IAAI,MAAM,EAAE;oBACR,OAAO,MAAM,CAAC;iBACjB;aACJ;YAED,OAAO,IAAK,CAAC;QACjB,CAAC,CAAC;QAEF,qCAAqC;QACrC,IAAM,eAAa,GAAG,cAAc,CAAC,IAAI,CAAC,iBAAO,IAAI,QAAC,CAAuB,OAAQ,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;QACpG,IAAI,eAAa,EAAE;YACf,kBAAgB,CAAC,YAAY,GAAyB,eAAc,CAAC,YAAY,CAAC;SACrF;QAED,qCAAqC;QACrC,IAAM,UAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAArD,CAAqD,EAAY,EAAE,CAAC,CAAC;QAC9H,IAAI,UAAQ,CAAC,MAAM,EAAE;YACjB,kBAAgB,CAAC,QAAQ,GAAG,UAAQ,CAAC;SACxC;QAED,OAAO,kBAAgB,CAAC;KAC3B;IAED,IAAM,gBAAgB,GAAwB,UAAU,IAAY,EAAE,QAAgB,EAAE,UAAyD;QAC7I,IAAI,IAAI,GAAW,IAAK,CAAC;QAEzB,qCAAqC;QACrC,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,GAAC,GAAG,cAAc,CAAC,MAAM,EAAE,CAAC,GAAG,GAAC,EAAE,CAAC,EAAE,EAAE;YACnD,uBAAuB;YACvB,IAAM,aAAa,GAA6B,cAAc,CAAC,CAAC,CAAE,CAAC;YACnE,IAAI,aAAa,CAAC,gBAAgB,IAAI,UAAU,EAAE;gBAC9C,IAAI,CAAC,QAAQ,EAAE;oBACX,QAAQ,GAAG,KAAK,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iBACnC;gBACD,IAAI,CAAC,IAAI,EAAE;oBACP,IAAI,GAAG,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,QAAQ,CAAC,MAAM,GAAG,KAAK,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,CAAC;iBAC3E;aACJ;YACD,IAAM,MAAM,GAAG,aAAa,CAAC,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,UAAW,CAAC,CAAC;YAChE,IAAI,MAAM,EAAE;gBACR,OAAO,MAAM,CAAC;aACjB;SACJ;QAED,OAAO,IAAK,CAAC;IACjB,CAAC,CAAC;IAEF,IAAM,aAAa,GAAG,cAAc,CAAC,IAAI,CAAC,iBAAO,IAAI,QAAC,CAAuB,OAAQ,CAAC,YAAY,EAA7C,CAA6C,CAAC,CAAC;IACpG,IAAI,aAAa,EAAE;QACf,gBAAgB,CAAC,YAAY,GAAyB,aAAc,CAAC,YAAY,CAAC;KACrF;IAED,IAAM,QAAQ,GAAG,cAAc,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,cAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,GAAG,CAAC,MAAM,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,GAAG,EAArD,CAAqD,EAAY,EAAE,CAAC,CAAC;IAC9H,IAAI,QAAQ,CAAC,MAAM,EAAE;QACjB,gBAAgB,CAAC,QAAQ,GAAG,QAAQ,CAAC;KACxC;IAED,OAAO,gBAAgB,CAAC;AAC5B,CAAC;AAED,8DAA8D;AAC9D,SAAS,sBAAsB,CAAC,OAAe,EAAE,KAAU,EAAE,OAAqB;IAC9E,IAAI,KAAK,KAAK,KAAK,EAAE;QACjB,OAAO,IAAI,CAAC,CAAC,sBAAsB;KACtC;IAED,IAAM,aAAa,GAAG,YAAY,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC;IACrD,IAAI,aAAa,KAAK,IAAI,EAAE;QACxB,OAAO,IAAI,CAAC;KACf;IAED,kCAAkC;IAClC,IAAI,OAAO,KAAK,KAAK,SAAS,EAAE;QAC5B,OAAO,aAAa,CAAC;KACxB;IAED,wCAAwC;IACxC,IAAI,KAAK,EAAE;QACP,IAAM,MAAI,GAAmB,KAAM,CAAC,IAAI,CAAC;QACzC,IAAI,OAAO,MAAI,KAAK,QAAQ,EAAE;YAC1B,IAAM,MAAM,GAA4B,UAAC,IAAY,EAAE,QAAgB,EAAE,IAAY,EAAE,UAAwD;gBAC3I,IAAI,CAAC,UAAU,IAAI,CAAC,aAAa,CAAC,IAAI,EAAE,QAAQ,CAAC,EAAE;oBAC/C,OAAO,IAAK,CAAC;iBAChB;gBAED,IAAM,aAAa,GAAG,MAAI,CAAC,OAAO,CAAC,aAAa,EAAE,IAAI,CAAC,CAAC;gBACxD,IAAM,OAAO,GAAG,UAAU,CAAC,aAAa,CAAC,CAAC;gBAC1C,OAAO,OAAO,YAAY,OAAO,CAAC,CAAC;oBAC/B,OAAO,CAAC,IAAI,CAAC,WAAC,IAAI,QAAC,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAK,EAAnB,CAAmB,CAAC,CAAC,CAAC;oBACxC,OAAO,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAK,CAAC;YAClC,CAAC,CAAC;YACF,MAAM,CAAC,gBAAgB,GAAG,IAAI,CAAC;YAC/B,OAAO,MAAM,CAAC;SACjB;KACJ;IAED,yBAAyB;IACzB,OAAO,aAAa,CAAC;AACzB,CAAC;AAED,SAAS,wBAAwB,CAAC,cAAiE,EAAE,MAAe;IAChH,IAAM,gBAAgB,GAAG,cAAc,CAAC,MAAM,CAAC,uBAAa,IAAI,QAAC,CAAuB,aAAc,CAAC,SAAS,EAAhD,CAAgD,CAAC,CAAC;IAClH,IAAI,gBAAgB,CAAC,MAAM,GAAG,CAAC,EAAE;QAC7B,OAAO,cAAc,CAAC;KACzB;IAED,IAAM,SAAS,GAAG,gBAAgB,CAAC,MAAM,CAAW,UAAC,GAAG,EAAE,OAAO,IAAK,UAAG,CAAC,MAAM,CAAuB,OAAQ,CAAC,SAAU,CAAC,EAArD,CAAqD,EAAE,EAAE,CAAC,CAAC;IACjI,IAAI,QAAkB,CAAC;IACvB,IAAI,MAAM,EAAE;QACR,QAAQ,GAAG,EAAE,CAAC;QACd,wDAAwD;QACxD,KAAK,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;YAC9C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACzB;KACJ;SAAM;QACH,QAAQ,GAAG,gBAAgB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,OAAO,IAAK,UAAG,CAAC,MAAM,CAAuB,OAAQ,CAAC,QAAS,CAAC,EAApD,CAAoD,EAAY,EAAE,CAAC,CAAC;KAC5H;IACD,IAAM,SAAS,GAAwB,UAAU,IAAI,EAAE,QAAQ;QAC3D,IAAI,CAAC,IAAI,EAAE;YACP,OAAO,IAAK,CAAC;SAChB;QACD,IAAI,CAAC,QAAQ,EAAE;YACX,IAAI,CAAC,SAAQ,CAAC;YACd,KAAK,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC,GAAG,CAAC,EAAE,CAAC,EAAE,EAAE;gBAC9B,IAAM,EAAE,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;gBAClC,IAAI,EAAE,mBAAmB,IAAI,EAAE,uBAAuB,EAAE;oBACpD,MAAM;iBACT;aACJ;YACD,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;SAC7B;QACD,IAAM,KAAK,GAAG,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC;QAC1C,OAAO,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAK,CAAC;IAClD,CAAC,CAAC;IACF,SAAS,CAAC,SAAS,GAAG,SAAS,CAAC;IAChC,SAAS,CAAC,QAAQ,GAAG,QAAQ,CAAC;IAC9B,SAAS,CAAC,YAAY,GAAG,SAAS,CAAC;IAEnC,IAAM,kBAAkB,GAAG,cAAc,CAAC,MAAM,CAAC,uBAAa,IAAI,QAAuB,aAAc,CAAC,SAAS,EAA/C,CAA+C,CAAC,CAAC;IACnH,kBAAkB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;IACnC,OAAO,kBAAkB,CAAC;AAC9B,CAAC;;;;;;;;;;;;;;ACpuBD;;;;;;;;;;;;;;kFAckF;;;;;;;;;;;;AAElF,2JAAoC;AACpC,iIAAuB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjBvB;;;;;;;;;;;;;;kFAckF;AAClF,uHAAmD;AAgBnD,SAAgB,KAAK,CAAC,QAAsC,EAAE,SAAiB,EAAE,IAAY,EAAE,iBAAyB,EAAE,uBAAgC;;IAEtJ,IAAI,KAAK,CAAC,OAAO,CAAC,QAAQ,CAAC,EAAE;QACzB,IAAI,GAAG,GAAG,CAAC,CAAC;;YACZ,KAAqB,kCAAQ,2FAAE;gBAA1B,IAAM,MAAM;gBACb,IAAM,KAAK,GAAG,KAAK,CAAC,MAAM,EAAE,SAAS,EAAE,IAAI,EAAE,iBAAiB,EAAE,uBAAuB,CAAC,CAAC;gBACzF,IAAI,KAAK,KAAK,EAAE,EAAE;oBACd,OAAO,KAAK,CAAC;iBAChB;gBACD,IAAI,KAAK,GAAG,GAAG,EAAE;oBACb,GAAG,GAAG,KAAK,CAAC;iBACf;aACJ;;;;;;;;;QACD,OAAO,GAAG,CAAC;KAEd;SAAM,IAAI,OAAO,QAAQ,KAAK,QAAQ,EAAE;QAErC,IAAI,CAAC,uBAAuB,EAAE;YAC1B,OAAO,CAAC,CAAC;SACZ;QAED,IAAI,QAAQ,KAAK,GAAG,EAAE;YAClB,OAAO,CAAC,CAAC;SACZ;aAAM,IAAI,QAAQ,KAAK,iBAAiB,EAAE;YACvC,OAAO,EAAE,CAAC;SACb;aAAM;YACH,OAAO,CAAC,CAAC;SACZ;KAEJ;SAAM,IAAI,QAAQ,EAAE;QACT,YAAQ,GAA4C,QAAQ,SAApD,EAAE,OAAO,GAAmC,QAAQ,QAA3C,EAAE,MAAM,GAA2B,QAAQ,OAAnC,EAAE,oBAAoB,GAAK,QAAQ,qBAAb,CAAc;QAErE,IAAI,CAAC,uBAAuB,IAAI,CAAC,oBAAoB,EAAE;YACnD,OAAO,CAAC,CAAC;SACZ;QAED,IAAI,MAAM,GAAG,CAAC,CAAC;QAEf,IAAI,MAAM,EAAE;YACR,IAAI,MAAM,KAAK,SAAS,EAAE;gBACtB,MAAM,GAAG,EAAE,CAAC;aACf;iBAAM,IAAI,MAAM,KAAK,GAAG,EAAE;gBACvB,MAAM,GAAG,CAAC,CAAC;aACd;iBAAM;gBACH,OAAO,CAAC,CAAC;aACZ;SACJ;QAED,IAAI,QAAQ,EAAE;YACV,IAAI,QAAQ,KAAK,iBAAiB,EAAE;gBAChC,MAAM,GAAG,EAAE,CAAC;aACf;iBAAM,IAAI,QAAQ,KAAK,GAAG,EAAE;gBACzB,MAAM,GAAG,IAAI,CAAC,GAAG,CAAC,MAAM,EAAE,CAAC,CAAC,CAAC;aAChC;iBAAM;gBACH,OAAO,CAAC,CAAC;aACZ;SACJ;QAED,IAAI,OAAO,EAAE;YACT,IAAI,OAAO,KAAK,IAAI,IAAI,YAAgB,CAAC,OAAO,EAAE,IAAI,CAAC,EAAE;gBACrD,MAAM,GAAG,EAAE,CAAC;aACf;iBAAM;gBACH,OAAO,CAAC,CAAC;aACZ;SACJ;QAED,OAAO,MAAM,CAAC;KAEjB;SAAM;QACH,OAAO,CAAC,CAAC;KACZ;AACL,CAAC;AAvED,sBAuEC;;;;;;;;;;;;ACtGD,2BAA2B,mBAAO,CAAC,4FAA2C;AAC9E;;;AAGA;AACA,cAAc,QAAS,u2BAAu2B,4CAA4C,GAAG,8CAA8C,kBAAkB,GAAG,qDAAqD,qBAAqB,yBAAyB,GAAG,8CAA8C,oBAAoB,GAAG,8CAA8C,+BAA+B,GAAG,kDAAkD,wBAAwB,GAAG,sDAAsD,yBAAyB,GAAG,8DAA8D,2CAA2C,GAAG,yDAAyD,gDAAgD,GAAG,sCAAsC,4BAA4B,sDAAsD,0BAA0B,uBAAuB,8BAA8B,GAAG;;AAE5yD","file":"47.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { MenuModelRegistry, Command, CommandRegistry } from '@theia/core/lib/common';\nimport { AbstractViewContribution, OpenViewArguments, KeybindingRegistry } from '@theia/core/lib/browser';\nimport { EDITOR_CONTEXT_MENU } from '@theia/editor/lib/browser';\nimport { CallHierarchyTreeWidget } from './callhierarchy-tree/callhierarchy-tree-widget';\nimport { CALLHIERARCHY_ID } from './callhierarchy';\nimport { CurrentEditorAccess } from './current-editor-access';\nimport { CallHierarchyServiceProvider } from './callhierarchy-service';\nimport URI from '@theia/core/lib/common/uri';\n\nexport const CALL_HIERARCHY_TOGGLE_COMMAND_ID = 'callhierarchy:toggle';\nexport const CALL_HIERARCHY_LABEL = 'Call Hierarchy';\n\nexport namespace CallHierarchyCommands {\n    export const OPEN: Command = {\n        id: 'callhierarchy:open',\n        label: 'Open Call Hierarchy'\n    };\n}\n\n@injectable()\nexport class CallHierarchyContribution extends AbstractViewContribution<CallHierarchyTreeWidget> {\n\n    @inject(CurrentEditorAccess) protected readonly editorAccess: CurrentEditorAccess;\n    @inject(CallHierarchyServiceProvider) protected readonly callHierarchyServiceProvider: CallHierarchyServiceProvider;\n    constructor() {\n        super({\n            widgetId: CALLHIERARCHY_ID,\n            widgetName: CALL_HIERARCHY_LABEL,\n            defaultWidgetOptions: {\n                area: 'bottom'\n            },\n            toggleCommandId: CALL_HIERARCHY_TOGGLE_COMMAND_ID,\n            toggleKeybinding: 'ctrlcmd+shift+f1'\n        });\n    }\n\n    protected isCallHierarchyAvailable(): boolean {\n        const selection = this.editorAccess.getSelection();\n        const languageId = this.editorAccess.getLanguageId();\n        return !!selection && !!languageId && !!this.callHierarchyServiceProvider.get(languageId, new URI(selection.uri));\n    }\n\n    async openView(args?: Partial<OpenViewArguments>): Promise<CallHierarchyTreeWidget> {\n        const widget = await super.openView(args);\n        const selection = this.editorAccess.getSelection();\n        const languageId = this.editorAccess.getLanguageId();\n        widget.initializeModel(selection, languageId);\n        return widget;\n    }\n\n    registerCommands(commands: CommandRegistry): void {\n        commands.registerCommand(CallHierarchyCommands.OPEN, {\n            execute: () => this.openView({\n                toggle: false,\n                activate: true\n            }),\n            isEnabled: this.isCallHierarchyAvailable.bind(this)\n        });\n        super.registerCommands(commands);\n    }\n\n    registerMenus(menus: MenuModelRegistry): void {\n        const menuPath = [...EDITOR_CONTEXT_MENU, 'navigation'];\n        menus.registerMenuAction(menuPath, {\n            commandId: CallHierarchyCommands.OPEN.id,\n            label: CALL_HIERARCHY_LABEL\n        });\n        super.registerMenus(menus);\n    }\n\n    registerKeybindings(keybindings: KeybindingRegistry): void {\n        super.registerKeybindings(keybindings);\n        keybindings.registerKeybinding({\n            command: CallHierarchyCommands.OPEN.id,\n            keybinding: 'ctrlcmd+f1'\n        });\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { CallHierarchyContribution } from './callhierarchy-contribution';\nimport { bindContributionProvider } from '@theia/core/lib/common';\nimport { CallHierarchyService, CallHierarchyServiceProvider } from './callhierarchy-service';\nimport { WidgetFactory, bindViewContribution } from '@theia/core/lib/browser';\nimport { CALLHIERARCHY_ID } from './callhierarchy';\nimport { createHierarchyTreeWidget } from './callhierarchy-tree';\nimport { CurrentEditorAccess } from './current-editor-access';\n\nimport { ContainerModule } from 'inversify';\n\nimport '../../src/browser/style/index.css';\n\nexport default new ContainerModule(bind => {\n    bind(CurrentEditorAccess).toSelf().inSingletonScope();\n\n    bindContributionProvider(bind, CallHierarchyService);\n    bind(CallHierarchyServiceProvider).to(CallHierarchyServiceProvider).inSingletonScope();\n\n    bindViewContribution(bind, CallHierarchyContribution);\n\n    bind(WidgetFactory).toDynamicValue(context => ({\n        id: CALLHIERARCHY_ID,\n        createWidget: () => createHierarchyTreeWidget(context.container)\n    }));\n});\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject, named, postConstruct } from 'inversify';\nimport { Position, DocumentUri } from 'vscode-languageserver-types';\nimport { Definition, Caller, Callee } from './callhierarchy';\nimport { ContributionProvider } from '@theia/core/lib/common';\nimport { LanguageSelector, score } from '@theia/languages/lib/common/language-selector';\nimport URI from '@theia/core/lib/common/uri';\nimport { Disposable } from '@theia/core/lib/common';\nimport { CancellationToken } from '@theia/core';\n\nexport const CallHierarchyService = Symbol('CallHierarchyService');\n\nexport interface CallHierarchyService {\n\n    readonly selector: LanguageSelector;\n\n    getRootDefinition(uri: DocumentUri, position: Position, cancellationToken: CancellationToken): Promise<Definition | undefined>\n    getCallers(definition: Definition, cancellationToken: CancellationToken): Promise<Caller[] | undefined>\n    getCallees?(definition: Definition, cancellationToken: CancellationToken): Promise<Callee[] | undefined>\n}\n\n@injectable()\nexport class CallHierarchyServiceProvider {\n\n    @inject(ContributionProvider) @named(CallHierarchyService)\n    protected readonly contributions: ContributionProvider<CallHierarchyService>;\n\n    private services: CallHierarchyService[] = [];\n\n    @postConstruct()\n    init(): void {\n        this.services = this.services.concat(this.contributions.getContributions());\n    }\n\n    get(languageId: string, uri: URI): CallHierarchyService | undefined {\n\n        return this.services.sort(\n            (left, right) =>\n                score(right.selector, uri.scheme, uri.path.toString(), languageId, true) - score(left.selector, uri.scheme, uri.path.toString(), languageId, true))[0];\n    }\n\n    add(service: CallHierarchyService): Disposable {\n        this.services.push(service);\n        const that = this;\n        return {\n            dispose: () => {\n                that.remove(service);\n            }\n        };\n    }\n\n    private remove(service: CallHierarchyService): boolean {\n        const length = this.services.length;\n        this.services = this.services.filter(value => value !== service);\n        return length !== this.services.length;\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { interfaces, Container } from 'inversify';\nimport { createTreeContainer, Tree, TreeImpl, TreeModel, TreeModelImpl, TreeWidget } from '@theia/core/lib/browser';\nimport { CallHierarchyTree } from './callhierarchy-tree';\nimport { CallHierarchyTreeModel } from './callhierarchy-tree-model';\nimport { CallHierarchyTreeWidget } from './callhierarchy-tree-widget';\n\nfunction createHierarchyTreeContainer(parent: interfaces.Container): Container {\n    const child = createTreeContainer(parent);\n\n    child.unbind(TreeImpl);\n    child.bind(CallHierarchyTree).toSelf();\n    child.rebind(Tree).toService(CallHierarchyTree);\n\n    child.unbind(TreeModelImpl);\n    child.bind(CallHierarchyTreeModel).toSelf();\n    child.rebind(TreeModel).toService(CallHierarchyTreeModel);\n\n    child.bind(CallHierarchyTreeWidget).toSelf();\n    child.rebind(TreeWidget).toService(CallHierarchyTreeWidget);\n\n    return child;\n}\n\nexport function createHierarchyTreeWidget(parent: interfaces.Container): CallHierarchyTreeWidget {\n    return createHierarchyTreeContainer(parent).get<CallHierarchyTreeWidget>(CallHierarchyTreeWidget);\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { TreeModelImpl, TreeNode } from '@theia/core/lib/browser';\nimport { CallHierarchyTree, DefinitionNode } from './callhierarchy-tree';\nimport { CallHierarchyServiceProvider } from '../callhierarchy-service';\nimport { Position } from 'vscode-languageserver-types';\nimport URI from '@theia/core/lib/common/uri';\nimport { CancellationTokenSource } from '@theia/core/lib/common/cancellation';\n\n@injectable()\nexport class CallHierarchyTreeModel extends TreeModelImpl {\n\n    private _languageId: string | undefined;\n\n    @inject(CallHierarchyTree) protected readonly tree: CallHierarchyTree;\n    @inject(CallHierarchyServiceProvider) protected readonly callHierarchyServiceProvider: CallHierarchyServiceProvider;\n\n    getTree(): CallHierarchyTree {\n        return this.tree;\n    }\n\n    get languageId(): string | undefined {\n        return this._languageId;\n    }\n\n    async initializeCallHierarchy(languageId: string | undefined, uri: string | undefined, position: Position | undefined): Promise<void> {\n        this.tree.root = undefined;\n        this.tree.callHierarchyService = undefined;\n        this._languageId = languageId;\n        if (languageId && uri && position) {\n            const callHierarchyService = this.callHierarchyServiceProvider.get(languageId, new URI(uri));\n            if (callHierarchyService) {\n                this.tree.callHierarchyService = callHierarchyService;\n                const cancellationSource = new CancellationTokenSource();\n                const rootDefinition = await callHierarchyService.getRootDefinition(uri, position, cancellationSource.token);\n                if (rootDefinition) {\n                    const rootNode = DefinitionNode.create(rootDefinition, undefined);\n                    this.tree.root = rootNode;\n                }\n            }\n        }\n    }\n\n    protected doOpenNode(node: TreeNode): void {\n        // do nothing (in particular do not expand the node)\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport {\n    ContextMenuRenderer, TreeWidget, NodeProps, TreeProps, TreeNode,\n    TreeModel, DockPanel\n} from '@theia/core/lib/browser';\nimport { LabelProvider } from '@theia/core/lib/browser/label-provider';\nimport { DefinitionNode, CallerNode } from './callhierarchy-tree';\nimport { CallHierarchyTreeModel } from './callhierarchy-tree-model';\nimport { CALLHIERARCHY_ID, Definition, Caller } from '../callhierarchy';\nimport URI from '@theia/core/lib/common/uri';\nimport { Location, Range, SymbolKind, DocumentUri } from 'vscode-languageserver-types';\nimport { EditorManager } from '@theia/editor/lib/browser';\nimport * as React from 'react';\n\nexport const HIERARCHY_TREE_CLASS = 'theia-CallHierarchyTree';\nexport const DEFINITION_NODE_CLASS = 'theia-CallHierarchyTreeNode';\nexport const DEFINITION_ICON_CLASS = 'theia-CallHierarchyTreeNodeIcon';\n\n@injectable()\nexport class CallHierarchyTreeWidget extends TreeWidget {\n\n    constructor(\n        @inject(TreeProps) readonly props: TreeProps,\n        @inject(CallHierarchyTreeModel) readonly model: CallHierarchyTreeModel,\n        @inject(ContextMenuRenderer) contextMenuRenderer: ContextMenuRenderer,\n        @inject(LabelProvider) protected readonly labelProvider: LabelProvider,\n        @inject(EditorManager) readonly editorManager: EditorManager\n    ) {\n        super(props, model, contextMenuRenderer);\n\n        this.id = CALLHIERARCHY_ID;\n        this.title.label = 'Call Hierarchy';\n        this.title.caption = 'Call Hierarchy';\n        this.title.iconClass = 'fa call-hierarchy-tab-icon';\n        this.title.closable = true;\n        this.addClass(HIERARCHY_TREE_CLASS);\n        this.toDispose.push(this.model.onSelectionChanged(selection => {\n            const node = selection[0];\n            if (node) {\n                this.openEditor(node, true);\n            }\n        }));\n        this.toDispose.push(this.model.onOpenNode((node: TreeNode) => {\n            this.openEditor(node, false);\n        }));\n        this.toDispose.push(\n            this.labelProvider.onDidChange(() => this.update())\n        );\n    }\n\n    initializeModel(selection: Location | undefined, languageId: string | undefined): void {\n        this.model.initializeCallHierarchy(languageId, selection ? selection.uri : undefined, selection ? selection.range.start : undefined);\n    }\n\n    protected createNodeClassNames(node: TreeNode, props: NodeProps): string[] {\n        const classNames = super.createNodeClassNames(node, props);\n        if (DefinitionNode.is(node)) {\n            classNames.push(DEFINITION_NODE_CLASS);\n        }\n        return classNames;\n    }\n\n    protected createNodeAttributes(node: TreeNode, props: NodeProps): React.Attributes & React.HTMLAttributes<HTMLElement> {\n        const elementAttrs = super.createNodeAttributes(node, props);\n        return {\n            ...elementAttrs,\n        };\n    }\n\n    protected renderTree(model: TreeModel): React.ReactNode {\n        return super.renderTree(model)\n            || <div className='theia-widget-noInfo'>No callers have been detected.</div>;\n    }\n\n    protected renderCaption(node: TreeNode, props: NodeProps): React.ReactNode {\n        if (DefinitionNode.is(node)) {\n            return this.decorateDefinitionCaption(node.definition);\n        }\n        if (CallerNode.is(node)) {\n            return this.decorateCallerCaption(node.caller);\n        }\n        return 'caption';\n    }\n\n    protected decorateDefinitionCaption(definition: Definition): React.ReactNode {\n        const containerName = definition.containerName;\n        const symbol = definition.symbolName;\n        const location = this.labelProvider.getName(new URI(definition.location.uri));\n        const container = (containerName) ? containerName + ' — ' + location : location;\n        return <div className='definitionNode'>\n            <div className={'symbol-icon ' + this.toIconClass(definition.symbolKind)}></div>\n            <div className='definitionNode-content'>\n                <span className='symbol'>\n                    {symbol}\n                </span>\n                <span className='container'>\n                    {container}\n                </span>\n            </div>\n        </div>;\n    }\n\n    protected decorateCallerCaption(caller: Caller): React.ReactNode {\n        const definition = caller.callerDefinition;\n        const containerName = definition.containerName;\n        const symbol = definition.symbolName;\n        const referenceCount = caller.references.length;\n        const location = this.labelProvider.getName(new URI(definition.location.uri));\n        const container = (containerName) ? containerName + ' — ' + location : location;\n        return <div className='definitionNode'>\n            <div className={'symbol-icon ' + this.toIconClass(definition.symbolKind)}></div>\n            <div className='definitionNode-content'>\n                <span className='symbol'>\n                    {symbol}\n                </span>\n                <span className='referenceCount'>\n                    {(referenceCount > 1) ? `[${referenceCount}]` : ''}\n                </span>\n                <span className='container'>\n                    {container}\n                </span>\n            </div>\n        </div>;\n    }\n\n    // tslint:disable-next-line:typedef\n    protected toIconClass(symbolKind: number) {\n        switch (symbolKind) {\n            case SymbolKind.File: return 'file';\n            case SymbolKind.Module: return 'module';\n            case SymbolKind.Namespace: return 'namespace';\n            case SymbolKind.Package: return 'package';\n            case SymbolKind.Class: return 'class';\n            case SymbolKind.Method: return 'method';\n            case SymbolKind.Property: return 'property';\n            case SymbolKind.Field: return 'field';\n            case SymbolKind.Constructor: return 'constructor';\n            case SymbolKind.Enum: return 'enum';\n            case SymbolKind.Interface: return 'interface';\n            case SymbolKind.Function: return 'function';\n            case SymbolKind.Variable: return 'variable';\n            case SymbolKind.Constant: return 'constant';\n            case SymbolKind.String: return 'string';\n            case SymbolKind.Number: return 'number';\n            case SymbolKind.Boolean: return 'boolean';\n            case SymbolKind.Array: return 'array';\n            default: return 'unknown';\n        }\n    }\n\n    private openEditor(node: TreeNode, keepFocus: boolean): void {\n\n        if (DefinitionNode.is(node)) {\n            const def = node.definition;\n            this.doOpenEditor(node.definition.location.uri, def.selectionRange ? def.selectionRange : def.location.range, keepFocus);\n        }\n        if (CallerNode.is(node)) {\n            this.doOpenEditor(node.caller.callerDefinition.location.uri, node.caller.references[0], keepFocus);\n        }\n    }\n\n    private doOpenEditor(uri: DocumentUri, range: Range, keepFocus: boolean): void {\n        this.editorManager.open(\n            new URI(uri), {\n                mode: keepFocus ? 'reveal' : 'activate',\n                selection: range\n            }\n        ).then(editorWidget => {\n            if (editorWidget.parent instanceof DockPanel) {\n                editorWidget.parent.selectWidget(editorWidget);\n            }\n        });\n    }\n\n    storeState(): object {\n        const callHierarchyService = this.model.getTree().callHierarchyService;\n        if (this.model.root && callHierarchyService) {\n            return {\n                root: this.deflateForStorage(this.model.root),\n                languageId: this.model.languageId,\n            };\n        } else {\n            return {};\n        }\n    }\n\n    restoreState(oldState: object): void {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        if ((oldState as any).root && (oldState as any).languageId) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            const root = this.inflateFromStorage((oldState as any).root) as DefinitionNode;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.model.initializeCallHierarchy((oldState as any).languageId, root.definition.location.uri, root.definition.location.range.start);\n        }\n    }\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable } from 'inversify';\nimport { TreeNode, CompositeTreeNode, SelectableTreeNode, ExpandableTreeNode, TreeImpl } from '@theia/core/lib/browser';\n\nimport { Definition, Caller } from '../callhierarchy';\nimport { CallHierarchyService } from '../callhierarchy-service';\n\nimport { Md5 } from 'ts-md5/dist/md5';\nimport { CancellationTokenSource } from '@theia/core/lib/common/cancellation';\n\n@injectable()\nexport class CallHierarchyTree extends TreeImpl {\n\n    protected _callHierarchyService: CallHierarchyService | undefined;\n\n    set callHierarchyService(callHierarchyService: CallHierarchyService | undefined) {\n        this._callHierarchyService = callHierarchyService;\n    }\n\n    get callHierarchyService(): CallHierarchyService | undefined {\n        return this._callHierarchyService;\n    }\n\n    async resolveChildren(parent: CompositeTreeNode): Promise<TreeNode[]> {\n        if (!this.callHierarchyService) {\n            return Promise.resolve([]);\n        }\n        if (parent.children.length > 0) {\n            return Promise.resolve([...parent.children]);\n        }\n        let definition: Definition | undefined;\n        if (DefinitionNode.is(parent)) {\n            definition = parent.definition;\n        } else if (CallerNode.is(parent)) {\n            definition = parent.caller.callerDefinition;\n        }\n        if (definition) {\n            const cancellationSource = new CancellationTokenSource();\n            const callers = await this.callHierarchyService.getCallers(definition, cancellationSource.token);\n            if (!callers) {\n                return Promise.resolve([]);\n            }\n            return this.toNodes(callers, parent);\n        }\n        return Promise.resolve([]);\n    }\n\n    protected toNodes(callers: Caller[], parent: CompositeTreeNode): TreeNode[] {\n        return callers.map(caller => this.toNode(caller, parent));\n    }\n\n    protected toNode(caller: Caller, parent: CompositeTreeNode | undefined): TreeNode {\n        return CallerNode.create(caller, parent as TreeNode);\n    }\n}\n\nexport interface DefinitionNode extends SelectableTreeNode, ExpandableTreeNode {\n    definition: Definition;\n}\n\nexport namespace DefinitionNode {\n    export function is(node: TreeNode | undefined): node is DefinitionNode {\n        return !!node && 'definition' in node;\n    }\n\n    export function create(definition: Definition, parent: TreeNode | undefined): DefinitionNode {\n        const name = definition.symbolName;\n        const id = createId(definition, parent);\n        return <DefinitionNode>{\n            id, definition, name, parent,\n            visible: true,\n            children: [],\n            expanded: false,\n            selected: false,\n        };\n    }\n}\n\nexport interface CallerNode extends SelectableTreeNode, ExpandableTreeNode {\n    caller: Caller;\n}\n\nexport namespace CallerNode {\n    export function is(node: TreeNode | undefined): node is CallerNode {\n        return !!node && 'caller' in node;\n    }\n\n    export function create(caller: Caller, parent: TreeNode | undefined): CallerNode {\n        const callerDefinition = caller.callerDefinition;\n        const name = callerDefinition.symbolName;\n        const id = createId(callerDefinition, parent);\n        return <CallerNode>{\n            id, caller, name, parent,\n            visible: true,\n            children: [],\n            expanded: false,\n            selected: false,\n        };\n    }\n}\n\nfunction createId(definition: Definition, parent: TreeNode | undefined): string {\n    const idPrefix = (parent) ? parent.id + '/' : '';\n    const id = idPrefix + Md5.hashStr(JSON.stringify(definition));\n    return id;\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './callhierarchy-tree';\nexport * from './callhierarchy-tree-model';\nexport * from './callhierarchy-tree-widget';\nexport * from './callhierarchy-tree-container';\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { Range, SymbolKind, Location } from 'vscode-languageserver-types';\n\nexport const CALLHIERARCHY_ID = 'callhierarchy';\n\nexport interface Definition {\n    location: Location,\n    selectionRange: Range,\n    symbolName: string,\n    symbolKind: SymbolKind,\n    containerName: string | undefined\n}\n\nexport interface Caller {\n    callerDefinition: Definition,\n    references: Range[]\n}\n\nexport interface Callee {\n    calleeDefinition: Definition,\n    references: Range[]\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { injectable, inject } from 'inversify';\nimport { EditorManager, TextEditor } from '@theia/editor/lib/browser';\nimport { Location } from 'vscode-languageserver-types';\n\n@injectable()\nexport class CurrentEditorAccess {\n\n    @inject(EditorManager) protected readonly editorManager: EditorManager;\n\n    getSelection(): Location | undefined {\n        const activeEditor = this.getCurrentEditor();\n        if (!activeEditor) {\n            return;\n        }\n        const range = activeEditor.selection;\n        const uri = activeEditor.uri.toString();\n        return <Location>{ range, uri };\n    }\n\n    getLanguageId(): string | undefined {\n        const activeEditor = this.getCurrentEditor();\n        if (!activeEditor) {\n            return;\n        }\n        return activeEditor.document.languageId;\n    }\n\n    protected getCurrentEditor(): TextEditor | undefined {\n        const activeEditor = this.editorManager.currentEditor;\n        if (activeEditor) {\n            return activeEditor.editor;\n        }\n        return undefined;\n    }\n\n}\n","\nvar content = require(\"!!../../../../../css-loader/index.js!./index.css\");\n\nif(typeof content === 'string') content = [[module.id, content, '']];\n\nvar transform;\nvar insertInto;\n\n\n\nvar options = {\"hmr\":true}\n\noptions.transform = transform\noptions.insertInto = undefined;\n\nvar update = require(\"!../../../../../style-loader/lib/addStyles.js\")(content, options);\n\nif(content.locals) module.exports = content.locals;\n\nif(module.hot) {\n\tmodule.hot.accept(\"!!../../../../../css-loader/index.js!./index.css\", function() {\n\t\tvar newContent = require(\"!!../../../../../css-loader/index.js!./index.css\");\n\n\t\tif(typeof newContent === 'string') newContent = [[module.id, newContent, '']];\n\n\t\tvar locals = (function(a, b) {\n\t\t\tvar key, idx = 0;\n\n\t\t\tfor(key in a) {\n\t\t\t\tif(!b || a[key] !== b[key]) return false;\n\t\t\t\tidx++;\n\t\t\t}\n\n\t\t\tfor(key in b) idx--;\n\n\t\t\treturn idx === 0;\n\t\t}(content.locals, newContent.locals));\n\n\t\tif(!locals) throw new Error('Aborting CSS HMR due to changed css-modules locals.');\n\n\t\tupdate(newContent);\n\t});\n\n\tmodule.hot.dispose(function() { update(); });\n}","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n// copied from https://github.com/Microsoft/vscode/blob/bf7ac9201e7a7d01741d4e6e64b5dc9f3197d97b/src/vs/base/common/glob.ts\n/*---------------------------------------------------------------------------------------------\n *  Copyright (c) Microsoft Corporation. All rights reserved.\n *  Licensed under the MIT License. See License.txt in the project root for license information.\n *--------------------------------------------------------------------------------------------*/\n'use strict';\n\nimport * as strings from './strings';\nimport * as paths from './paths';\nimport { CharCode } from './char-code';\n/* eslint-disable no-shadow, no-null/no-null */\nexport interface IExpression {\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    [pattern: string]: boolean | SiblingClause | any;\n}\n\nexport interface IRelativePattern {\n    base: string;\n    pattern: string;\n    pathToRelative(from: string, to: string): string;\n}\n\nexport function getEmptyExpression(): IExpression {\n    return Object.create(null);\n}\n\nexport interface SiblingClause {\n    when: string;\n}\n\nconst GLOBSTAR = '**';\nconst GLOB_SPLIT = '/';\nconst PATH_REGEX = '[/\\\\\\\\]';        // any slash or backslash\nconst NO_PATH_REGEX = '[^/\\\\\\\\]';    // any non-slash and non-backslash\nconst ALL_FORWARD_SLASHES = /\\//g;\n\nfunction starsToRegExp(starCount: number): string {\n    switch (starCount) {\n        case 0:\n            return '';\n        case 1:\n            return `${NO_PATH_REGEX}*?`; // 1 star matches any number of characters except path separator (/ and \\) - non greedy (?)\n        default:\n            // Matches:  (Path Sep OR Path Val followed by Path Sep OR Path Sep followed by Path Val) 0-many times\n            // Group is non capturing because we don't need to capture at all (?:...)\n            // Overall we use non-greedy matching because it could be that we match too much\n            return `(?:${PATH_REGEX}|${NO_PATH_REGEX}+${PATH_REGEX}|${PATH_REGEX}${NO_PATH_REGEX}+)*?`;\n    }\n}\n\nexport function splitGlobAware(pattern: string, splitChar: string): string[] {\n    if (!pattern) {\n        return [];\n    }\n\n    const segments: string[] = [];\n\n    let inBraces = false;\n    let inBrackets = false;\n\n    let char: string;\n    let curVal = '';\n    for (let i = 0; i < pattern.length; i++) {\n        char = pattern[i];\n\n        switch (char) {\n            case splitChar:\n                if (!inBraces && !inBrackets) {\n                    segments.push(curVal);\n                    curVal = '';\n\n                    continue;\n                }\n                break;\n            case '{':\n                inBraces = true;\n                break;\n            case '}':\n                inBraces = false;\n                break;\n            case '[':\n                inBrackets = true;\n                break;\n            case ']':\n                inBrackets = false;\n                break;\n        }\n\n        curVal += char;\n    }\n\n    // Tail\n    if (curVal) {\n        segments.push(curVal);\n    }\n\n    return segments;\n}\n\nfunction parseRegExp(pattern: string): string {\n    if (!pattern) {\n        return '';\n    }\n\n    let regEx = '';\n\n    // Split up into segments for each slash found\n    // eslint-disable-next-line prefer-const\n    let segments = splitGlobAware(pattern, GLOB_SPLIT);\n\n    // Special case where we only have globstars\n    if (segments.every(s => s === GLOBSTAR)) {\n        regEx = '.*';\n    }\n\n    // Build regex over segments\n    // tslint:disable-next-line:one-line\n    else {\n        let previousSegmentWasGlobStar = false;\n        segments.forEach((segment, index) => {\n\n            // Globstar is special\n            if (segment === GLOBSTAR) {\n\n                // if we have more than one globstar after another, just ignore it\n                if (!previousSegmentWasGlobStar) {\n                    regEx += starsToRegExp(2);\n                    previousSegmentWasGlobStar = true;\n                }\n\n                return;\n            }\n\n            // States\n            let inBraces = false;\n            let braceVal = '';\n\n            let inBrackets = false;\n            let bracketVal = '';\n\n            let char: string;\n            for (let i = 0; i < segment.length; i++) {\n                char = segment[i];\n\n                // Support brace expansion\n                if (char !== '}' && inBraces) {\n                    braceVal += char;\n                    continue;\n                }\n\n                // Support brackets\n                if (inBrackets && (char !== ']' || !bracketVal) /* ] is literally only allowed as first character in brackets to match it */) {\n                    let res: string;\n\n                    // range operator\n                    if (char === '-') {\n                        res = char;\n                    }\n\n                    // negation operator (only valid on first index in bracket)\n                    // tslint:disable-next-line:one-line\n                    else if ((char === '^' || char === '!') && !bracketVal) {\n                        res = '^';\n                    }\n\n                    // glob split matching is not allowed within character ranges\n                    // see http://man7.org/linux/man-pages/man7/glob.7.html\n                    // tslint:disable-next-line:one-line\n                    else if (char === GLOB_SPLIT) {\n                        res = '';\n                    }\n\n                    // anything else gets escaped\n                    // tslint:disable-next-line:one-line\n                    else {\n                        res = strings.escapeRegExpCharacters(char);\n                    }\n\n                    bracketVal += res;\n                    continue;\n                }\n\n                switch (char) {\n                    case '{':\n                        inBraces = true;\n                        continue;\n\n                    case '[':\n                        inBrackets = true;\n                        continue;\n\n                    case '}':\n                        // eslint-disable-next-line prefer-const\n                        let choices = splitGlobAware(braceVal, ',');\n\n                        // Converts {foo,bar} => [foo|bar]\n                        // eslint-disable-next-line prefer-const\n                        let braceRegExp = `(?:${choices.map(c => parseRegExp(c)).join('|')})`;\n\n                        regEx += braceRegExp;\n\n                        inBraces = false;\n                        braceVal = '';\n\n                        break;\n\n                    case ']':\n                        regEx += ('[' + bracketVal + ']');\n\n                        inBrackets = false;\n                        bracketVal = '';\n\n                        break;\n\n                    case '?':\n                        regEx += NO_PATH_REGEX; // 1 ? matches any single character except path separator (/ and \\)\n                        continue;\n\n                    case '*':\n                        regEx += starsToRegExp(1);\n                        continue;\n\n                    default:\n                        regEx += strings.escapeRegExpCharacters(char);\n                }\n            }\n\n            // Tail: Add the slash we had split on if there is more to come and the remaining pattern is not a globstar\n            // For example if pattern: some/**/*.js we want the \"/\" after some to be included in the RegEx to prevent\n            // a folder called \"something\" to match as well.\n            // However, if pattern: some/**, we tolerate that we also match on \"something\" because our globstar behavior\n            // is to match 0-N segments.\n            if (index < segments.length - 1 && (segments[index + 1] !== GLOBSTAR || index + 2 < segments.length)) {\n                regEx += PATH_REGEX;\n            }\n\n            // reset state\n            previousSegmentWasGlobStar = false;\n        });\n    }\n\n    return regEx;\n}\n\n// regexes to check for trivial glob patterns that just check for String#endsWith\nconst T1 = /^\\*\\*\\/\\*\\.[\\w\\.-]+$/;                                        // **/*.something\nconst T2 = /^\\*\\*\\/([\\w\\.-]+)\\/?$/;                                            // **/something\nconst T3 = /^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+\\/?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+\\/?)*}$/;     // {**/*.something,**/*.else} or {**/package.json,**/project.json}\nconst T3_2 = /^{\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?(,\\*\\*\\/[\\*\\.]?[\\w\\.-]+(\\/(\\*\\*)?)?)*}$/;     // Like T3, with optional trailing /**\nconst T4 = /^\\*\\*((\\/[\\w\\.-]+)+)\\/?$/;                                        // **/something/else\nconst T5 = /^([\\w\\.-]+(\\/[\\w\\.-]+)*)\\/?$/;                                    // something/else\n\nexport type ParsedPattern = (path: string, basename?: string) => boolean;\n\n// The ParsedExpression returns a Promise iff hasSibling returns a Promise.\n// eslint-disable-next-line max-len\nexport type ParsedExpression = (path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>) => string | Promise<string> /* the matching pattern */;\n\nexport interface IGlobOptions {\n    /**\n     * Simplify patterns for use as exclusion filters during tree traversal to skip entire subtrees. Cannot be used outside of a tree traversal.\n     */\n    trimForExclusions?: boolean;\n}\n\ninterface ParsedStringPattern {\n    (path: string, basename: string): string | Promise<string> /* the matching pattern */;\n    basenames?: string[];\n    patterns?: string[];\n    allBasenames?: string[];\n    allPaths?: string[];\n}\ninterface ParsedExpressionPattern {\n    (path: string, basename: string, name: string, hasSibling: (name: string) => boolean | Promise<boolean>): string | Promise<string> /* the matching pattern */;\n    requiresSiblings?: boolean;\n    allBasenames?: string[];\n    allPaths?: string[];\n}\n\nconst CACHE = new Map<string, ParsedStringPattern>();  // new LRUCache<string, ParsedStringPattern>(10000); // bounded to 10000 elements\n\nconst FALSE = function (): boolean {\n    return false;\n};\n\nconst NULL = function (): string {\n    return null!;\n};\n\nfunction parsePattern(arg1: string | IRelativePattern, options: IGlobOptions): ParsedStringPattern {\n    if (!arg1) {\n        return NULL;\n    }\n\n    // Handle IRelativePattern\n    let pattern: string;\n    if (typeof arg1 !== 'string') {\n        pattern = arg1.pattern;\n    } else {\n        pattern = arg1;\n    }\n\n    // Whitespace trimming\n    pattern = pattern.trim();\n\n    // Check cache\n    const patternKey = `${pattern}_${!!options.trimForExclusions}`;\n    let parsedPattern = CACHE.get(patternKey);\n    if (parsedPattern) {\n        return wrapRelativePattern(parsedPattern, arg1);\n    }\n\n    // Check for Trivias\n    let match: RegExpExecArray;\n    if (T1.test(pattern)) { // common pattern: **/*.txt just need endsWith check\n        const base = pattern.substr(4); // '**/*'.length === 4\n        parsedPattern = function (path, basename): string {\n            return path && strings.endsWith(path, base) ? pattern : null!;\n        };\n    } else if (match = T2.exec(trimForExclusions(pattern, options))!) { // common pattern: **/some.txt just need basename check\n        parsedPattern = trivia2(match[1], pattern);\n    } else if ((options.trimForExclusions ? T3_2 : T3).test(pattern)) { // repetition of common patterns (see above) {**/*.txt,**/*.png}\n        parsedPattern = trivia3(pattern, options);\n    } else if (match = T4.exec(trimForExclusions(pattern, options))!) { // common pattern: **/something/else just need endsWith check\n        parsedPattern = trivia4and5(match[1].substr(1), pattern, true);\n    } else if (match = T5.exec(trimForExclusions(pattern, options))!) { // common pattern: something/else just need equals check\n        parsedPattern = trivia4and5(match[1], pattern, false);\n    }\n\n    // Otherwise convert to pattern\n    // tslint:disable-next-line:one-line\n    else {\n        parsedPattern = toRegExp(pattern);\n    }\n\n    // Cache\n    CACHE.set(patternKey, parsedPattern);\n\n    return wrapRelativePattern(parsedPattern, arg1);\n}\n\nfunction wrapRelativePattern(parsedPattern: ParsedStringPattern, arg2: string | IRelativePattern): ParsedStringPattern {\n    if (typeof arg2 === 'string') {\n        return parsedPattern;\n    }\n\n    return function (path, basename): string | Promise<string> {\n        if (!paths.isEqualOrParent(path, arg2.base)) {\n            return null!;\n        }\n\n        return parsedPattern(paths.normalize(arg2.pathToRelative(arg2.base, path)), basename);\n    };\n}\n\nfunction trimForExclusions(pattern: string, options: IGlobOptions): string {\n    return options.trimForExclusions && strings.endsWith(pattern, '/**') ? pattern.substr(0, pattern.length - 2) : pattern; // dropping **, tailing / is dropped later\n}\n\n// common pattern: **/some.txt just need basename check\nfunction trivia2(base: string, originalPattern: string): ParsedStringPattern {\n    const slashBase = `/${base}`;\n    const backslashBase = `\\\\${base}`;\n    const parsedPattern: ParsedStringPattern = function (path, basename): string {\n        if (!path) {\n            return null!;\n        }\n        if (basename) {\n            return basename === base ? originalPattern : null!;\n        }\n        return path === base || strings.endsWith(path, slashBase) || strings.endsWith(path, backslashBase) ? originalPattern : null!;\n    };\n    const basenames = [base];\n    parsedPattern.basenames = basenames;\n    parsedPattern.patterns = [originalPattern];\n    parsedPattern.allBasenames = basenames;\n    return parsedPattern;\n}\n\n// repetition of common patterns (see above) {**/*.txt,**/*.png}\nfunction trivia3(pattern: string, options: IGlobOptions): ParsedStringPattern {\n    const parsedPatterns = aggregateBasenameMatches(pattern.slice(1, -1).split(',')\n        .map(pattern => parsePattern(pattern, options))\n        .filter(pattern => pattern !== NULL), pattern);\n    const n = parsedPatterns.length;\n    if (!n) {\n        return NULL;\n    }\n    if (n === 1) {\n        return <ParsedStringPattern>parsedPatterns[0];\n    }\n    const parsedPattern: ParsedStringPattern = function (path: string, basename: string): string {\n        for (let i = 0, n = parsedPatterns.length; i < n; i++) {\n            if ((<ParsedStringPattern>parsedPatterns[i])(path, basename)) {\n                return pattern;\n            }\n        }\n        return null!;\n    };\n    const withBasenames = parsedPatterns.find(pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n    // const withBasenames = arrays.first(parsedPatterns, pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n    if (withBasenames) {\n        parsedPattern.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n    }\n    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n    if (allPaths.length) {\n        parsedPattern.allPaths = allPaths;\n    }\n    return parsedPattern;\n}\n\n// common patterns: **/something/else just need endsWith check, something/else just needs and equals check\nfunction trivia4and5(path: string, pattern: string, matchPathEnds: boolean): ParsedStringPattern {\n    const nativePath = paths.nativeSep !== paths.sep ? path.replace(ALL_FORWARD_SLASHES, paths.nativeSep) : path;\n    const nativePathEnd = paths.nativeSep + nativePath;\n    // eslint-disable-next-line no-shadow\n    const parsedPattern: ParsedStringPattern = matchPathEnds ? function (path, basename): string {\n        return path && (path === nativePath || strings.endsWith(path, nativePathEnd)) ? pattern : null!;\n        // eslint-disable-next-line no-shadow\n    } : function (path, basename): string {\n        return path && path === nativePath ? pattern : null!;\n    };\n    parsedPattern.allPaths = [(matchPathEnds ? '*/' : './') + path];\n    return parsedPattern;\n}\n\nfunction toRegExp(pattern: string): ParsedStringPattern {\n    try {\n        const regExp = new RegExp(`^${parseRegExp(pattern)}$`);\n        return function (path: string, basename: string): string {\n            regExp.lastIndex = 0; // reset RegExp to its initial state to reuse it!\n            return path && regExp.test(path) ? pattern : null!;\n        };\n    } catch (error) {\n        return NULL;\n    }\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function match(pattern: string | IRelativePattern, path: string): boolean;\nexport function match(expression: IExpression, path: string, hasSibling?: (name: string) => boolean): string /* the matching pattern */;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function match(arg1: string | IExpression | IRelativePattern, path: string, hasSibling?: (name: string) => boolean): any {\n    if (!arg1 || !path) {\n        return false;\n    }\n\n    return parse(<IExpression>arg1)(path, undefined, hasSibling);\n}\n\n/**\n * Simplified glob matching. Supports a subset of glob patterns:\n * - * matches anything inside a path segment\n * - ? matches 1 character inside a path segment\n * - ** matches anything including an empty path segment\n * - simple brace expansion ({js,ts} => js or ts)\n * - character ranges (using [...])\n */\nexport function parse(pattern: string | IRelativePattern, options?: IGlobOptions): ParsedPattern;\nexport function parse(expression: IExpression, options?: IGlobOptions): ParsedExpression;\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function parse(arg1: string | IExpression | IRelativePattern, options: IGlobOptions = {}): any {\n    if (!arg1) {\n        return FALSE;\n    }\n\n    // Glob with String\n    if (typeof arg1 === 'string' || isRelativePattern(arg1)) {\n        const parsedPattern = parsePattern(arg1 as string | IRelativePattern, options);\n        if (parsedPattern === NULL) {\n            return FALSE;\n        }\n        const resultPattern = function (path: string, basename: string): boolean {\n            return !!parsedPattern(path, basename);\n        };\n        if (parsedPattern.allBasenames) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (<ParsedStringPattern><any>resultPattern).allBasenames = parsedPattern.allBasenames;\n        }\n        if (parsedPattern.allPaths) {\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            (<ParsedStringPattern><any>resultPattern).allPaths = parsedPattern.allPaths;\n        }\n        return resultPattern;\n    }\n\n    // Glob with Expression\n    return parsedExpression(<IExpression>arg1, options);\n}\n\nexport function hasSiblingPromiseFn(siblingsFn?: () => Promise<string[]>): ((name: string) => Promise<boolean>) | undefined {\n    if (!siblingsFn) {\n        return undefined;\n    }\n\n    let siblings: Promise<Record<string, true>>;\n    return (name: string) => {\n        if (!siblings) {\n            siblings = (siblingsFn() || Promise.resolve([]))\n                .then(list => list ? listToMap(list) : {});\n        }\n        return siblings.then(map => !!map[name]);\n    };\n}\n\nexport function hasSiblingFn(siblingsFn?: () => string[]): ((name: string) => boolean) | undefined {\n    if (!siblingsFn) {\n        return undefined;\n    }\n\n    let siblings: Record<string, true>;\n    return (name: string) => {\n        if (!siblings) {\n            const list = siblingsFn();\n            siblings = list ? listToMap(list) : {};\n        }\n        return !!siblings[name];\n    };\n}\n\nfunction listToMap(list: string[]): Record<string, true> {\n    const map: Record<string, true> = {};\n    for (const key of list) {\n        map[key] = true;\n    }\n    return map;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport function isRelativePattern(obj: any): obj is IRelativePattern {\n    const rp = obj as IRelativePattern;\n\n    return rp && typeof rp.base === 'string' && typeof rp.pattern === 'string' && typeof rp.pathToRelative === 'function';\n}\n\n/**\n * Same as `parse`, but the ParsedExpression is guaranteed to return a Promise\n */\nexport function parseToAsync(expression: IExpression, options?: IGlobOptions): ParsedExpression {\n    // eslint-disable-next-line no-shadow\n    const parsedExpression = parse(expression, options);\n    return (path: string, basename?: string, hasSibling?: (name: string) => boolean | Promise<boolean>): string | Promise<string> => {\n        const result = parsedExpression(path, basename, hasSibling);\n        return result instanceof Promise ? result : Promise.resolve(result);\n    };\n}\n\nexport function getBasenameTerms(patternOrExpression: ParsedPattern | ParsedExpression): string[] {\n    return (<ParsedStringPattern>patternOrExpression).allBasenames || [];\n}\n\nexport function getPathTerms(patternOrExpression: ParsedPattern | ParsedExpression): string[] {\n    return (<ParsedStringPattern>patternOrExpression).allPaths || [];\n}\n\nfunction parsedExpression(expression: IExpression, options: IGlobOptions): ParsedExpression {\n    const parsedPatterns = aggregateBasenameMatches(Object.getOwnPropertyNames(expression)\n        .map(pattern => parseExpressionPattern(pattern, expression[pattern], options))\n        .filter(pattern => pattern !== NULL));\n\n    const n = parsedPatterns.length;\n    if (!n) {\n        return NULL;\n    }\n\n    if (!parsedPatterns.some(parsedPattern => (<ParsedExpressionPattern>parsedPattern).requiresSiblings!)) {\n        if (n === 1) {\n            return <ParsedStringPattern>parsedPatterns[0];\n        }\n\n        // eslint-disable-next-line no-shadow\n        const resultExpression: ParsedStringPattern = function (path: string, basename: string): string | Promise<string> {\n            // eslint-disable-next-line no-shadow\n            // tslint:disable-next-line:one-variable-per-declaration\n            for (let i = 0, n = parsedPatterns.length; i < n; i++) {\n                // Pattern matches path\n                const result = (<ParsedStringPattern>parsedPatterns[i])(path, basename);\n                if (result) {\n                    return result;\n                }\n            }\n\n            return null!;\n        };\n\n        // eslint-disable-next-line no-shadow\n        const withBasenames = parsedPatterns.find(pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n        if (withBasenames) {\n            resultExpression.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n        }\n\n        // eslint-disable-next-line no-shadow\n        const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n        if (allPaths.length) {\n            resultExpression.allPaths = allPaths;\n        }\n\n        return resultExpression;\n    }\n\n    const resultExpression: ParsedStringPattern = function (path: string, basename: string, hasSibling?: (name: string) => boolean | Promise<boolean>): string | Promise<string> {\n        let name: string = null!;\n\n        // eslint-disable-next-line no-shadow\n        for (let i = 0, n = parsedPatterns.length; i < n; i++) {\n            // Pattern matches path\n            const parsedPattern = (<ParsedExpressionPattern>parsedPatterns[i]);\n            if (parsedPattern.requiresSiblings && hasSibling) {\n                if (!basename) {\n                    basename = paths.basename(path);\n                }\n                if (!name) {\n                    name = basename.substr(0, basename.length - paths.extname(path).length);\n                }\n            }\n            const result = parsedPattern(path, basename, name, hasSibling!);\n            if (result) {\n                return result;\n            }\n        }\n\n        return null!;\n    };\n\n    const withBasenames = parsedPatterns.find(pattern => !!(<ParsedStringPattern>pattern).allBasenames);\n    if (withBasenames) {\n        resultExpression.allBasenames = (<ParsedStringPattern>withBasenames).allBasenames;\n    }\n\n    const allPaths = parsedPatterns.reduce((all, current) => current.allPaths ? all.concat(current.allPaths) : all, <string[]>[]);\n    if (allPaths.length) {\n        resultExpression.allPaths = allPaths;\n    }\n\n    return resultExpression;\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nfunction parseExpressionPattern(pattern: string, value: any, options: IGlobOptions): (ParsedStringPattern | ParsedExpressionPattern) {\n    if (value === false) {\n        return NULL; // pattern is disabled\n    }\n\n    const parsedPattern = parsePattern(pattern, options);\n    if (parsedPattern === NULL) {\n        return NULL;\n    }\n\n    // Expression Pattern is <boolean>\n    if (typeof value === 'boolean') {\n        return parsedPattern;\n    }\n\n    // Expression Pattern is <SiblingClause>\n    if (value) {\n        const when = (<SiblingClause>value).when;\n        if (typeof when === 'string') {\n            const result: ParsedExpressionPattern = (path: string, basename: string, name: string, hasSibling: (name: string) => boolean | Promise<boolean>) => {\n                if (!hasSibling || !parsedPattern(path, basename)) {\n                    return null!;\n                }\n\n                const clausePattern = when.replace('$(basename)', name);\n                const matched = hasSibling(clausePattern);\n                return matched instanceof Promise ?\n                    matched.then(m => m ? pattern : null!) :\n                    matched ? pattern : null!;\n            };\n            result.requiresSiblings = true;\n            return result;\n        }\n    }\n\n    // Expression is Anything\n    return parsedPattern;\n}\n\nfunction aggregateBasenameMatches(parsedPatterns: (ParsedStringPattern | ParsedExpressionPattern)[], result?: string): (ParsedStringPattern | ParsedExpressionPattern)[] {\n    const basenamePatterns = parsedPatterns.filter(parsedPattern => !!(<ParsedStringPattern>parsedPattern).basenames);\n    if (basenamePatterns.length < 2) {\n        return parsedPatterns;\n    }\n\n    const basenames = basenamePatterns.reduce<string[]>((all, current) => all.concat((<ParsedStringPattern>current).basenames!), []);\n    let patterns: string[];\n    if (result) {\n        patterns = [];\n        // tslint:disable-next-line:one-variable-per-declaration\n        for (let i = 0, n = basenames.length; i < n; i++) {\n            patterns.push(result);\n        }\n    } else {\n        patterns = basenamePatterns.reduce((all, current) => all.concat((<ParsedStringPattern>current).patterns!), <string[]>[]);\n    }\n    const aggregate: ParsedStringPattern = function (path, basename): string {\n        if (!path) {\n            return null!;\n        }\n        if (!basename) {\n            let i: number;\n            for (i = path.length; i > 0; i--) {\n                const ch = path.charCodeAt(i - 1);\n                if (ch === CharCode.Slash || ch === CharCode.Backslash) {\n                    break;\n                }\n            }\n            basename = path.substr(i);\n        }\n        const index = basenames.indexOf(basename);\n        return index !== -1 ? patterns[index] : null!;\n    };\n    aggregate.basenames = basenames;\n    aggregate.patterns = patterns;\n    aggregate.allBasenames = basenames;\n\n    const aggregatedPatterns = parsedPatterns.filter(parsedPattern => !(<ParsedStringPattern>parsedPattern).basenames);\n    aggregatedPatterns.push(aggregate);\n    return aggregatedPatterns;\n}\n","/********************************************************************************\n * Copyright (C) 2018 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nexport * from './language-selector';\nexport * from './glob';\n","/********************************************************************************\n * Copyright (C) 2020 Red Hat, Inc. and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\nimport { match as matchGlobPattern } from './glob';\n\nexport interface RelativePattern {\n    base: string;\n    pattern: string;\n    pathToRelative(from: string, to: string): string;\n}\n\nexport interface LanguageFilter {\n    language?: string;\n    scheme?: string;\n    pattern?: string | RelativePattern;\n    hasAccessToAllModels?: boolean;\n}\nexport type LanguageSelector = string | LanguageFilter | (string | LanguageFilter)[];\n\nexport function score(selector: LanguageSelector | undefined, uriScheme: string, path: string, candidateLanguage: string, candidateIsSynchronized: boolean): number {\n\n    if (Array.isArray(selector)) {\n        let ret = 0;\n        for (const filter of selector) {\n            const value = score(filter, uriScheme, path, candidateLanguage, candidateIsSynchronized);\n            if (value === 10) {\n                return value;\n            }\n            if (value > ret) {\n                ret = value;\n            }\n        }\n        return ret;\n\n    } else if (typeof selector === 'string') {\n\n        if (!candidateIsSynchronized) {\n            return 0;\n        }\n\n        if (selector === '*') {\n            return 5;\n        } else if (selector === candidateLanguage) {\n            return 10;\n        } else {\n            return 0;\n        }\n\n    } else if (selector) {\n        const { language, pattern, scheme, hasAccessToAllModels } = selector;\n\n        if (!candidateIsSynchronized && !hasAccessToAllModels) {\n            return 0;\n        }\n\n        let result = 0;\n\n        if (scheme) {\n            if (scheme === uriScheme) {\n                result = 10;\n            } else if (scheme === '*') {\n                result = 5;\n            } else {\n                return 0;\n            }\n        }\n\n        if (language) {\n            if (language === candidateLanguage) {\n                result = 10;\n            } else if (language === '*') {\n                result = Math.max(result, 5);\n            } else {\n                return 0;\n            }\n        }\n\n        if (pattern) {\n            if (pattern === path || matchGlobPattern(pattern, path)) {\n                result = 10;\n            } else {\n                return 0;\n            }\n        }\n\n        return result;\n\n    } else {\n        return 0;\n    }\n}\n","exports = module.exports = require(\"../../../../../css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"/********************************************************************************\\n * Copyright (C) 2018 TypeFox and others.\\n *\\n * This program and the accompanying materials are made available under the\\n * terms of the Eclipse Public License v. 2.0 which is available at\\n * http://www.eclipse.org/legal/epl-2.0.\\n *\\n * This Source Code may also be made available under the following Secondary\\n * Licenses when the conditions for such availability set forth in the Eclipse\\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\\n * with the GNU Classpath Exception which is available at\\n * https://www.gnu.org/software/classpath/license.html.\\n *\\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\\n ********************************************************************************/\\n\\n.theia-CallHierarchyTree {\\n    font-size: var(--theia-ui-font-size1);\\n}\\n\\n.theia-CallHierarchyTree .theia-TreeNode {\\n    width: 100%;\\n}\\n\\n.theia-CallHierarchyTree .theia-ExpansionToggle {\\n    min-width: 9px;\\n    padding-right: 4px;\\n}\\n\\n.theia-CallHierarchyTree .definitionNode {\\n    display: flex;\\n}\\n\\n.theia-CallHierarchyTree .definitionNode {\\n    width: calc(100% - 32px);\\n}\\n\\n.theia-CallHierarchyTree .definitionNode div {\\n    margin-right: 5px;\\n}\\n\\n.theia-CallHierarchyTree .definitionNode .symbol {\\n    padding-right: 4px;\\n}\\n\\n.theia-CallHierarchyTree .definitionNode .referenceCount {\\n    color: var(--theia-badge-background);\\n}\\n\\n.theia-CallHierarchyTree .definitionNode .container {\\n    color: var(--theia-descriptionForeground);\\n}\\n\\n.call-hierarchy-tab-icon::before {\\n    content: \\\"\\\\F0AB\\\"\\n}\\n\\n.theia-CallHierarchyTree .definitionNode-content {\\n    white-space: nowrap;\\n    overflow: hidden;\\n    text-overflow: ellipsis;\\n}\\n\", \"\"]);\n\n// exports\n"],"sourceRoot":""}