{"version":3,"sources":["webpack:///./node_modules/@theia/git/src/browser/prompt/git-prompt-module.ts","webpack:///./node_modules/@theia/git/src/common/git-prompt.ts","webpack:///./node_modules/@theia/git/src/electron-browser/prompt/electron-git-prompt-module.ts","webpack:///./node_modules/@theia/git/src/electron-browser/prompt/git-quick-open-prompt.ts","webpack:///./node_modules/p-queue/index.js"],"names":[],"mappings":"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;;;;;;;;;;;ACvBlB;;AAEb;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;;AAEH,mBAAmB;;AAEnB;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;;AAEH;AACA,uFAAuF,iBAAiB,MAAM,wBAAwB;AACtI;;AAEA,qCAAqC;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,OAAO;AACP;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;;AAEA;AACA;AACA,IAAI;AACJ;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA,sCAAsC;AACtC;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA","file":"75.bundle.js","sourcesContent":["/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule, interfaces } from 'inversify';\nimport { WebSocketConnectionProvider } from '@theia/core/lib/browser/messaging/ws-connection-provider';\nimport { GitPrompt, GitPromptServer, GitPromptServerProxy, GitPromptServerImpl } from '../../common/git-prompt';\n\nexport default new ContainerModule(bind => {\n    bind(GitPrompt).toSelf();\n    bindPromptServer(bind);\n});\n\nexport function bindPromptServer(bind: interfaces.Bind): void {\n    bind(GitPromptServer).to(GitPromptServerImpl).inSingletonScope();\n    bind(GitPromptServerProxy).toDynamicValue(context => WebSocketConnectionProvider.createProxy(context.container, GitPrompt.WS_PATH)).inSingletonScope();\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable, postConstruct } from 'inversify';\nimport { JsonRpcProxy } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { JsonRpcServer } from '@theia/core/lib/common/messaging/proxy-factory';\nimport { Disposable, DisposableCollection } from '@theia/core/lib/common/disposable';\n\nexport const GitPromptServer = Symbol('GitPromptServer');\nexport interface GitPromptServer extends JsonRpcServer<GitPromptClient> {\n}\n\nexport const GitPromptServerProxy = Symbol('GitPromptServerProxy');\nexport interface GitPromptServerProxy extends JsonRpcProxy<GitPromptServer> {\n}\n\n@injectable()\nexport class GitPrompt implements GitPromptClient, Disposable {\n\n    @inject(GitPromptServer)\n    protected readonly server: GitPromptServer;\n\n    protected readonly toDispose = new DisposableCollection();\n\n    @postConstruct()\n    protected init(): void {\n        this.server.setClient(this);\n    }\n\n    dispose(): void {\n        this.toDispose.dispose();\n    }\n\n    async ask(question: GitPrompt.Question): Promise<GitPrompt.Answer> {\n        return GitPrompt.Failure.create('Interactive Git prompt is not supported in the browser.');\n    }\n\n}\n\nexport namespace GitPrompt {\n\n    /**\n     * Unique WS endpoint path for the Git prompt service.\n     */\n    export const WS_PATH = 'services/git-prompt';\n\n    export interface Question {\n        readonly text: string;\n        readonly details?: string;\n        readonly password?: boolean;\n    }\n\n    export interface Answer {\n        readonly type: Answer.Type;\n    }\n\n    export interface Success {\n        readonly type: Answer.Type.SUCCESS;\n        readonly result: string | boolean;\n    }\n\n    export namespace Success {\n\n        export function is(answer: Answer): answer is Success {\n            return answer.type === Answer.Type.SUCCESS\n                && 'result' in answer\n                && ((typeof (answer as Success).result) === 'string' || (typeof (answer as Success).result) === 'boolean');\n        }\n\n        export function create(result: string | boolean): Success {\n            return {\n                type: Answer.Type.SUCCESS,\n                result\n            };\n        }\n\n    }\n\n    export interface Cancel extends Answer {\n        readonly type: Answer.Type.CANCEL;\n    }\n\n    export namespace Cancel {\n\n        export function is(answer: Answer): answer is Cancel {\n            return answer.type === Answer.Type.CANCEL;\n        }\n\n        export function create(): Cancel {\n            return {\n                type: Answer.Type.CANCEL\n            };\n        }\n\n    }\n\n    export interface Failure extends Answer {\n        readonly type: Answer.Type.FAILURE;\n        readonly error: string | Error;\n    }\n\n    export namespace Failure {\n\n        export function is(answer: Answer): answer is Failure {\n            return answer.type === Answer.Type.FAILURE\n                && 'error' in answer\n                && ((typeof (answer as Failure).error) === 'string' || (answer as Failure).error instanceof Error);\n        }\n\n        export function create(error: string | Error): Failure {\n            return {\n                type: Answer.Type.FAILURE,\n                error\n            };\n        }\n\n    }\n\n    export namespace Answer {\n\n        export enum Type {\n\n            SUCCESS,\n            CANCEL,\n            FAILURE\n\n        }\n\n    }\n\n}\n\nexport const GitPromptClient = Symbol('GitPromptClient');\nexport interface GitPromptClient {\n\n    ask(question: GitPrompt.Question): Promise<GitPrompt.Answer>;\n\n    // TODO: implement `confirm` with boolean return type.\n    // TODO: implement `select` with possible answers.\n\n}\n\n/**\n * Note: This implementation is not reconnecting.\n * Git prompting is not supported in the browser. In electron, there's no need to reconnect.\n */\n@injectable()\nexport class GitPromptServerImpl implements GitPromptServer {\n\n    @inject(GitPromptServerProxy)\n    protected readonly proxy: GitPromptServerProxy;\n\n    setClient(client: GitPromptClient): void {\n        this.proxy.setClient(client);\n    }\n\n    dispose(): void {\n        this.proxy.dispose();\n    }\n\n}\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { ContainerModule } from 'inversify';\nimport { GitPrompt } from '../../common/git-prompt';\nimport { bindPromptServer } from '../../browser/prompt/git-prompt-module';\nimport { GitQuickOpenPrompt } from './git-quick-open-prompt';\n\nexport default new ContainerModule(bind => {\n    bind(GitQuickOpenPrompt).toSelf().inSingletonScope();\n    bind(GitPrompt).toService(GitQuickOpenPrompt);\n    bindPromptServer(bind);\n});\n","/********************************************************************************\n * Copyright (C) 2018 TypeFox and others.\n *\n * This program and the accompanying materials are made available under the\n * terms of the Eclipse Public License v. 2.0 which is available at\n * http://www.eclipse.org/legal/epl-2.0.\n *\n * This Source Code may also be made available under the following Secondary\n * Licenses when the conditions for such availability set forth in the Eclipse\n * Public License v. 2.0 are satisfied: GNU General Public License, version 2\n * with the GNU Classpath Exception which is available at\n * https://www.gnu.org/software/classpath/license.html.\n *\n * SPDX-License-Identifier: EPL-2.0 OR GPL-2.0 WITH Classpath-exception-2.0\n ********************************************************************************/\n\nimport { inject, injectable } from 'inversify';\nimport * as PQueue from 'p-queue';\nimport { QuickOpenItem, QuickOpenMode } from '@theia/core/lib/browser/quick-open/quick-open-model';\nimport { QuickOpenService } from '@theia/core/lib/browser/quick-open/quick-open-service';\nimport { GitPrompt } from '../../common/git-prompt';\n\n@injectable()\nexport class GitQuickOpenPrompt extends GitPrompt {\n\n    @inject(QuickOpenService)\n    protected readonly quickOpenService: QuickOpenService;\n\n    protected readonly queue = new PQueue({ autoStart: true, concurrency: 1 });\n\n    async ask(question: GitPrompt.Question): Promise<GitPrompt.Answer> {\n        return this.queue.add(() => {\n            const { details, text, password } = question;\n            return new Promise<GitPrompt.Answer>(resolve => {\n                const model = {\n                    onType(lookFor: string, acceptor: (items: QuickOpenItem[]) => void): void {\n                        acceptor([\n                            new QuickOpenItem({\n                                label: details,\n                                run: (mode: QuickOpenMode): boolean => {\n                                    if (mode !== QuickOpenMode.OPEN) {\n                                        return false;\n                                    }\n                                    resolve(GitPrompt.Success.create(lookFor));\n                                    return true;\n                                }\n                            })\n                        ]);\n                    }\n                };\n                const options = {\n                    onClose: (canceled: boolean): void => {\n                        if (canceled) {\n                            resolve(GitPrompt.Cancel.create());\n                        }\n                    },\n                    placeholder: text,\n                    password\n                };\n                this.quickOpenService.open(model, options);\n            });\n        });\n    }\n\n    dispose(): void {\n        if (!this.queue.isPaused) {\n            this.queue.pause();\n        }\n        this.queue.clear();\n    }\n\n}\n","'use strict';\n\n// Port of lower_bound from http://en.cppreference.com/w/cpp/algorithm/lower_bound\n// Used to compute insertion index to keep queue sorted after insertion\nfunction lowerBound(array, value, comp) {\n\tlet first = 0;\n\tlet count = array.length;\n\n\twhile (count > 0) {\n\t\tconst step = (count / 2) | 0;\n\t\tlet it = first + step;\n\n\t\tif (comp(array[it], value) <= 0) {\n\t\t\tfirst = ++it;\n\t\t\tcount -= step + 1;\n\t\t} else {\n\t\t\tcount = step;\n\t\t}\n\t}\n\n\treturn first;\n}\n\nclass PriorityQueue {\n\tconstructor() {\n\t\tthis._queue = [];\n\t}\n\n\tenqueue(run, opts) {\n\t\topts = Object.assign({\n\t\t\tpriority: 0\n\t\t}, opts);\n\n\t\tconst element = {priority: opts.priority, run};\n\n\t\tif (this.size && this._queue[this.size - 1].priority >= opts.priority) {\n\t\t\tthis._queue.push(element);\n\t\t\treturn;\n\t\t}\n\n\t\tconst index = lowerBound(this._queue, element, (a, b) => b.priority - a.priority);\n\t\tthis._queue.splice(index, 0, element);\n\t}\n\n\tdequeue() {\n\t\treturn this._queue.shift().run;\n\t}\n\n\tget size() {\n\t\treturn this._queue.length;\n\t}\n}\n\nclass PQueue {\n\tconstructor(opts) {\n\t\topts = Object.assign({\n\t\t\tconcurrency: Infinity,\n\t\t\tautoStart: true,\n\t\t\tqueueClass: PriorityQueue\n\t\t}, opts);\n\n\t\tif (!(typeof opts.concurrency === 'number' && opts.concurrency >= 1)) {\n\t\t\tthrow new TypeError(`Expected \\`concurrency\\` to be a number from 1 and up, got \\`${opts.concurrency}\\` (${typeof opts.concurrency})`);\n\t\t}\n\n\t\tthis.queue = new opts.queueClass(); // eslint-disable-line new-cap\n\t\tthis._queueClass = opts.queueClass;\n\t\tthis._pendingCount = 0;\n\t\tthis._concurrency = opts.concurrency;\n\t\tthis._isPaused = opts.autoStart === false;\n\t\tthis._resolveEmpty = () => {};\n\t\tthis._resolveIdle = () => {};\n\t}\n\n\t_next() {\n\t\tthis._pendingCount--;\n\n\t\tif (this.queue.size > 0) {\n\t\t\tif (!this._isPaused) {\n\t\t\t\tthis.queue.dequeue()();\n\t\t\t}\n\t\t} else {\n\t\t\tthis._resolveEmpty();\n\t\t\tthis._resolveEmpty = () => {};\n\n\t\t\tif (this._pendingCount === 0) {\n\t\t\t\tthis._resolveIdle();\n\t\t\t\tthis._resolveIdle = () => {};\n\t\t\t}\n\t\t}\n\t}\n\n\tadd(fn, opts) {\n\t\treturn new Promise((resolve, reject) => {\n\t\t\tconst run = () => {\n\t\t\t\tthis._pendingCount++;\n\n\t\t\t\ttry {\n\t\t\t\t\tPromise.resolve(fn()).then(\n\t\t\t\t\t\tval => {\n\t\t\t\t\t\t\tresolve(val);\n\t\t\t\t\t\t\tthis._next();\n\t\t\t\t\t\t},\n\t\t\t\t\t\terr => {\n\t\t\t\t\t\t\treject(err);\n\t\t\t\t\t\t\tthis._next();\n\t\t\t\t\t\t}\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\treject(err);\n\t\t\t\t\tthis._next();\n\t\t\t\t}\n\t\t\t};\n\n\t\t\tif (!this._isPaused && this._pendingCount < this._concurrency) {\n\t\t\t\trun();\n\t\t\t} else {\n\t\t\t\tthis.queue.enqueue(run, opts);\n\t\t\t}\n\t\t});\n\t}\n\n\taddAll(fns, opts) {\n\t\treturn Promise.all(fns.map(fn => this.add(fn, opts)));\n\t}\n\n\tstart() {\n\t\tif (!this._isPaused) {\n\t\t\treturn;\n\t\t}\n\n\t\tthis._isPaused = false;\n\t\twhile (this.queue.size > 0 && this._pendingCount < this._concurrency) {\n\t\t\tthis.queue.dequeue()();\n\t\t}\n\t}\n\n\tpause() {\n\t\tthis._isPaused = true;\n\t}\n\n\tclear() {\n\t\tthis.queue = new this._queueClass(); // eslint-disable-line new-cap\n\t}\n\n\tonEmpty() {\n\t\t// Instantly resolve if the queue is empty\n\t\tif (this.queue.size === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise(resolve => {\n\t\t\tconst existingResolve = this._resolveEmpty;\n\t\t\tthis._resolveEmpty = () => {\n\t\t\t\texistingResolve();\n\t\t\t\tresolve();\n\t\t\t};\n\t\t});\n\t}\n\n\tonIdle() {\n\t\t// Instantly resolve if none pending\n\t\tif (this._pendingCount === 0) {\n\t\t\treturn Promise.resolve();\n\t\t}\n\n\t\treturn new Promise(resolve => {\n\t\t\tconst existingResolve = this._resolveIdle;\n\t\t\tthis._resolveIdle = () => {\n\t\t\t\texistingResolve();\n\t\t\t\tresolve();\n\t\t\t};\n\t\t});\n\t}\n\n\tget size() {\n\t\treturn this.queue.size;\n\t}\n\n\tget pending() {\n\t\treturn this._pendingCount;\n\t}\n\n\tget isPaused() {\n\t\treturn this._isPaused;\n\t}\n}\n\nmodule.exports = PQueue;\n"],"sourceRoot":""}